{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Teable Client Library","text":"<p>A professional Python client library for interacting with the Teable API. This library provides a comprehensive, object-oriented interface for managing spaces, bases, tables, records, fields, and views in Teable.</p>"},{"location":"#overview","title":"Overview","text":"<p>The Teable Client Library is designed to provide a seamless interface to Teable's API, offering:</p>"},{"location":"#authentication-authorization","title":"\ud83d\udd10 Authentication &amp; Authorization","text":"<ul> <li>API key-based authentication for basic operations</li> <li>Full email/password authentication for advanced operations</li> <li>Role-based access control and permissions management</li> </ul>"},{"location":"#data-management","title":"\ud83d\udcca Data Management","text":"<ul> <li>Complete CRUD operations for spaces, bases, tables, and records</li> <li>Efficient batch operations for bulk data handling</li> <li>Advanced querying with filtering, sorting, and pagination</li> <li>Field type validation and configuration</li> </ul>"},{"location":"#key-features","title":"\ud83c\udfaf Key Features","text":"<ul> <li>Hierarchical Structure: Follows Teable's Space \u2192 Base \u2192 Table \u2192 Record hierarchy</li> <li>Type Safety: Comprehensive type hints for better IDE support</li> <li>Error Handling: Detailed error messages and exception handling</li> <li>Resource Management: Efficient handling of API resources and rate limits</li> <li>Batch Operations: Optimized bulk operations for records and tables</li> <li>Query Builder: Intuitive interface for complex data queries</li> <li>Field Types: Support for all Teable field types with validation</li> </ul>"},{"location":"#requirements","title":"Requirements","text":"<ul> <li>Python 3.7+</li> <li>Valid Teable API key</li> <li>For advanced operations: Teable account credentials</li> </ul>"},{"location":"#quick-installation","title":"Quick Installation","text":"<pre><code>pip install teable-client\n</code></pre>"},{"location":"#basic-usage","title":"Basic Usage","text":"<pre><code>from teable import TeableClient, TeableConfig\n\n# Initialize with API key\nclient = TeableClient(TeableConfig(\n    api_key=\"your-api-key\",\n    api_url=\"https://api.teable.io\"\n))\n\n# For operations requiring authentication\nclient.auth.signin(email=\"your-email\", password=\"your-password\")\n\n# Get a table\ntable = client.get_table(\"table_id\")\n\n# Create a record\nrecord = table.create_record({\n    \"Name\": \"John Doe\",\n    \"Email\": \"john@example.com\"\n})\n\n# Query records\nresults = table.get_records(\n    filter={\"fieldName\": \"Email\", \"operator\": \"contains\", \"value\": \"@example.com\"},\n    sort=[{\"field\": \"Name\", \"order\": \"asc\"}],\n    take=10\n)\n</code></pre>"},{"location":"#important-notes","title":"Important Notes","text":"<ol> <li>Authentication Levels:</li> <li>API key alone provides limited access</li> <li>Full access requires both API key and user authentication</li> <li> <p>Some operations (like space management) always require user authentication</p> </li> <li> <p>Resource Hierarchy:</p> </li> <li>Spaces contain bases</li> <li>Bases contain tables</li> <li>Tables contain records</li> <li> <p>Each level has its own permissions and access controls</p> </li> <li> <p>Best Practices:</p> </li> <li>Always handle exceptions appropriately</li> <li>Use batch operations for bulk data management</li> <li>Implement proper rate limiting in your application</li> <li>Close the client when finished to free resources</li> </ol>"},{"location":"#documentation-structure","title":"Documentation Structure","text":"<p>This documentation is organized into several sections:</p> <ul> <li>Getting Started: Basic setup and quick start guide</li> <li>Core Concepts: Understanding the fundamental components</li> <li>Advanced Topics: Detailed guides for specific features</li> <li>API Reference: Complete API documentation</li> <li>Examples: Real-world usage examples</li> </ul> <p>Choose a section from the navigation menu to get started!</p>"},{"location":"advanced/authentication/","title":"Authentication","text":"<p>The Teable Client Library provides comprehensive authentication and user management functionality through the <code>AuthManager</code> class.</p>"},{"location":"advanced/authentication/#authentication-methods","title":"Authentication Methods","text":""},{"location":"advanced/authentication/#1-api-key-authentication","title":"1. API Key Authentication","text":"<p>Required for all API access:</p> <pre><code>from teable import TeableClient, TeableConfig\n\n# Initialize with API key\nclient = TeableClient(TeableConfig(\n    api_key=\"your_api_key_here\",\n    api_url=\"https://api.teable.io\"\n))\n</code></pre>"},{"location":"advanced/authentication/#2-user-authentication","title":"2. User Authentication","text":"<p>Required for advanced operations like space management:</p> <pre><code># Sign in with email/password\nuser = client.auth.signin(\n    email=\"your-email@example.com\",\n    password=\"your-password\"\n)\n\n# Get current user info\ncurrent_user = client.auth.get_user()\nprint(f\"Signed in as: {current_user.email}\")\n\n# Get detailed user info\ndetailed_info = client.auth.get_user_info()\n\n# Sign out when done\nclient.auth.signout()\n</code></pre>"},{"location":"advanced/authentication/#user-management","title":"User Management","text":""},{"location":"advanced/authentication/#profile-management","title":"Profile Management","text":"<pre><code># Update user name\nclient.auth.update_user_name(\"New Name\")\n\n# Update avatar\nwith open(\"avatar.jpg\", \"rb\") as f:\n    avatar_data = f.read()\nclient.auth.update_user_avatar(\n    avatar_data,\n    mime_type=\"image/jpeg\"\n)\n\n# Update notification settings\nclient.auth.update_user_notify_meta(email=True)\n</code></pre>"},{"location":"advanced/authentication/#email-management","title":"Email Management","text":"<pre><code># Send email change verification code\nresult = client.auth.send_change_email_code(\n    email=\"new-email@example.com\",\n    password=\"current-password\"\n)\ntoken = result[\"token\"]\n\n# Change email with verification\nclient.auth.change_email(\n    email=\"new-email@example.com\",\n    token=token,\n    code=\"123456\"  # Code received in email\n)\n</code></pre>"},{"location":"advanced/authentication/#password-management","title":"Password Management","text":"<pre><code># Add password (for users without password)\nclient.auth.add_password(\"NewPassword123\")\n\n# Change password\nclient.auth.change_password(\n    password=\"CurrentPassword123\",\n    new_password=\"NewPassword123\"\n)\n\n# Reset password flow\nclient.auth.send_reset_password_email(\"user@example.com\")\nclient.auth.reset_password(\n    password=\"NewPassword123\",\n    code=\"123456\"  # Code received in email\n)\n</code></pre>"},{"location":"advanced/authentication/#account-creation","title":"Account Creation","text":"<pre><code># Send signup verification code\nresult = client.auth.send_signup_verification_code(\"new-user@example.com\")\nverification = {\n    \"token\": result[\"token\"],\n    \"code\": \"123456\"  # Code received in email\n}\n\n# Sign up new user\nuser = client.auth.signup(\n    email=\"new-user@example.com\",\n    password=\"Password123\",\n    default_space_name=\"My Space\",  # Optional\n    verification=verification,\n    ref_meta={  # Optional\n        \"query\": \"source=website\",\n        \"referer\": \"https://example.com\"\n    }\n)\n</code></pre>"},{"location":"advanced/authentication/#validation-rules","title":"Validation Rules","text":""},{"location":"advanced/authentication/#email-validation","title":"Email Validation","text":"<p>Emails must: - Be a valid string - Match standard email format (user@domain.tld) - Pass server-side validation</p> <pre><code># Example of email validation\ntry:\n    client.auth.signin(\n        email=\"invalid-email\",  # Will raise ValidationError\n        password=\"ValidPass123\"\n    )\nexcept ValidationError as e:\n    print(f\"Invalid email: {str(e)}\")\n</code></pre>"},{"location":"advanced/authentication/#password-validation","title":"Password Validation","text":"<p>Passwords must: - Be a string - Be at least 8 characters long - Contain at least one uppercase letter - Contain at least one number - Not contain invalid characters</p> <pre><code># Example of password validation\ntry:\n    client.auth.signin(\n        email=\"user@example.com\",\n        password=\"short\"  # Will raise ValidationError\n    )\nexcept ValidationError as e:\n    print(f\"Invalid password: {str(e)}\")\n</code></pre>"},{"location":"advanced/authentication/#error-handling","title":"Error Handling","text":"<p>Handle authentication errors appropriately:</p> <pre><code>from teable.exceptions import ValidationError, APIError\n\ntry:\n    client.auth.signin(\n        email=\"user@example.com\",\n        password=\"wrong-password\"\n    )\nexcept ValidationError as e:\n    print(f\"Validation error: {str(e)}\")\nexcept APIError as e:\n    if e.status_code == 401:\n        print(\"Invalid credentials\")\n    elif e.status_code == 403:\n        print(\"Account locked\")\n    else:\n        print(f\"API error: {str(e)}\")\n</code></pre>"},{"location":"advanced/authentication/#best-practices","title":"Best Practices","text":""},{"location":"advanced/authentication/#1-secure-credential-management","title":"1. Secure Credential Management","text":"<pre><code>import os\nfrom dotenv import load_dotenv\n\n# Load credentials from environment\nload_dotenv()\n\nclient = TeableClient(TeableConfig(\n    api_key=os.getenv('TEABLE_API_KEY')\n))\n\nclient.auth.signin(\n    email=os.getenv('TEABLE_EMAIL'),\n    password=os.getenv('TEABLE_PASSWORD')\n)\n</code></pre>"},{"location":"advanced/authentication/#2-session-management","title":"2. Session Management","text":"<pre><code>def get_authenticated_client():\n    client = TeableClient(TeableConfig(\n        api_key=os.getenv('TEABLE_API_KEY')\n    ))\n\n    try:\n        client.auth.signin(\n            email=os.getenv('TEABLE_EMAIL'),\n            password=os.getenv('TEABLE_PASSWORD')\n        )\n        return client\n    except Exception as e:\n        print(f\"Authentication failed: {str(e)}\")\n        raise\n\ndef cleanup_client(client):\n    try:\n        client.auth.signout()\n    except Exception as e:\n        print(f\"Signout failed: {str(e)}\")\n</code></pre>"},{"location":"advanced/authentication/#3-error-recovery","title":"3. Error Recovery","text":"<pre><code>import time\nfrom teable.exceptions import APIError\n\ndef retry_auth(func, max_retries=3):\n    for attempt in range(max_retries):\n        try:\n            return func()\n        except APIError as e:\n            if e.status_code == 429:  # Rate limit\n                if attempt &lt; max_retries - 1:\n                    time.sleep(2 ** attempt)  # Exponential backoff\n                    continue\n            raise\n    raise Exception(\"Max retries exceeded\")\n\n# Usage\nclient = retry_auth(get_authenticated_client)\n</code></pre>"},{"location":"advanced/authentication/#operation-requirements","title":"Operation Requirements","text":"<p>Here's a reference for which operations require which level of authentication:</p>"},{"location":"advanced/authentication/#api-key-only","title":"API Key Only","text":"<ul> <li>Basic table operations</li> <li>Record reading</li> <li>Field validation</li> <li>View access</li> </ul>"},{"location":"advanced/authentication/#user-authentication-required","title":"User Authentication Required","text":"<ul> <li>Space management</li> <li>Base operations</li> <li>User profile updates</li> <li>Permission changes</li> <li>Invitation management</li> <li>Advanced operations</li> </ul>"},{"location":"advanced/authentication/#security-considerations","title":"Security Considerations","text":"<ol> <li>API Key Security:</li> <li>Never commit API keys to version control</li> <li>Use environment variables or secure vaults</li> <li>Rotate keys periodically</li> <li> <p>Use different keys for development/production</p> </li> <li> <p>Password Security:</p> </li> <li>Implement proper password policies</li> <li>Handle password resets securely</li> <li>Use secure password storage</li> <li> <p>Implement rate limiting for auth attempts</p> </li> <li> <p>Session Management:</p> </li> <li>Sign out when done</li> <li>Implement session timeouts</li> <li>Handle token expiration</li> <li> <p>Secure token storage</p> </li> <li> <p>Error Handling:</p> </li> <li>Don't expose sensitive info in errors</li> <li>Log authentication failures</li> <li>Implement proper error recovery</li> <li>Use secure error messages</li> </ol>"},{"location":"advanced/best-practices/","title":"Best Practices","text":"<p>This guide outlines recommended practices for using the Teable Client Library effectively and safely.</p>"},{"location":"advanced/best-practices/#authentication","title":"Authentication","text":""},{"location":"advanced/best-practices/#api-key-management","title":"API Key Management","text":"<pre><code># DON'T: Hardcode API keys\nclient = TeableClient(TeableConfig(\n    api_key=\"1234567890abcdef\"  # Bad practice\n))\n\n# DO: Use environment variables\nfrom dotenv import load_dotenv\nload_dotenv()\n\nclient = TeableClient.from_env()  # Reads from environment variables\n</code></pre>"},{"location":"advanced/best-practices/#authentication-flow","title":"Authentication Flow","text":"<pre><code># DO: Implement proper authentication flow\ntry:\n    # Initialize with API key\n    client = TeableClient(TeableConfig(\n        api_key=os.getenv('TEABLE_API_KEY')\n    ))\n\n    # Sign in for operations requiring full access\n    client.auth.signin(\n        email=os.getenv('TEABLE_EMAIL'),\n        password=os.getenv('TEABLE_PASSWORD')\n    )\n\n    # Perform operations\n\nfinally:\n    # Always sign out when done\n    client.auth.signout()\n</code></pre>"},{"location":"advanced/best-practices/#resource-management","title":"Resource Management","text":""},{"location":"advanced/best-practices/#cleanup","title":"Cleanup","text":"<pre><code># DO: Always clean up resources\ndef manage_temporary_space():\n    space = None\n    try:\n        space = client.spaces.create_space(name=\"Temporary\")\n        # ... perform operations ...\n    finally:\n        if space:\n            client.spaces.permanently_delete_space(space.space_id)\n</code></pre>"},{"location":"advanced/best-practices/#resource-hierarchy","title":"Resource Hierarchy","text":"<pre><code># DO: Follow the resource hierarchy\nspace = client.spaces.create_space(name=\"Project\")\nbase = space.create_base(name=\"Database\")\ntable = client.tables.create_table(\n    base_id=base.base_id,\n    name=\"Employees\"\n)\n</code></pre>"},{"location":"advanced/best-practices/#data-operations","title":"Data Operations","text":""},{"location":"advanced/best-practices/#batch-operations","title":"Batch Operations","text":"<pre><code># DON'T: Create records one by one in a loop\nfor data in records_data:\n    table.create_record(data)  # Inefficient\n\n# DO: Use batch operations\nbatch_result = table.batch_create_records(records_data)\nprint(f\"Created {batch_result.success_count} records\")\n</code></pre>"},{"location":"advanced/best-practices/#query-optimization","title":"Query Optimization","text":"<pre><code># DON'T: Fetch all records and filter in memory\nall_records = table.get_records()\nfiltered = [r for r in all_records if r.fields[\"Age\"] &gt; 30]\n\n# DO: Use API-level filtering\nfilter_data = {\n    \"filterSet\": [\n        {\n            \"fieldId\": \"Age\",\n            \"operator\": \"isGreaterThan\",\n            \"value\": 30\n        }\n    ]\n}\nfiltered_records = table.get_records(filter=filter_data)\n</code></pre>"},{"location":"advanced/best-practices/#pagination","title":"Pagination","text":"<pre><code># DO: Use pagination for large datasets\ndef fetch_all_records(table):\n    records = []\n    skip = 0\n    take = 100\n\n    while True:\n        batch = table.get_records(skip=skip, take=take)\n        if not batch:\n            break\n        records.extend(batch)\n        skip += take\n\n    return records\n</code></pre>"},{"location":"advanced/best-practices/#error-handling","title":"Error Handling","text":""},{"location":"advanced/best-practices/#specific-exceptions","title":"Specific Exceptions","text":"<pre><code># DO: Handle specific exceptions\nfrom teable.exceptions import ValidationError, APIError\n\ntry:\n    record = table.create_record(data)\nexcept ValidationError as e:\n    # Handle validation errors\n    logger.error(f\"Validation error: {str(e)}\")\nexcept APIError as e:\n    # Handle API errors\n    logger.error(f\"API error: {str(e)}\")\nexcept Exception as e:\n    # Handle unexpected errors\n    logger.error(f\"Unexpected error: {str(e)}\")\n</code></pre>"},{"location":"advanced/best-practices/#retry-logic","title":"Retry Logic","text":"<pre><code># DO: Implement retry logic for transient failures\ndef retry_operation(operation, max_retries=3):\n    for attempt in range(max_retries):\n        try:\n            return operation()\n        except APIError as e:\n            if e.status_code == 429:  # Rate limit\n                time.sleep(2 ** attempt)  # Exponential backoff\n                continue\n            raise\n    raise Exception(\"Max retries exceeded\")\n</code></pre>"},{"location":"advanced/best-practices/#performance","title":"Performance","text":""},{"location":"advanced/best-practices/#connection-management","title":"Connection Management","text":"<pre><code># DON'T: Create multiple clients\nclient1 = TeableClient(config)\nclient2 = TeableClient(config)  # Unnecessary\n\n# DO: Reuse client instance\nclient = TeableClient(config)\n# Use the same client throughout your application\n</code></pre>"},{"location":"advanced/best-practices/#caching","title":"Caching","text":"<pre><code># DO: Cache frequently accessed data\nfrom functools import lru_cache\n\n@lru_cache(maxsize=100)\ndef get_table_schema(table_id):\n    return client.tables.get_table(table_id)\n</code></pre>"},{"location":"advanced/best-practices/#testing","title":"Testing","text":""},{"location":"advanced/best-practices/#test-environment","title":"Test Environment","text":"<pre><code># DO: Use a separate test environment\ndef setup_test_client():\n    return TeableClient(TeableConfig(\n        api_key=os.getenv('TEABLE_TEST_API_KEY'),\n        api_url=os.getenv('TEABLE_TEST_API_URL')\n    ))\n</code></pre>"},{"location":"advanced/best-practices/#test-data-management","title":"Test Data Management","text":"<pre><code># DO: Clean up test data\n@pytest.fixture\ndef test_space(client):\n    space = client.spaces.create_space(name=\"Test Space\")\n    yield space\n    client.spaces.permanently_delete_space(space.space_id)\n</code></pre>"},{"location":"advanced/best-practices/#security","title":"Security","text":""},{"location":"advanced/best-practices/#credential-management","title":"Credential Management","text":"<pre><code># DON'T: Store credentials in code\ncredentials = {\n    \"api_key\": \"secret_key\",\n    \"password\": \"secret_pass\"\n}\n\n# DO: Use secure credential management\nfrom keyring import get_password\n\napi_key = get_password(\"teable\", \"api_key\")\nclient = TeableClient(TeableConfig(api_key=api_key))\n</code></pre>"},{"location":"advanced/best-practices/#permission-checks","title":"Permission Checks","text":"<pre><code># DO: Check permissions before operations\ndef create_record_if_allowed(table, data):\n    permissions = client.tables.get_table_permission(\n        table.base_id,\n        table.table_id\n    )\n\n    if permissions[\"record\"][\"create\"]:\n        return table.create_record(data)\n    else:\n        raise PermissionError(\"No create permission\")\n</code></pre>"},{"location":"advanced/best-practices/#code-organization","title":"Code Organization","text":""},{"location":"advanced/best-practices/#module-structure","title":"Module Structure","text":"<pre><code># DO: Organize code logically\nfrom teable import TeableClient\nfrom teable.exceptions import APIError\nfrom teable.models import Table, Record\n\nclass TeableManager:\n    def __init__(self):\n        self.client = TeableClient.from_env()\n\n    def setup_workspace(self):\n        \"\"\"Create and configure workspace\"\"\"\n        pass\n\n    def manage_records(self):\n        \"\"\"Handle record operations\"\"\"\n        pass\n</code></pre>"},{"location":"advanced/best-practices/#configuration-management","title":"Configuration Management","text":"<pre><code># DO: Centralize configuration\nclass TeableConfig:\n    def __init__(self):\n        load_dotenv()\n\n        self.api_key = os.getenv('TEABLE_API_KEY')\n        self.api_url = os.getenv('TEABLE_API_URL')\n        self.email = os.getenv('TEABLE_EMAIL')\n        self.password = os.getenv('TEABLE_PASSWORD')\n\nconfig = TeableConfig()\nclient = TeableClient(TeableConfig(\n    api_key=config.api_key,\n    api_url=config.api_url\n))\n</code></pre>"},{"location":"advanced/best-practices/#logging","title":"Logging","text":""},{"location":"advanced/best-practices/#structured-logging","title":"Structured Logging","text":"<pre><code># DO: Implement proper logging\nimport logging\n\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(__name__)\n\ndef perform_operation():\n    try:\n        result = client.spaces.create_space(name=\"New Space\")\n        logger.info(\"Space created\", extra={\n            \"space_id\": result.space_id,\n            \"name\": result.name\n        })\n        return result\n    except Exception as e:\n        logger.error(\"Failed to create space\", exc_info=True)\n        raise\n</code></pre>"},{"location":"advanced/best-practices/#documentation","title":"Documentation","text":""},{"location":"advanced/best-practices/#code-comments","title":"Code Comments","text":"<pre><code># DO: Document code properly\ndef process_records(table, filter_criteria=None):\n    \"\"\"\n    Process records from a table with optional filtering.\n\n    Args:\n        table: Table instance to process\n        filter_criteria: Optional dict of filter parameters\n\n    Returns:\n        List of processed records\n\n    Raises:\n        APIError: If API request fails\n        ValidationError: If filter criteria is invalid\n    \"\"\"\n    pass\n</code></pre>"},{"location":"advanced/best-practices/#version-control","title":"Version Control","text":""},{"location":"advanced/best-practices/#dependencies","title":"Dependencies","text":"<pre><code># DO: Specify version requirements\n# requirements.txt\nteable-client&gt;=1.0.0,&lt;2.0.0\npython-dotenv&gt;=0.19.0\n</code></pre>"},{"location":"advanced/best-practices/#git-integration","title":"Git Integration","text":"<p>```python</p>"},{"location":"advanced/best-practices/#do-add-proper-gitignore","title":"DO: Add proper .gitignore","text":""},{"location":"advanced/best-practices/#gitignore","title":".gitignore","text":"<p>.env pycache/ *.pyc .pytest_cache/</p>"},{"location":"advanced/error-handling/","title":"Error Handling","text":"<p>The Teable Client Library provides comprehensive error handling through specific exception types and validation mechanisms. This guide covers how to handle errors effectively in your applications.</p>"},{"location":"advanced/error-handling/#exception-types","title":"Exception Types","text":""},{"location":"advanced/error-handling/#validationerror","title":"ValidationError","text":"<p>Raised when input data fails validation:</p> <pre><code>from teable.exceptions import ValidationError\n\ntry:\n    # Invalid email format\n    client.auth.signin(\n        email=\"invalid-email\",\n        password=\"ValidPass123\"\n    )\nexcept ValidationError as e:\n    print(f\"Validation error: {str(e)}\")\n</code></pre> <p>Common validation errors: - Invalid email format - Password requirements not met - Required fields missing - Invalid field types - Value range violations</p>"},{"location":"advanced/error-handling/#apierror","title":"APIError","text":"<p>Raised when the API returns an error response:</p> <pre><code>from teable.exceptions import APIError\n\ntry:\n    # Attempt to access non-existent resource\n    client.spaces.get_space(\"invalid_space_id\")\nexcept APIError as e:\n    print(f\"API error: {str(e)}\")\n    print(f\"Status code: {e.status_code}\")\n    print(f\"Error details: {e.details}\")\n</code></pre> <p>Common API errors: - Resource not found - Permission denied - Rate limit exceeded - Invalid API key - Server errors</p>"},{"location":"advanced/error-handling/#error-handling-patterns","title":"Error Handling Patterns","text":""},{"location":"advanced/error-handling/#basic-error-handling","title":"Basic Error Handling","text":"<pre><code>from teable.exceptions import ValidationError, APIError\n\ntry:\n    # Attempt operation\n    record = table.create_record({\n        \"Name\": \"\",  # Required field is empty\n        \"Email\": \"invalid-email\"\n    })\nexcept ValidationError as e:\n    print(f\"Validation error: {str(e)}\")\nexcept APIError as e:\n    print(f\"API error: {str(e)}\")\nexcept Exception as e:\n    print(f\"Unexpected error: {str(e)}\")\n</code></pre>"},{"location":"advanced/error-handling/#batch-operation-error-handling","title":"Batch Operation Error Handling","text":"<pre><code># Batch create records with error handling\nrecords_data = [\n    {\"Name\": \"Valid Name\", \"Email\": \"valid@example.com\"},\n    {\"Name\": \"\", \"Email\": \"invalid-email\"}  # Invalid record\n]\n\ntry:\n    batch_result = table.batch_create_records(records_data)\n\n    # Check for partial success\n    if batch_result.failure_count &gt; 0:\n        print(f\"Failed to create {batch_result.failure_count} records\")\n        for error in batch_result.errors:\n            print(f\"Error in record {error.index}: {error.message}\")\n\n    print(f\"Successfully created {batch_result.success_count} records\")\n\nexcept ValidationError as e:\n    print(f\"Batch validation error: {str(e)}\")\nexcept APIError as e:\n    print(f\"API error during batch operation: {str(e)}\")\n</code></pre>"},{"location":"advanced/error-handling/#resource-management-errors","title":"Resource Management Errors","text":"<pre><code>try:\n    # Create a space\n    space = client.spaces.create_space(name=\"Test Space\")\n\n    try:\n        # Perform operations\n        base = space.create_base(name=\"Test Base\")\n        # ... more operations ...\n\n    finally:\n        # Clean up resources even if operations fail\n        client.spaces.permanently_delete_space(space.space_id)\n\nexcept APIError as e:\n    if e.status_code == 404:\n        print(\"Resource not found\")\n    elif e.status_code == 403:\n        print(\"Permission denied\")\n    else:\n        print(f\"API error: {str(e)}\")\n</code></pre>"},{"location":"advanced/error-handling/#validation-rules","title":"Validation Rules","text":""},{"location":"advanced/error-handling/#field-validation","title":"Field Validation","text":"<pre><code># Create a table with validation rules\ntry:\n    table = client.tables.create_table(\n        base_id=base.base_id,\n        name=\"Employees\",\n        db_table_name=\"employees\",\n        fields=[\n            {\n                \"name\": \"Name\",\n                \"type\": \"singleLineText\",\n                \"required\": True\n            },\n            {\n                \"name\": \"Age\",\n                \"type\": \"number\",\n                \"precision\": 0,\n                \"min\": 18,\n                \"max\": 100\n            }\n        ]\n    )\nexcept ValidationError as e:\n    print(f\"Field validation error: {str(e)}\")\n</code></pre>"},{"location":"advanced/error-handling/#record-validation","title":"Record Validation","text":"<pre><code>try:\n    # Create record with validation\n    record = table.create_record({\n        \"Name\": \"John Doe\",\n        \"Age\": 150  # Exceeds maximum value\n    })\nexcept ValidationError as e:\n    print(f\"Record validation error: {str(e)}\")\n</code></pre>"},{"location":"advanced/error-handling/#best-practices","title":"Best Practices","text":""},{"location":"advanced/error-handling/#1-use-specific-exception-types","title":"1. Use Specific Exception Types","text":"<pre><code>from teable.exceptions import ValidationError, APIError\n\ntry:\n    # Operation\n    pass\nexcept ValidationError:\n    # Handle validation errors\n    pass\nexcept APIError:\n    # Handle API errors\n    pass\nexcept Exception:\n    # Handle unexpected errors\n    pass\n</code></pre>"},{"location":"advanced/error-handling/#2-implement-retry-logic","title":"2. Implement Retry Logic","text":"<pre><code>import time\nfrom teable.exceptions import APIError\n\ndef retry_operation(operation, max_retries=3, delay=1):\n    for attempt in range(max_retries):\n        try:\n            return operation()\n        except APIError as e:\n            if e.status_code == 429:  # Rate limit\n                if attempt &lt; max_retries - 1:\n                    time.sleep(delay * (attempt + 1))\n                    continue\n            raise\n    return None\n\n# Usage\nresult = retry_operation(\n    lambda: client.spaces.get_spaces()\n)\n</code></pre>"},{"location":"advanced/error-handling/#3-resource-cleanup","title":"3. Resource Cleanup","text":"<pre><code>def safe_resource_operation():\n    space = None\n    try:\n        # Create resources\n        space = client.spaces.create_space(name=\"Temporary Space\")\n        # Perform operations\n        return True\n    except Exception as e:\n        print(f\"Operation failed: {str(e)}\")\n        return False\n    finally:\n        # Clean up resources\n        if space:\n            try:\n                client.spaces.permanently_delete_space(space.space_id)\n            except Exception as e:\n                print(f\"Cleanup failed: {str(e)}\")\n</code></pre>"},{"location":"advanced/error-handling/#4-logging-errors","title":"4. Logging Errors","text":"<pre><code>import logging\n\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(__name__)\n\ntry:\n    # Operation\n    pass\nexcept ValidationError as e:\n    logger.error(f\"Validation error: {str(e)}\")\n    # Handle error\nexcept APIError as e:\n    logger.error(f\"API error: {str(e)}\", extra={\n        \"status_code\": e.status_code,\n        \"details\": e.details\n    })\n    # Handle error\n</code></pre>"},{"location":"advanced/error-handling/#common-error-scenarios","title":"Common Error Scenarios","text":""},{"location":"advanced/error-handling/#1-authentication-errors","title":"1. Authentication Errors","text":"<pre><code>try:\n    client.auth.signin(email=\"user@example.com\", password=\"wrong\")\nexcept APIError as e:\n    if e.status_code == 401:\n        print(\"Invalid credentials\")\n    elif e.status_code == 403:\n        print(\"Account locked\")\n</code></pre>"},{"location":"advanced/error-handling/#2-resource-not-found","title":"2. Resource Not Found","text":"<pre><code>try:\n    table = client.get_table(\"non_existent_id\")\nexcept APIError as e:\n    if e.status_code == 404:\n        print(\"Table not found\")\n</code></pre>"},{"location":"advanced/error-handling/#3-rate-limiting","title":"3. Rate Limiting","text":"<pre><code>try:\n    # Batch operation\n    pass\nexcept APIError as e:\n    if e.status_code == 429:\n        print(\"Rate limit exceeded\")\n        print(f\"Retry after: {e.headers.get('Retry-After')} seconds\")\n</code></pre>"},{"location":"advanced/error-handling/#error-prevention","title":"Error Prevention","text":"<ol> <li>Validate Input Data:</li> <li>Check data types before API calls</li> <li>Validate required fields</li> <li> <p>Verify value ranges</p> </li> <li> <p>Handle Rate Limits:</p> </li> <li>Implement backoff strategies</li> <li>Monitor API usage</li> <li> <p>Cache responses when possible</p> </li> <li> <p>Resource Management:</p> </li> <li>Always clean up temporary resources</li> <li>Use context managers when appropriate</li> <li> <p>Implement proper error recovery</p> </li> <li> <p>Authentication:</p> </li> <li>Verify credentials before operations</li> <li>Handle token expiration</li> <li>Implement proper security practices</li> </ol>"},{"location":"api/client/","title":"API Reference: TeableClient","text":"<p>This document provides detailed API reference for the TeableClient class, which is the main entry point for interacting with the Teable API.</p>"},{"location":"api/client/#teableclient","title":"TeableClient","text":"<p>The TeableClient class provides the primary interface for interacting with Teable services through various specialized managers.</p>"},{"location":"api/client/#constructor","title":"Constructor","text":"<p>The TeableClient can be initialized in two ways:</p>"},{"location":"api/client/#using-teableconfig-object","title":"Using TeableConfig Object","text":"<pre><code>from teable import TeableClient, TeableConfig\n\nclient = TeableClient(\n    config=TeableConfig(\n        api_url=\"https://your-teable-instance.com/api\",\n        api_key=\"your-api-key\",\n        timeout=45.0,\n        max_retries=5\n    )\n)\n</code></pre>"},{"location":"api/client/#using-dictionary-configuration","title":"Using Dictionary Configuration","text":"<pre><code>from teable import TeableClient\n\nclient = TeableClient({\n    'api_url': \"https://your-teable-instance.com/api\",\n    'api_key': \"your-api-key\",\n    'timeout': 60.0,\n    'max_retries': 5\n})\n</code></pre>"},{"location":"api/client/#configuration-options","title":"Configuration Options","text":"<p>The configuration accepts the following parameters:</p> Parameter Type Required Description Validation Rules api_url str Yes The base URL of your Teable instance API Must be a valid URL api_key str Yes Your API key for authentication Must start with 'teable_' timeout float No Request timeout in seconds (default: 30) Must be positive max_retries int No Maximum number of retry attempts (default: 3) Must be non-negative"},{"location":"api/client/#configuration-validation","title":"Configuration Validation","text":"<p>The client performs validation on the configuration parameters:</p> <pre><code># Invalid API key format\nclient = TeableClient({\n    'api_key': 'invalid_key',  # Will raise ConfigurationError\n    'api_url': 'https://api.teable.io'\n})\n\n# Invalid API URL\nclient = TeableClient({\n    'api_key': 'teable_test_key',\n    'api_url': 'not_a_url'  # Will raise ConfigurationError\n})\n\n# Invalid timeout\nclient = TeableClient({\n    'api_key': 'teable_test_key',\n    'api_url': 'https://api.teable.io',\n    'timeout': -1  # Will raise ConfigurationError\n})\n</code></pre>"},{"location":"api/client/#available-managers","title":"Available Managers","text":"<p>The TeableClient provides access to various specialized managers for different aspects of the API. Here's a complete list of available managers:</p> Manager Description spaces Space management operations tables Table and base operations records Record CRUD operations fields Field configuration and management views View creation and management attachments File attachment operations selection Record selection operations notifications Notification management access_tokens Access token management imports Data import operations exports Data export operations pins Pin management billing Billing and subscription operations admin Administrative operations usage Usage statistics and monitoring oauth OAuth integration management undo_redo Operation history management plugins Plugin management comments Comment operations organizations Organization management ai AI-powered operations integrity Data integrity checks aggregation Data aggregation operations <p>Example usage of these managers:</p>"},{"location":"api/client/#space-operations-clientspaces","title":"Space Operations (client.spaces)","text":"<pre><code># Get all spaces\nspaces = client.spaces.get_all()\n\n# Get a specific space\nspace = client.spaces.get(\"space_id\")\n\n# Create a new space\nspace = client.spaces.create(name=\"My New Space\")\n</code></pre>"},{"location":"api/client/#base-operations-clienttables","title":"Base Operations (client.tables)","text":"<pre><code># Get all bases\nbases = client.tables.get_all()\n\n# Get a specific base\nbase = client.tables.get(\"base_id\")\n\n# Create a new base\nbase = client.tables.create(\n    space_id=\"space_id\",\n    name=\"My New Base\",\n    icon=\"\ud83d\udcca\"  # Optional\n)\n</code></pre>"},{"location":"api/client/#table-operations-clienttables","title":"Table Operations (client.tables)","text":"<pre><code># Get a specific table\ntable = client.tables.get(\"table_id\")\n\n# Create a new table\ntable = client.tables.create(\n    base_id=\"base_id\",\n    name=\"My New Table\",\n    description=\"Table description\",\n    fields=[\n        {\n            \"name\": \"Name\",\n            \"type\": \"text\",\n            \"required\": True\n        },\n        {\n            \"name\": \"Age\",\n            \"type\": \"number\"\n        }\n    ]\n)\n</code></pre>"},{"location":"api/client/#record-operations-clientrecords","title":"Record Operations (client.records)","text":"<pre><code># Get a specific record\nrecord = client.records.get(\n    table_id=\"table_id\",\n    record_id=\"record_id\"\n)\n\n# Create a new record\nrecord = client.records.create(\n    table_id=\"table_id\",\n    fields={\n        \"Name\": \"John Doe\",\n        \"Age\": 30\n    }\n)\n</code></pre>"},{"location":"api/client/#field-operations-clientfields","title":"Field Operations (client.fields)","text":"<pre><code># Get field information\nfield = client.fields.get(\"field_id\")\n\n# Create a new field\nfield = client.fields.create(\n    table_id=\"table_id\",\n    name=\"New Field\",\n    type=\"text\"\n)\n</code></pre>"},{"location":"api/client/#view-operations-clientviews","title":"View Operations (client.views)","text":"<pre><code># Get view information\nview = client.views.get(\"view_id\")\n\n# Create a new view\nview = client.views.create(\n    table_id=\"table_id\",\n    name=\"New View\",\n    type=\"grid\"\n)\n</code></pre>"},{"location":"api/client/#attachment-operations-clientattachments","title":"Attachment Operations (client.attachments)","text":"<pre><code># Upload an attachment\nattachment = client.attachments.upload(file_path=\"path/to/file\")\n\n# Get attachment information\nattachment = client.attachments.get(\"attachment_id\")\n</code></pre>"},{"location":"api/client/#selection-operations-clientselection","title":"Selection Operations (client.selection)","text":"<pre><code># Create a selection\nselection = client.selection.create(\n    table_id=\"table_id\",\n    record_ids=[\"record1\", \"record2\"]\n)\n</code></pre>"},{"location":"api/client/#notification-operations-clientnotifications","title":"Notification Operations (client.notifications)","text":"<pre><code># Get notifications\nnotifications = client.notifications.get_all()\n\n# Mark notification as read\nclient.notifications.mark_read(\"notification_id\")\n</code></pre>"},{"location":"api/client/#organization-operations-clientorganizations","title":"Organization Operations (client.organizations)","text":"<pre><code># Get organization information\norg = client.organizations.get(\"org_id\")\n\n# Update organization settings\nclient.organizations.update(\"org_id\", settings={})\n</code></pre>"},{"location":"api/client/#ai-operations-clientai","title":"AI Operations (client.ai)","text":"<pre><code># Generate content using AI\nresult = client.ai.generate(prompt=\"Your prompt here\")\n</code></pre>"},{"location":"api/client/#plugin-operations-clientplugins","title":"Plugin Operations (client.plugins)","text":"<pre><code># Get installed plugins\nplugins = client.plugins.get_all()\n\n# Install a plugin\nclient.plugins.install(\"plugin_id\")\n</code></pre>"},{"location":"api/client/#comment-operations-clientcomments","title":"Comment Operations (client.comments)","text":"<pre><code># Add a comment\ncomment = client.comments.create(\n    record_id=\"record_id\",\n    content=\"Comment text\"\n)\n\n# Get comments\ncomments = client.comments.get_all(record_id=\"record_id\")\n</code></pre>"},{"location":"api/client/#cache-management","title":"Cache Management","text":"<p>The client maintains caches for various resources to improve performance. You can clear these caches when needed:</p> <pre><code># Clear all caches\nclient.clear_cache()\n</code></pre>"},{"location":"api/client/#error-handling","title":"Error Handling","text":"<p>The client may raise the following exceptions:</p> <ul> <li><code>TeableError</code>: Base exception for all Teable errors</li> <li><code>ValidationError</code>: Data validation errors</li> <li><code>AuthenticationError</code>: Authentication failures</li> <li><code>ResourceNotFoundError</code>: Resource not found errors</li> <li><code>RateLimitError</code>: API rate limit exceeded</li> <li><code>NetworkError</code>: Network-related errors</li> </ul> <p>Example error handling:</p> <pre><code>from teable.exceptions import TeableError, ValidationError\n\ntry:\n    record = client.records.create(table_id, fields)\nexcept ValidationError as e:\n    print(f\"Invalid data: {e}\")\nexcept TeableError as e:\n    print(f\"Operation failed: {e}\")\n</code></pre>"},{"location":"api/client/#next-steps","title":"Next Steps","text":"<ul> <li>Models Reference</li> <li>Exceptions Reference</li> <li>Best Practices</li> </ul>"},{"location":"api/exceptions/","title":"API Reference: Exceptions","text":"<p>This document provides detailed API reference for all exception classes in the Teable-Client library.</p>"},{"location":"api/exceptions/#exception-hierarchy","title":"Exception Hierarchy","text":"<pre><code>TeableError\n\u251c\u2500\u2500 APIError\n\u2502   \u251c\u2500\u2500 RateLimitError\n\u2502   \u251c\u2500\u2500 ResourceNotFoundError\n\u2502   \u2514\u2500\u2500 AuthenticationError\n\u251c\u2500\u2500 ValidationError\n\u251c\u2500\u2500 ConfigurationError\n\u251c\u2500\u2500 NetworkError\n\u2514\u2500\u2500 BatchOperationError\n</code></pre>"},{"location":"api/exceptions/#base-exception","title":"Base Exception","text":""},{"location":"api/exceptions/#teableerror","title":"TeableError","text":"<p>Base exception class for all Teable-specific errors.</p> <pre><code>from teable.exceptions import TeableError\n\ntry:\n    # Perform operation\n    pass\nexcept TeableError as e:\n    print(f\"Operation failed: {e}\")\n</code></pre>"},{"location":"api/exceptions/#apierror","title":"APIError","text":"<p>Base exception for all API-related errors. Provides additional context about the API response.</p> <pre><code>from teable.exceptions import APIError\n\ntry:\n    # Perform API operation\n    pass\nexcept APIError as e:\n    print(f\"API error: {e}\")\n    print(f\"Status code: {e.status_code}\")\n    print(f\"Response body: {e.response_body}\")\n</code></pre> <p>Properties: - message (str): Human-readable error description - status_code (Optional[int]): HTTP status code if available - response_body (Optional[str]): Raw response body if available</p>"},{"location":"api/exceptions/#validation-errors","title":"Validation Errors","text":""},{"location":"api/exceptions/#validationerror","title":"ValidationError","text":"<p>Raised when data validation fails. This could be due to: - Invalid field types - Missing required fields - Value constraints violations</p> <pre><code>from teable.exceptions import ValidationError\n\ntry:\n    table.create_record({\n        \"Name\": \"John Doe\",\n        \"Age\": \"invalid\"  # Should be a number\n    })\nexcept ValidationError as e:\n    print(f\"Validation failed: {e}\")\n</code></pre>"},{"location":"api/exceptions/#authentication-errors","title":"Authentication Errors","text":""},{"location":"api/exceptions/#authenticationerror","title":"AuthenticationError","text":"<p>Raised when authentication fails. This could be due to: - Invalid API key - Expired credentials - Insufficient permissions</p> <pre><code>from teable.exceptions import AuthenticationError\n\ntry:\n    client = TeableClient(TeableConfig(\n        api_url=\"https://example.com\",\n        api_key=\"invalid-key\"\n    ))\nexcept AuthenticationError as e:\n    print(f\"Authentication failed: {e}\")\n    print(f\"Status code: {e.status_code}\")\n</code></pre>"},{"location":"api/exceptions/#resource-errors","title":"Resource Errors","text":""},{"location":"api/exceptions/#resourcenotfounderror","title":"ResourceNotFoundError","text":"<p>Raised when a requested resource is not found. This could be due to: - Invalid record ID - Invalid table ID - Invalid view ID - Invalid field ID</p> <pre><code>from teable.exceptions import ResourceNotFoundError\n\ntry:\n    table = client.tables.get(\"non-existent-id\")\nexcept ResourceNotFoundError as e:\n    print(f\"Resource not found: {e}\")\n    print(f\"Resource type: {e.resource_type}\")\n    print(f\"Resource ID: {e.resource_id}\")\n</code></pre> <p>Properties: - resource_type (str): Type of resource that wasn't found - resource_id (str): ID of the resource that wasn't found - status_code (Optional[int]): HTTP status code (typically 404)</p>"},{"location":"api/exceptions/#rate-limiting","title":"Rate Limiting","text":""},{"location":"api/exceptions/#ratelimiterror","title":"RateLimitError","text":"<p>Raised when API rate limits are exceeded.</p> <pre><code>from teable.exceptions import RateLimitError\n\ntry:\n    # Perform many operations\n    pass\nexcept RateLimitError as e:\n    print(f\"Rate limit exceeded: {e}\")\n    print(f\"Reset time: {e.reset_time}\")\n    print(f\"Rate limit: {e.limit}\")\n</code></pre> <p>Properties: - reset_time (Optional[float]): Unix timestamp when the rate limit resets - limit (Optional[int]): The rate limit ceiling for the given endpoint - status_code (Optional[int]): HTTP status code (typically 429)</p>"},{"location":"api/exceptions/#network-errors","title":"Network Errors","text":""},{"location":"api/exceptions/#networkerror","title":"NetworkError","text":"<p>Raised when network-related issues occur. This could be due to: - Connection timeouts - DNS resolution failures - SSL/TLS errors</p> <pre><code>from teable.exceptions import NetworkError\n\ntry:\n    # Perform network operation\n    pass\nexcept NetworkError as e:\n    print(f\"Network error: {e}\")\n</code></pre>"},{"location":"api/exceptions/#configuration-errors","title":"Configuration Errors","text":""},{"location":"api/exceptions/#configurationerror","title":"ConfigurationError","text":"<p>Raised when there are issues with client configuration. This could be due to: - Missing API credentials - Invalid API URL - Missing required configuration parameters</p> <pre><code>from teable.exceptions import ConfigurationError\n\ntry:\n    client = TeableClient(TeableConfig(\n        api_url=\"invalid-url\"\n    ))\nexcept ConfigurationError as e:\n    print(f\"Configuration error: {e}\")\n</code></pre>"},{"location":"api/exceptions/#batch-operation-errors","title":"Batch Operation Errors","text":""},{"location":"api/exceptions/#batchoperationerror","title":"BatchOperationError","text":"<p>Raised when a batch operation partially fails.</p> <pre><code>from teable.exceptions import BatchOperationError\n\ntry:\n    # Perform batch operation\n    pass\nexcept BatchOperationError as e:\n    print(f\"Batch operation error: {e}\")\n    print(f\"Successful operations: {e.successful_operations}\")\n    print(f\"Failed operations: {e.failed_operations}\")\n</code></pre> <p>Properties: - successful_operations (list): List of successfully processed items - failed_operations (list): List of failed operations with their errors</p>"},{"location":"api/exceptions/#error-handling-best-practices","title":"Error Handling Best Practices","text":""},{"location":"api/exceptions/#comprehensive-error-handling","title":"Comprehensive Error Handling","text":"<pre><code>from teable.exceptions import (\n    TeableError,\n    APIError,\n    ValidationError,\n    AuthenticationError,\n    ResourceNotFoundError,\n    RateLimitError,\n    NetworkError,\n    ConfigurationError,\n    BatchOperationError\n)\n\ntry:\n    # Perform operations\n    client = TeableClient(config)\n    table = client.tables.get(\"table_id\")\n    record = table.create_record(data)\n\nexcept ValidationError as e:\n    # Handle data validation errors\n    print(f\"Invalid data: {e}\")\n\nexcept AuthenticationError as e:\n    # Handle authentication issues\n    print(f\"Authentication failed: {e}\")\n\nexcept ResourceNotFoundError as e:\n    # Handle missing resources\n    print(f\"Resource not found: {e}\")\n\nexcept RateLimitError as e:\n    # Handle rate limiting\n    print(f\"Rate limit exceeded. Reset at {e.reset_time}\")\n\nexcept NetworkError as e:\n    # Handle network issues\n    print(f\"Network error: {e}\")\n\nexcept ConfigurationError as e:\n    # Handle configuration issues\n    print(f\"Configuration error: {e}\")\n\nexcept BatchOperationError as e:\n    # Handle batch operation failures\n    print(f\"Batch operation partially failed: {e}\")\n\nexcept APIError as e:\n    # Handle any other API-related errors\n    print(f\"API error: {e}\")\n\nexcept TeableError as e:\n    # Handle any other Teable-specific errors\n    print(f\"Operation failed: {e}\")\n\nexcept Exception as e:\n    # Handle unexpected errors\n    print(f\"Unexpected error: {e}\")\n</code></pre>"},{"location":"api/exceptions/#next-steps","title":"Next Steps","text":"<ul> <li>Client Reference</li> <li>Models Reference</li> <li>Error Handling Guide</li> </ul>"},{"location":"api/models/","title":"API Reference: Models","text":"<p>This document provides detailed API reference for all model classes in the Teable-Client library.</p>"},{"location":"api/models/#space-models","title":"Space Models","text":""},{"location":"api/models/#space","title":"Space","text":"<p>Represents a space in Teable, which is a container for bases and other resources.</p> <pre><code>from teable import Space, SpaceRole\n\n# Space properties\nspace.space_id: str          # Unique identifier\nspace.name: str              # Display name\nspace.role: SpaceRole        # User's role in the space\nspace.organization: Optional[Organization]  # Associated organization\n</code></pre>"},{"location":"api/models/#methods","title":"Methods","text":"<pre><code># Update space information\nspace.update(name: str) -&gt; Space\n\n# Delete space\nspace.delete() -&gt; bool\n\n# Delete permanently\nspace.delete_permanent() -&gt; bool\n\n# Get invitation links\nspace.get_invitation_links() -&gt; List[Invitation]\n\n# Create invitation link\nspace.create_invitation_link(role: SpaceRole) -&gt; Invitation\n\n# Send email invitations\nspace.invite_by_email(\n    emails: List[str],\n    role: SpaceRole\n) -&gt; Dict[str, Dict[str, str]]  # Map of email to invitation info\n\n# Get collaborators\nspace.get_collaborators(\n    include_system: Optional[bool] = None,\n    include_base: Optional[bool] = None,\n    skip: Optional[int] = None,\n    take: Optional[int] = None,\n    search: Optional[str] = None,\n    collaborator_type: Optional[PrincipalType] = None\n) -&gt; Tuple[List[Collaborator], int]  # Returns collaborators and total count\n\n# Update collaborator role\nspace.update_collaborator(\n    principal_id: str,\n    principal_type: PrincipalType,\n    role: SpaceRole\n) -&gt; None\n\n# Delete collaborator\nspace.delete_collaborator(\n    principal_id: str,\n    principal_type: PrincipalType\n) -&gt; None\n\n# Add collaborators\nspace.add_collaborators(\n    collaborators: List[Dict[str, str]],  # List of collaborator info dicts\n    role: SpaceRole\n) -&gt; None\n\n# Create base\nspace.create_base(\n    name: Optional[str] = None,\n    icon: Optional[str] = None\n) -&gt; Base\n\n# Get bases\nspace.get_bases() -&gt; List[Base]\n</code></pre>"},{"location":"api/models/#spacerole","title":"SpaceRole","text":"<p>Enumeration of possible roles in a space.</p> <pre><code>from teable import SpaceRole\n\nSpaceRole.OWNER      # Full control\nSpaceRole.CREATOR    # Can create and manage content\nSpaceRole.EDITOR     # Can edit content\nSpaceRole.COMMENTER  # Can comment on content\nSpaceRole.VIEWER     # Can only view content\n</code></pre>"},{"location":"api/models/#organization","title":"Organization","text":"<p>Represents an organization in Teable.</p> <pre><code>from teable import Organization\n\n# Organization properties\norganization.org_id: str  # Unique identifier\norganization.name: str    # Display name\n</code></pre>"},{"location":"api/models/#base-models","title":"Base Models","text":""},{"location":"api/models/#base","title":"Base","text":"<p>Represents a base in Teable, which is a container for tables.</p> <pre><code>from teable import Base, CollaboratorType, Position\n\n# Base properties\nbase.base_id: str           # Unique identifier\nbase.name: str              # Display name\nbase.space_id: str          # ID of containing space\nbase.icon: Optional[str]    # Base icon\nbase.collaborator_type: Optional[CollaboratorType]  # Type of collaborator\nbase.is_unrestricted: bool  # Access restriction flag\n</code></pre>"},{"location":"api/models/#methods_1","title":"Methods","text":"<pre><code># Update base information\nbase.update(\n    name: Optional[str] = None,\n    icon: Optional[str] = None\n) -&gt; Base\n\n# Delete base\nbase.delete() -&gt; bool\n\n# Delete permanently\nbase.delete_permanent() -&gt; bool\n\n# Update order\nbase.update_order(\n    anchor_id: str,\n    position: Position\n) -&gt; None\n\n# Duplicate base\nbase.duplicate(\n    space_id: str,\n    name: Optional[str] = None,\n    with_records: bool = False\n) -&gt; Base\n\n# Get collaborators\nbase.get_collaborators(\n    include_system: Optional[bool] = None,\n    skip: Optional[int] = None,\n    take: Optional[int] = None,\n    search: Optional[str] = None,\n    collaborator_type: Optional[PrincipalType] = None\n) -&gt; Tuple[List[Collaborator], int]  # Returns collaborators and total count\n\n# Update collaborator role\nbase.update_collaborator(\n    principal_id: str,\n    principal_type: PrincipalType,\n    role: str\n) -&gt; None\n\n# Delete collaborator\nbase.delete_collaborator(\n    principal_id: str,\n    principal_type: PrincipalType\n) -&gt; None\n\n# Get permissions\nbase.get_permissions() -&gt; Dict[str, bool]\n\n# Execute SQL query\nbase.query(\n    query: str,\n    cell_format: str = 'text'\n) -&gt; List[Dict[str, Any]]\n\n# Get invitation links\nbase.get_invitation_links() -&gt; List[Invitation]\n\n# Create invitation link\nbase.create_invitation_link(role: str) -&gt; Invitation\n\n# Send email invitations\nbase.send_email_invitations(\n    emails: List[str],\n    role: str\n) -&gt; Dict[str, Dict[str, str]]\n\n# Add collaborators\nbase.add_collaborators(\n    collaborators: List[Dict[str, str]],\n    role: str\n) -&gt; None\n</code></pre>"},{"location":"api/models/#collaboratortype","title":"CollaboratorType","text":"<p>Enumeration of collaborator types.</p> <pre><code>from teable import CollaboratorType\n\nCollaboratorType.SPACE  # Space collaborator\nCollaboratorType.BASE   # Base collaborator\n</code></pre>"},{"location":"api/models/#position","title":"Position","text":"<p>Enumeration of position options for ordering.</p> <pre><code>from teable import Position\n\nPosition.BEFORE  # Position before anchor\nPosition.AFTER   # Position after anchor\n</code></pre>"},{"location":"api/models/#table-models","title":"Table Models","text":""},{"location":"api/models/#table","title":"Table","text":"<p>Represents a table in Teable, which stores records and fields.</p> <pre><code>from teable import Table\n\n# Table properties\ntable.table_id: str              # Unique identifier\ntable.name: str                  # Display name\ntable.description: Optional[str]  # Table description\ntable._fields: Optional[List[Field]]  # Cached fields\ntable._views: Optional[List[View]]    # Cached views\n</code></pre>"},{"location":"api/models/#methods_2","title":"Methods","text":"<pre><code># Get fields (cached)\n@property\ndef fields(self) -&gt; List[Field]\n\n# Get views (cached)\n@property\ndef views(self) -&gt; List[View]\n\n# Get specific field\ndef get_field(self, field_id: str) -&gt; Field\n\n# Get specific view\ndef get_view(self, view_id: str) -&gt; View\n\n# Validate record fields\ndef validate_record_fields(self, fields: Dict[str, Any]) -&gt; None\n\n# Get records\ndef get_records(\n    self,\n    projection: Optional[List[str]] = None,\n    cell_format: str = 'json',\n    field_key_type: str = 'name',\n    view_id: Optional[str] = None,\n    ignore_view_query: Optional[bool] = None,\n    filter_by_tql: Optional[str] = None,\n    filter: Optional[Dict[str, Any]] = None,\n    search: Optional[List[Any]] = None,\n    filter_link_cell_candidate: Optional[Union[str, List[str]]] = None,\n    filter_link_cell_selected: Optional[Union[str, List[str]]] = None,\n    selected_record_ids: Optional[List[str]] = None,\n    order_by: Optional[str] = None,\n    group_by: Optional[str] = None,\n    collapsed_group_ids: Optional[List[str]] = None,\n    take: Optional[int] = None,\n    skip: Optional[int] = None,\n    query: Optional[Union[QueryBuilder, Dict[str, Any]]] = None\n) -&gt; List[Record]\n\n# Get single record\ndef get_record(\n    self,\n    record_id: str,\n    projection: Optional[List[str]] = None,\n    cell_format: str = 'json',\n    field_key_type: str = 'name'\n) -&gt; Record\n\n# Create record\ndef create_record(\n    self,\n    fields: Dict[str, Any]\n) -&gt; Record\n\n# Update record\ndef update_record(\n    self,\n    record_id: str,\n    fields: Dict[str, Any],\n    field_key_type: str = 'name',\n    typecast: bool = False,\n    order: Optional[Dict[str, Any]] = None\n) -&gt; Record\n\n# Duplicate record\ndef duplicate_record(\n    self,\n    record_id: str,\n    view_id: str,\n    anchor_id: str,\n    position: str\n) -&gt; Record\n\n# Delete record\ndef delete_record(\n    self,\n    record_id: str\n) -&gt; bool\n\n# Batch create records\ndef batch_create_records(\n    self,\n    records: List[Dict[str, Any]],\n    field_key_type: str = 'name',\n    typecast: bool = False,\n    order: Optional[Dict[str, Any]] = None\n) -&gt; RecordBatch\n\n# Batch update records\ndef batch_update_records(\n    self,\n    updates: List[Dict[str, Any]],\n    field_key_type: str = 'name',\n    typecast: bool = False,\n    order: Optional[Dict[str, Any]] = None\n) -&gt; List[Record]\n\n# Batch delete records\ndef batch_delete_records(\n    self,\n    record_ids: List[str]\n) -&gt; bool\n\n# Create query builder\ndef query(self) -&gt; QueryBuilder\n\n# Clear cache\ndef clear_cache(self) -&gt; None\n</code></pre>"},{"location":"api/models/#record-models","title":"Record Models","text":""},{"location":"api/models/#recordstatus","title":"RecordStatus","text":"<p>Represents a record's visibility and deletion status.</p> <pre><code>from teable import RecordStatus\n\n# Properties\nstatus.is_visible: bool  # Whether the record is visible\nstatus.is_deleted: bool  # Whether the record is deleted\n</code></pre>"},{"location":"api/models/#record","title":"Record","text":"<p>Represents a record in a table.</p> <pre><code>from teable import Record\n\n# Record properties\nrecord.record_id: str          # Unique identifier\nrecord.fields: Dict[str, Any]  # Field values\nrecord.name: Optional[str]     # Primary field value\nrecord.auto_number: Optional[int]  # Auto-incrementing number\nrecord.created_time: Optional[datetime]  # Creation timestamp\nrecord.last_modified_time: Optional[datetime]  # Last modification timestamp\nrecord.created_by: Optional[str]  # Creator user ID\nrecord.last_modified_by: Optional[str]  # Last modifier user ID\n</code></pre>"},{"location":"api/models/#methods_3","title":"Methods","text":"<pre><code># Get field value\ndef get_field_value(\n    self,\n    field: Union[str, Field],\n    cell_format: str = 'json'\n) -&gt; Any\n\n# Set field value\ndef set_field_value(\n    self,\n    field: Union[str, Field],\n    value: Any,\n    typecast: bool = False\n) -&gt; None\n\n# Convert to dictionary\ndef to_dict(self) -&gt; Dict[str, Any]\n</code></pre>"},{"location":"api/models/#recordbatch","title":"RecordBatch","text":"<p>Represents results from batch record operations.</p> <pre><code>from teable import RecordBatch\n\n# Properties\nbatch.successful: List[Record]  # Successfully processed records\nbatch.failed: List[Dict]       # Failed operations with error details\nbatch.total: int               # Total number of records in batch\n\n# Computed properties\n@property\ndef success_count(self) -&gt; int  # Number of successful operations\n\n@property\ndef failure_count(self) -&gt; int  # Number of failed operations\n\n@property\ndef success_rate(self) -&gt; float  # Success rate as percentage\n\n# String representation\ndef __str__(self) -&gt; str  # Returns formatted batch results\n\n# Create from API response\n@classmethod\ndef from_api_response(\n    cls,\n    response: Dict[str, Any],\n    total: int\n) -&gt; 'RecordBatch'\n</code></pre>"},{"location":"api/models/#field-models","title":"Field Models","text":""},{"location":"api/models/#fieldtype","title":"FieldType","text":"<p>Enumeration of supported field types in Teable.</p> <pre><code>from teable import FieldType\n\nFieldType.SINGLE_LINE_TEXT    # Single line text field\nFieldType.LONG_TEXT          # Multi-line text field\nFieldType.USER               # User reference field\nFieldType.ATTACHMENT         # File attachment field\nFieldType.CHECKBOX          # Boolean checkbox field\nFieldType.MULTIPLE_SELECT    # Multiple choice field\nFieldType.SINGLE_SELECT     # Single choice field\nFieldType.DATE              # Date/time field\nFieldType.NUMBER            # Numeric field\nFieldType.DURATION         # Duration field\nFieldType.RATING           # Rating field\nFieldType.FORMULA          # Formula field\nFieldType.ROLLUP           # Rollup field\nFieldType.COUNT            # Count field\nFieldType.LINK             # Record link field\nFieldType.CREATED_TIME     # Creation timestamp field\nFieldType.LAST_MODIFIED_TIME  # Last modified timestamp field\nFieldType.CREATED_BY       # Creator reference field\nFieldType.LAST_MODIFIED_BY  # Last modifier reference field\nFieldType.AUTO_NUMBER      # Auto-incrementing number field\nFieldType.BUTTON           # Button field\n</code></pre>"},{"location":"api/models/#field-options","title":"Field Options","text":"<p>Base class and specialized options for different field types.</p> <pre><code>from teable import FieldOption, SelectOption, NumberOption, DateOption\n\n# Select field options\nselect_options = SelectOption(\n    choices=[\"Option 1\", \"Option 2\"],\n    default_value=\"Option 1\"  # or [\"Option 1\"] for multiple select\n)\n\n# Number field options\nnumber_options = NumberOption(\n    precision=2,\n    min_value=0,\n    max_value=100,\n    format=\"0.00\"\n)\n\n# Date field options\ndate_options = DateOption(\n    format=\"YYYY-MM-DD\",\n    include_time=True,\n    timezone=\"UTC\"\n)\n</code></pre>"},{"location":"api/models/#field","title":"Field","text":"<p>Base class for all field types.</p> <pre><code>from teable import Field\n\n# Field properties\nfield.field_id: str           # Unique identifier\nfield.name: str               # Display name\nfield.field_type: FieldType   # Type of the field\nfield.description: Optional[str]  # Field description\nfield.options: Optional[FieldOption]  # Field-specific options\nfield.is_required: bool       # Required flag\nfield.is_primary: bool        # Primary field flag\nfield.is_computed: bool       # Computed field flag\n</code></pre>"},{"location":"api/models/#methods_4","title":"Methods","text":"<pre><code># Validate field value\ndef validate_value(self, value: Any) -&gt; None\n\n# Convert to dictionary\ndef to_dict(self) -&gt; Dict[str, Any]\n\n# Create from API response\n@classmethod\ndef from_api_response(cls, data: Dict[str, Any]) -&gt; Field\n</code></pre> <p>The validate_value() method performs type-specific validation: - Required fields cannot be None - Computed fields cannot be set directly - Select fields validate against choices - Number fields validate against min/max values - Date fields validate format - Text fields validate type is string - Checkbox fields validate type is boolean</p>"},{"location":"api/models/#view-models","title":"View Models","text":""},{"location":"api/models/#position-view","title":"Position (View)","text":"<p>Enumeration of position options for view ordering.</p> <pre><code>from teable import Position\n\nPosition.BEFORE  # Position before anchor\nPosition.AFTER   # Position after anchor\n</code></pre>"},{"location":"api/models/#sortdirection","title":"SortDirection","text":"<p>Enumeration of sort directions.</p> <pre><code>from teable import SortDirection\n\nSortDirection.ASCENDING   # Sort in ascending order\nSortDirection.DESCENDING  # Sort in descending order\n</code></pre>"},{"location":"api/models/#filteroperator","title":"FilterOperator","text":"<p>Enumeration of filter operators.</p> <pre><code>from teable import FilterOperator\n\nFilterOperator.EQUALS                  # =\nFilterOperator.NOT_EQUALS             # !=\nFilterOperator.GREATER_THAN           # &gt;\nFilterOperator.GREATER_THAN_OR_EQUALS # &gt;=\nFilterOperator.LESS_THAN              # &lt;\nFilterOperator.LESS_THAN_OR_EQUALS    # &lt;=\nFilterOperator.CONTAINS               # contains\nFilterOperator.NOT_CONTAINS           # notContains\nFilterOperator.STARTS_WITH            # startsWith\nFilterOperator.ENDS_WITH              # endsWith\nFilterOperator.IS_EMPTY              # isEmpty\nFilterOperator.IS_NOT_EMPTY          # isNotEmpty\nFilterOperator.IN                    # in\nFilterOperator.NOT_IN                # notIn\nFilterOperator.BETWEEN               # between\n</code></pre>"},{"location":"api/models/#filtercondition","title":"FilterCondition","text":"<p>Represents a single filter condition.</p> <pre><code>from teable import FilterCondition\n\n# Create a filter condition\ncondition = FilterCondition(\n    field=\"field_id\",  # or Field object\n    operator=FilterOperator.EQUALS,\n    value=\"some value\"\n)\n</code></pre>"},{"location":"api/models/#sortcondition","title":"SortCondition","text":"<p>Represents a sort condition.</p> <pre><code>from teable import SortCondition\n\n# Create a sort condition\nsort = SortCondition(\n    field=\"field_id\",  # or Field object\n    direction=SortDirection.ASCENDING\n)\n</code></pre>"},{"location":"api/models/#querybuilder","title":"QueryBuilder","text":"<p>Builder pattern implementation for constructing API queries.</p> <pre><code>from teable import QueryBuilder\n\n# Create and configure a query\nquery = QueryBuilder()\n    .filter(\"field1\", FilterOperator.EQUALS, \"value1\")\n    .filter(\"field2\", FilterOperator.GREATER_THAN, 100)\n    .sort(\"field3\", SortDirection.DESCENDING)\n    .paginate(take=50, skip=0)\n    .search(\"search text\", field=\"field4\")\n    .set_view(\"view_id\")\n\n# Build final query parameters\nparams = query.build()\n</code></pre>"},{"location":"api/models/#view","title":"View","text":"<p>Represents a view in a table.</p> <pre><code>from teable import View\n\n# View properties\nview.view_id: str            # Unique identifier\nview.name: str               # Display name\nview.description: Optional[str]  # View description\nview.filters: List[FilterCondition]  # View's filter conditions\nview.sorts: List[SortCondition]    # View's sort conditions\n</code></pre>"},{"location":"api/models/#methods_5","title":"Methods","text":"<pre><code># Create a query builder from view settings\ndef create_query(self) -&gt; QueryBuilder\n\n# Update view order\ndef update_order(\n    self,\n    table_id: str,\n    anchor_id: str,\n    position: Position\n) -&gt; None\n\n# Convert to dictionary\ndef to_dict(self) -&gt; Dict[str, Any]\n\n# Create from API response\n@classmethod\ndef from_api_response(\n    cls,\n    data: Dict[str, Any],\n    client: Any = None\n) -&gt; View\n</code></pre>"},{"location":"api/models/#next-steps","title":"Next Steps","text":"<ul> <li>Client Reference</li> <li>Exceptions Reference</li> <li>Best Practices</li> </ul>"},{"location":"automation/workflows/","title":"Workflow Automation","text":"<p>This guide covers workflow automation capabilities in Teable, including triggers, actions, and automation patterns.</p>"},{"location":"automation/workflows/#triggers","title":"Triggers","text":""},{"location":"automation/workflows/#record-based-triggers","title":"Record-Based Triggers","text":"<pre><code>from teable import TeableClient, TeableConfig, Trigger\n\n# Initialize the client\nclient = TeableClient(TeableConfig(\n    api_url=\"https://your-teable-instance.com/api\",\n    api_key=\"your-api-key\"\n))\n\n# Get your table\ntable = client.get_table(\"table_id\")\n\n# Create record trigger\ntrigger = Trigger(\n    name=\"New Record Trigger\",\n    event=\"record.created\",\n    table_id=table.table_id,\n    conditions=[\n        {\n            \"field\": \"Status\",\n            \"operator\": \"=\",\n            \"value\": \"New\"\n        }\n    ]\n)\n\n# Register trigger handler\n@trigger.handler\ndef handle_new_record(event):\n    \"\"\"Handle new record creation.\"\"\"\n    record = event.record\n    print(f\"New record created: {record.record_id}\")\n    # Implement trigger logic\n</code></pre>"},{"location":"automation/workflows/#field-change-triggers","title":"Field Change Triggers","text":"<pre><code># Create field change trigger\nfield_trigger = Trigger(\n    name=\"Status Change Trigger\",\n    event=\"field.changed\",\n    table_id=table.table_id,\n    field_id=\"status_field_id\",\n    conditions=[\n        {\n            \"from\": \"In Progress\",\n            \"to\": \"Completed\"\n        }\n    ]\n)\n\n@field_trigger.handler\ndef handle_status_change(event):\n    \"\"\"Handle status field changes.\"\"\"\n    record = event.record\n    old_value = event.old_value\n    new_value = event.new_value\n    print(f\"Status changed from {old_value} to {new_value}\")\n    # Implement trigger logic\n</code></pre>"},{"location":"automation/workflows/#actions","title":"Actions","text":""},{"location":"automation/workflows/#record-actions","title":"Record Actions","text":"<pre><code>from teable import Action\n\n# Create record action\naction = Action(\n    name=\"Update Related Records\",\n    description=\"Update related records when status changes\"\n)\n\n@action.execute\ndef update_related_records(context):\n    \"\"\"Update related records.\"\"\"\n    record = context.record\n    related_records = record.get_field_value(\"Related Records\")\n\n    # Update each related record\n    for related_id in related_records:\n        related_record = table.get_record(related_id)\n        table.update_record(\n            record_id=related_id,\n            fields={\n                \"Status\": \"Updated\",\n                \"Last Updated\": context.timestamp\n            }\n        )\n</code></pre>"},{"location":"automation/workflows/#notification-actions","title":"Notification Actions","text":"<pre><code># Create notification action\nnotification_action = Action(\n    name=\"Send Notification\",\n    description=\"Send notification when record is assigned\"\n)\n\n@notification_action.execute\ndef send_notification(context):\n    \"\"\"Send notification to assigned user.\"\"\"\n    record = context.record\n    assignee = record.get_field_value(\"Assignee\")\n\n    if assignee:\n        notification = {\n            \"user_id\": assignee,\n            \"title\": \"New Assignment\",\n            \"message\": f\"You have been assigned to {record.name}\",\n            \"link\": f\"/record/{record.record_id}\"\n        }\n\n        client.send_notification(notification)\n</code></pre>"},{"location":"automation/workflows/#workflow-definitions","title":"Workflow Definitions","text":""},{"location":"automation/workflows/#creating-workflows","title":"Creating Workflows","text":"<pre><code>from teable import Workflow\n\n# Create workflow\nworkflow = Workflow(\n    name=\"Task Assignment Workflow\",\n    description=\"Handle task assignments and notifications\"\n)\n\n# Add triggers and actions\nworkflow.add_trigger(trigger)\nworkflow.add_action(action)\nworkflow.add_action(notification_action)\n\n# Set workflow order\nworkflow.set_execution_order([\n    \"update_related_records\",\n    \"send_notification\"\n])\n\n# Enable workflow\nworkflow.enable()\n</code></pre>"},{"location":"automation/workflows/#conditional-workflows","title":"Conditional Workflows","text":"<pre><code># Create conditional workflow\nconditional_workflow = Workflow(\n    name=\"Priority Task Workflow\",\n    description=\"Handle high priority tasks\"\n)\n\n@conditional_workflow.condition\ndef check_priority(context):\n    \"\"\"Check if task is high priority.\"\"\"\n    record = context.record\n    priority = record.get_field_value(\"Priority\")\n    return priority == \"High\"\n\n@conditional_workflow.action\ndef handle_priority_task(context):\n    \"\"\"Handle high priority task.\"\"\"\n    record = context.record\n\n    # Notify management\n    notification = {\n        \"user_id\": \"manager_id\",\n        \"title\": \"High Priority Task\",\n        \"message\": f\"New high priority task: {record.name}\",\n        \"priority\": \"urgent\"\n    }\n\n    client.send_notification(notification)\n\n    # Update task tracking\n    table.update_record(\n        record_id=record.record_id,\n        fields={\n            \"Tracked\": True,\n            \"Track Date\": context.timestamp\n        }\n    )\n</code></pre>"},{"location":"automation/workflows/#automation-patterns","title":"Automation Patterns","text":""},{"location":"automation/workflows/#sequential-workflows","title":"Sequential Workflows","text":"<pre><code>def create_sequential_workflow(table, steps):\n    \"\"\"Create workflow with sequential steps.\"\"\"\n    workflow = Workflow(\n        name=\"Sequential Process\",\n        description=\"Handle multi-step process\"\n    )\n\n    current_step = 0\n\n    @workflow.trigger\n    def step_completed(event):\n        \"\"\"Trigger when step is completed.\"\"\"\n        nonlocal current_step\n        record = event.record\n\n        if current_step &lt; len(steps):\n            # Execute current step\n            step = steps[current_step]\n            step(record)\n            current_step += 1\n\n            # Update progress\n            table.update_record(\n                record_id=record.record_id,\n                fields={\n                    \"Current Step\": current_step,\n                    \"Progress\": (current_step / len(steps)) * 100\n                }\n            )\n\n    return workflow\n</code></pre>"},{"location":"automation/workflows/#parallel-workflows","title":"Parallel Workflows","text":"<pre><code>def create_parallel_workflow(table, tasks):\n    \"\"\"Create workflow with parallel tasks.\"\"\"\n    workflow = Workflow(\n        name=\"Parallel Process\",\n        description=\"Handle parallel tasks\"\n    )\n\n    @workflow.trigger\n    def start_tasks(event):\n        \"\"\"Start parallel tasks.\"\"\"\n        record = event.record\n\n        # Create task records\n        for task in tasks:\n            table.create_record({\n                \"Parent\": record.record_id,\n                \"Task\": task[\"name\"],\n                \"Status\": \"Pending\",\n                \"Assigned To\": task[\"assignee\"]\n            })\n\n    @workflow.action\n    def check_completion(context):\n        \"\"\"Check if all tasks are complete.\"\"\"\n        record = context.record\n\n        # Get task records\n        task_records = table.get_records(\n            filter={\n                \"field\": \"Parent\",\n                \"operator\": \"=\",\n                \"value\": record.record_id\n            }\n        )\n\n        # Check completion\n        all_complete = all(\n            task.get_field_value(\"Status\") == \"Complete\"\n            for task in task_records\n        )\n\n        if all_complete:\n            table.update_record(\n                record_id=record.record_id,\n                fields={\"Status\": \"Complete\"}\n            )\n\n    return workflow\n</code></pre>"},{"location":"automation/workflows/#best-practices","title":"Best Practices","text":"<ol> <li>Workflow Design</li> <li>Keep workflows focused</li> <li>Handle errors gracefully</li> <li>Document workflow logic</li> <li> <p>Test thoroughly</p> </li> <li> <p>Performance</p> </li> <li>Optimize trigger conditions</li> <li>Use batch operations</li> <li>Monitor execution time</li> <li> <p>Handle timeouts</p> </li> <li> <p>Error Handling</p> </li> <li>Implement retry logic</li> <li>Log workflow errors</li> <li>Provide status updates</li> <li> <p>Handle edge cases</p> </li> <li> <p>Maintenance</p> </li> <li>Regular workflow audits</li> <li>Monitor execution logs</li> <li>Update documentation</li> <li>Version control workflows</li> </ol>"},{"location":"automation/workflows/#next-steps","title":"Next Steps","text":"<ul> <li>Data Synchronization</li> <li>Error Handling</li> <li>Best Practices</li> <li>API Reference</li> </ul>"},{"location":"bases/creation/","title":"Creating and Managing Bases","text":"<p>A base in Teable is a container for tables and other resources within a space. This guide covers how to create and manage bases using the Teable-Client library.</p>"},{"location":"bases/creation/#creating-a-base","title":"Creating a Base","text":""},{"location":"bases/creation/#basic-base-creation","title":"Basic Base Creation","text":"<pre><code>from teable import TeableClient\n\n# Initialize the client and get spaces\nclient = TeableClient()\nspaces = client.spaces.get_spaces()\nspace = spaces[0]  # Get first space\n\n# Create a base in the space\nbase = space.create_base(\n    name=\"Project Tracker\",\n    icon=\"\ud83d\udcca\"  # Optional emoji or icon identifier\n)\n\nprint(f\"Created base: {base.name} (ID: {base.base_id})\")\n\n# Access base attributes\nprint(f\"Space ID: {base.space_id}\")\nprint(f\"Is Unrestricted: {base.is_unrestricted}\")\nprint(f\"Collaborator Type: {base.collaborator_type}\")\n\n# Convert to dictionary representation\nbase_dict = base.to_dict()\n</code></pre>"},{"location":"bases/creation/#duplicating-bases","title":"Duplicating Bases","text":"<p>You can create a copy of an existing base:</p> <pre><code># Duplicate a base\nduplicated_base = base.duplicate(\n    space_id=space.space_id,\n    name=\"Project Tracker Copy\",\n    with_records=False  # Whether to include existing records in the copy\n)\n\n# Verify duplication\nassert duplicated_base.name == \"Project Tracker Copy\"\nassert duplicated_base.space_id == space.space_id\nassert duplicated_base.base_id != base.base_id  # Different ID from original\n</code></pre>"},{"location":"bases/creation/#base-configuration","title":"Base Configuration","text":""},{"location":"bases/creation/#updating-base-information","title":"Updating Base Information","text":"<pre><code># Get a base\nbase = client.tables.get(\"base123\")\n\n# Update base information\nupdated_base = base.update(\n    name=\"New Project Tracker\",\n    icon=\"\ud83d\ude80\"\n)\n</code></pre>"},{"location":"bases/creation/#managing-base-order","title":"Managing Base Order","text":"<p>You can arrange bases within a space:</p> <pre><code>from teable import Position\n\n# Update base position\nbase.update_order(\n    anchor_id=\"base456\",  # The base to position relative to\n    position=Position.AFTER  # or Position.BEFORE\n)\n</code></pre>"},{"location":"bases/creation/#base-permissions","title":"Base Permissions","text":""},{"location":"bases/creation/#checking-permissions","title":"Checking Permissions","text":"<pre><code># Get permissions for a base\npermissions = base.get_permissions()\n\n# Check specific permissions\nfor permission, allowed in permissions.items():\n    print(f\"{permission}: {'Allowed' if allowed else 'Not Allowed'}\")\n</code></pre>"},{"location":"bases/creation/#base-collaborators","title":"Base Collaborators","text":""},{"location":"bases/creation/#adding-collaborators","title":"Adding Collaborators","text":"<pre><code># Add collaborators to a base\ncollaborators = [\n    {\n        \"principalId\": \"user123\",\n        \"principalType\": \"user\"\n    },\n    {\n        \"principalId\": \"dept456\",\n        \"principalType\": \"department\"\n    }\n]\n\nbase.add_collaborators(\n    collaborators=collaborators,\n    role=\"editor\"  # Options: creator, editor, commenter, viewer\n)\n</code></pre>"},{"location":"bases/creation/#managing-collaborators","title":"Managing Collaborators","text":"<pre><code>from teable.models.collaborator import PrincipalType\n\n# List collaborators\ncollaborators, total = base.get_collaborators(\n    include_system=True,\n    take=100,\n    search=\"john\"\n)\n\n# Update collaborator role\nbase.update_collaborator(\n    principal_id=\"user123\",\n    principal_type=PrincipalType.USER,\n    role=\"editor\"\n)\n\n# Remove collaborator\nbase.delete_collaborator(\n    principal_id=\"user123\",\n    principal_type=PrincipalType.USER\n)\n</code></pre>"},{"location":"bases/creation/#base-invitations","title":"Base Invitations","text":""},{"location":"bases/creation/#creating-invitation-links","title":"Creating Invitation Links","text":"<pre><code># Create an invitation link\ninvitation = base.create_invitation_link(role=\"editor\")\n\n# List all invitation links\ninvitations = base.get_invitation_links()\n</code></pre>"},{"location":"bases/creation/#sending-email-invitations","title":"Sending Email Invitations","text":"<pre><code># Send invitation emails\nemails = [\"user1@example.com\", \"user2@example.com\"]\nresult = base.send_email_invitations(\n    emails=emails,\n    role=\"editor\"\n)\n</code></pre>"},{"location":"bases/creation/#base-querying","title":"Base Querying","text":"<p>You can execute SQL queries on a base:</p> <pre><code># Execute a query with default cell format\nresults = base.query(\"SELECT * FROM your_table\")\n\n# Execute a query with JSON cell format\nresults_json = base.query(\"SELECT * FROM your_table\", cell_format='json')\n</code></pre>"},{"location":"bases/creation/#base-deletion","title":"Base Deletion","text":"<pre><code># Delete a base\nresult = base.delete()\nassert result is True  # Verify deletion was successful\n</code></pre> <p>Warning</p> <p>Base deletion cannot be undone. Make sure to back up any important data before proceeding.</p>"},{"location":"bases/creation/#best-practices","title":"Best Practices","text":"<ol> <li>Base Organization</li> <li>Use clear, descriptive names for bases</li> <li>Organize bases logically within spaces</li> <li>Use appropriate icons for visual identification</li> <li> <p>Document base purposes and relationships</p> </li> <li> <p>Access Control</p> </li> <li>Regularly review collaborator access</li> <li>Use appropriate roles for different user types</li> <li>Clean up unused invitation links</li> <li> <p>Document access policies</p> </li> <li> <p>Data Management</p> </li> <li>Consider whether to include records when duplicating</li> <li>Back up important bases before major changes</li> <li>Maintain consistent naming conventions</li> </ol>"},{"location":"bases/creation/#error-handling","title":"Error Handling","text":"<pre><code>from teable.exceptions import TeableError, ValidationError\n\ntry:\n    base = client.tables.create(\n        space_id=\"space123\",\n        name=\"New Project\"\n    )\nexcept ValidationError as e:\n    print(f\"Invalid base configuration: {e}\")\nexcept TeableError as e:\n    print(f\"Error creating base: {e}\")\n</code></pre>"},{"location":"bases/creation/#next-steps","title":"Next Steps","text":"<p>After creating and configuring your base, you can:</p> <ul> <li>Manage base tables</li> <li>Configure table integration</li> <li>Work with records</li> </ul>"},{"location":"bases/management/","title":"Managing Bases","text":"<p>This guide covers the various operations available for managing bases in Teable.</p>"},{"location":"bases/management/#base-properties","title":"Base Properties","text":""},{"location":"bases/management/#checking-base-type","title":"Checking Base Type","text":"<pre><code>from teable import CollaboratorType\n\n# Get a base\nbase = client.tables.get(\"base123\")\n\n# Check base type\nif base.collaborator_type == CollaboratorType.SPACE:\n    print(\"This is a space-level base\")\nelif base.collaborator_type == CollaboratorType.BASE:\n    print(\"This is a base-level base\")\n\n# Check if base is unrestricted\nif base.is_unrestricted:\n    print(\"This base has no access restrictions\")\n</code></pre>"},{"location":"bases/management/#base-organization","title":"Base Organization","text":""},{"location":"bases/management/#managing-base-order","title":"Managing Base Order","text":"<pre><code>from teable import Position\n\n# Reorder bases\nbase.update_order(\n    anchor_id=\"base456\",\n    position=Position.BEFORE  # or Position.AFTER\n)\n</code></pre>"},{"location":"bases/management/#base-collaborators","title":"Base Collaborators","text":""},{"location":"bases/management/#managing-access","title":"Managing Access","text":"<pre><code># List collaborators\ncollaborators, total = base.get_collaborators(\n    include_system=True,\n    take=100,\n    search=\"john\"\n)\n\n# Add collaborators\ncollaborators = [\n    {\n        \"principalId\": \"user123\",\n        \"principalType\": \"user\"\n    },\n    {\n        \"principalId\": \"dept456\",\n        \"principalType\": \"department\"\n    }\n]\n\nbase.add_collaborators(\n    collaborators=collaborators,\n    role=\"editor\"  # Options: creator, editor, commenter, viewer\n)\n\n# Update collaborator role\nbase.update_collaborator(\n    principal_id=\"user123\",\n    principal_type=PrincipalType.USER,\n    role=\"editor\"\n)\n\n# Remove collaborator\nbase.delete_collaborator(\n    principal_id=\"user123\",\n    principal_type=PrincipalType.USER\n)\n</code></pre>"},{"location":"bases/management/#best-practices","title":"Best Practices","text":"<ol> <li>Organization</li> <li>Use consistent naming conventions</li> <li>Maintain logical base ordering</li> <li>Document base relationships</li> <li> <p>Regular access review</p> </li> <li> <p>Access Control</p> </li> <li>Regularly review collaborator access</li> <li>Use appropriate roles for different user types</li> <li>Document access policies</li> <li> <p>Monitor base permissions</p> </li> <li> <p>Resource Management</p> </li> <li>Clean up unused bases</li> <li>Archive inactive bases</li> <li>Monitor base usage</li> <li>Regular backup important bases</li> </ol>"},{"location":"bases/management/#error-handling","title":"Error Handling","text":"<pre><code>from teable.exceptions import TeableError, ResourceNotFoundError\n\ntry:\n    # Get base information\n    base = client.tables.get(\"base123\")\n\n    # Update base\n    base.update(name=\"New Name\")\n\nexcept ResourceNotFoundError:\n    print(\"Base not found\")\nexcept TeableError as e:\n    print(f\"Error accessing base: {e}\")\n</code></pre>"},{"location":"bases/management/#next-steps","title":"Next Steps","text":"<p>After mastering base management, you can:</p> <ul> <li>Configure table integration</li> <li>Work with records</li> <li>Set up views</li> </ul>"},{"location":"bases/table-integration/","title":"Table Integration with Bases","text":"<p>This guide covers how to integrate and manage tables within bases using the Teable-Client library. Tables are the fundamental data structures within bases that store and organize your information.</p>"},{"location":"bases/table-integration/#table-structure-in-bases","title":"Table Structure in Bases","text":"<p>A base can contain multiple tables, and these tables can be interconnected through relationships. Each table consists of:</p> <ul> <li>Fields (columns) that define the data structure</li> <li>Records (rows) that contain the actual data</li> <li>Views that provide different ways to visualize and interact with the data</li> </ul>"},{"location":"bases/table-integration/#creating-tables-in-a-base","title":"Creating Tables in a Base","text":""},{"location":"bases/table-integration/#basic-table-creation","title":"Basic Table Creation","text":"<pre><code>from teable import TeableClient, TeableConfig\n\n# Initialize the client\nclient = TeableClient(TeableConfig(\n    api_url=\"https://your-teable-instance.com/api\",\n    api_key=\"your-api-key\"\n))\n\n# Create a table in a base\ntable = client.tables.create(\n    base_id=\"base123\",\n    name=\"Projects\",\n    description=\"Track all company projects\"\n)\n</code></pre>"},{"location":"bases/table-integration/#creating-tables-with-fields","title":"Creating Tables with Fields","text":"<pre><code># Define fields for the table\nfields = [\n    {\n        \"name\": \"Project Name\",\n        \"type\": \"singleLineText\",\n        \"required\": True\n    },\n    {\n        \"name\": \"Start Date\",\n        \"type\": \"date\"\n    },\n    {\n        \"name\": \"Status\",\n        \"type\": \"singleSelect\",\n        \"options\": {\n            \"choices\": [\"Planning\", \"In Progress\", \"Completed\"]\n        }\n    }\n]\n\n# Create table with fields\ntable = client.tables.create(\n    base_id=\"base123\",\n    name=\"Projects\",\n    fields=fields\n)\n</code></pre>"},{"location":"bases/table-integration/#managing-tables","title":"Managing Tables","text":""},{"location":"bases/table-integration/#getting-table-information","title":"Getting Table Information","text":"<pre><code># Get a specific table\ntable = client.tables.get(\"table123\")\n\n# Access table properties\nprint(f\"Table ID: {table.table_id}\")\nprint(f\"Description: {table.description}\")\n\n# Access fields\nfor field in table.fields:\n    print(f\"Field: {field.field_id}\")\n    print(f\"Type: {field.field_type}\")\n    print(f\"Required: {field.is_required}\")\n</code></pre>"},{"location":"bases/table-integration/#updating-tables","title":"Updating Tables","text":"<pre><code># Update table properties\ntable = client.tables.update(\n    table_id=\"table123\",\n    name=\"Active Projects\",\n    description=\"Track ongoing and planned projects\"\n)\n</code></pre>"},{"location":"bases/table-integration/#field-management","title":"Field Management","text":""},{"location":"bases/table-integration/#creating-fields","title":"Creating Fields","text":"<pre><code>from teable import FieldType\n\n# Create a single select field\nfield = client.fields.create(\n    table_id=\"table123\",\n    name=\"Priority\",\n    field_type=FieldType.SINGLE_SELECT,\n    options={\n        \"choices\": [\"High\", \"Medium\", \"Low\"]\n    }\n)\n\n# Create a number field\nfield = client.fields.create(\n    table_id=\"table123\",\n    name=\"Budget\",\n    field_type=FieldType.NUMBER,\n    options={\n        \"precision\": 2,\n        \"format\": \"currency\"\n    }\n)\n</code></pre>"},{"location":"bases/table-integration/#updating-fields","title":"Updating Fields","text":"<pre><code># Update field properties\nfield = client.fields.update(\n    field_id=\"field123\",\n    name=\"Project Priority\",\n    options={\n        \"choices\": [\"Critical\", \"High\", \"Medium\", \"Low\"]\n    }\n)\n</code></pre>"},{"location":"bases/table-integration/#view-management","title":"View Management","text":""},{"location":"bases/table-integration/#creating-views","title":"Creating Views","text":"<pre><code>from teable import FilterOperator, SortDirection\n\n# Create a view\nview = client.views.create(\n    table_id=\"table123\",\n    name=\"Active Projects\",\n    type=\"grid\",\n    filter={\n        \"operator\": \"and\",\n        \"conditions\": [\n            {\n                \"field\": \"Status\",\n                \"operator\": FilterOperator.EQUALS,\n                \"value\": \"In Progress\"\n            }\n        ]\n    },\n    sort=[\n        {\n            \"field\": \"Start Date\",\n            \"direction\": SortDirection.DESCENDING\n        }\n    ]\n)\n</code></pre>"},{"location":"bases/table-integration/#managing-views","title":"Managing Views","text":"<pre><code># Get views from table\nviews = table.views\n\n# Update view configuration\nview = client.views.update(\n    view_id=\"view123\",\n    name=\"Current Projects\",\n    filter={\n        \"operator\": \"and\",\n        \"conditions\": [\n            {\n                \"field\": \"Status\",\n                \"operator\": FilterOperator.IN,\n                \"value\": [\"Planning\", \"In Progress\"]\n            }\n        ]\n    }\n)\n</code></pre>"},{"location":"bases/table-integration/#best-practices","title":"Best Practices","text":"<ol> <li>Table Design</li> <li>Plan your table structure before creation</li> <li>Use appropriate field types for data</li> <li>Consider relationships between tables</li> <li> <p>Document table purposes</p> </li> <li> <p>Field Management</p> </li> <li>Use clear, descriptive field names</li> <li>Set appropriate field constraints</li> <li>Consider field dependencies</li> <li> <p>Document field usage</p> </li> <li> <p>View Organization</p> </li> <li>Create views for common use cases</li> <li>Use consistent naming conventions</li> <li>Document view purposes</li> <li>Regular view maintenance</li> </ol>"},{"location":"bases/table-integration/#error-handling","title":"Error Handling","text":"<pre><code>from teable.exceptions import TeableError, ValidationError\n\ntry:\n    # Create table with fields\n    table = client.tables.create(\n        base_id=\"base123\",\n        name=\"Projects\",\n        fields=fields\n    )\nexcept ValidationError as e:\n    print(f\"Invalid table configuration: {e}\")\nexcept TeableError as e:\n    print(f\"Error creating table: {e}\")\n</code></pre>"},{"location":"bases/table-integration/#performance-considerations","title":"Performance Considerations","text":"<ol> <li> <p>Batch Operations <pre><code># Good - Batch create records\nrecords = [\n    {\"Project Name\": f\"Project {i}\"}\n    for i in range(100)\n]\nclient.records.batch_create_records(\n    table_id=\"table123\",\n    records=records\n)\n\n# Avoid - Individual record creation\nfor i in range(100):\n    client.records.create(\n        table_id=\"table123\",\n        fields={\"Project Name\": f\"Project {i}\"}\n    )\n</code></pre></p> </li> <li> <p>Field Creation <pre><code># Good - Create table with all fields\ntable = client.tables.create(\n    base_id=\"base123\",\n    name=\"Projects\",\n    fields=all_fields\n)\n\n# Avoid - Creating fields one by one\ntable = client.tables.create(\n    base_id=\"base123\",\n    name=\"Projects\"\n)\nfor field in fields:\n    client.fields.create(\n        table_id=table.table_id,\n        **field\n    )\n</code></pre></p> </li> </ol>"},{"location":"bases/table-integration/#next-steps","title":"Next Steps","text":"<p>After integrating tables with your base, you can:</p> <ul> <li>Create and manage records</li> <li>Set up views</li> <li>Configure field types</li> </ul>"},{"location":"fields/configuration/","title":"Field Configuration","text":"<p>This guide covers how to configure fields in Teable tables, including field types and options.</p>"},{"location":"fields/configuration/#field-types","title":"Field Types","text":""},{"location":"fields/configuration/#basic-field-types","title":"Basic Field Types","text":"<pre><code>from teable import TeableClient, TeableConfig, FieldType\n\n# Initialize the client\nclient = TeableClient(TeableConfig(\n    api_url=\"https://your-teable-instance.com/api\",\n    api_key=\"your-api-key\"\n))\n\n# Get your table\ntable = client.tables.get(\"table_id\")\n\n# Single Line Text Field\ntext_field = client.fields.create(\n    table_id=table.table_id,\n    name=\"Description\",\n    field_type=FieldType.SINGLE_LINE_TEXT,\n    is_required=True\n)\n\n# Long Text Field\nlong_text_field = client.fields.create(\n    table_id=table.table_id,\n    name=\"Details\",\n    field_type=FieldType.LONG_TEXT\n)\n\n# Number Field\nnumber_field = client.fields.create(\n    table_id=table.table_id,\n    name=\"Amount\",\n    field_type=FieldType.NUMBER,\n    options={\n        \"precision\": 2,\n        \"format\": \"currency\"\n    }\n)\n\n# Date Field\ndate_field = client.fields.create(\n    table_id=table.table_id,\n    name=\"Due Date\",\n    field_type=FieldType.DATE,\n    options={\n        \"format\": \"YYYY-MM-DD\",\n        \"include_time\": True\n    }\n)\n</code></pre>"},{"location":"fields/configuration/#selection-fields","title":"Selection Fields","text":"<pre><code># Single Select Field\nsingle_select = client.fields.create(\n    table_id=table.table_id,\n    name=\"Status\",\n    field_type=FieldType.SINGLE_SELECT,\n    options={\n        \"choices\": [\"Active\", \"Pending\", \"Completed\"]\n    }\n)\n\n# Multiple Select Field\nmulti_select = client.fields.create(\n    table_id=table.table_id,\n    name=\"Tags\",\n    field_type=FieldType.MULTIPLE_SELECT,\n    options={\n        \"choices\": [\"Urgent\", \"Important\", \"Review\"]\n    }\n)\n</code></pre>"},{"location":"fields/configuration/#special-field-types","title":"Special Field Types","text":"<pre><code># Checkbox Field\ncheckbox_field = client.fields.create(\n    table_id=table.table_id,\n    name=\"Is Active\",\n    field_type=FieldType.CHECKBOX\n)\n\n# Rating Field\nrating_field = client.fields.create(\n    table_id=table.table_id,\n    name=\"Priority\",\n    field_type=FieldType.RATING\n)\n\n# Duration Field\nduration_field = client.fields.create(\n    table_id=table.table_id,\n    name=\"Time Spent\",\n    field_type=FieldType.DURATION\n)\n\n# Button Field\nbutton_field = client.fields.create(\n    table_id=table.table_id,\n    name=\"Action\",\n    field_type=FieldType.BUTTON\n)\n</code></pre>"},{"location":"fields/configuration/#field-management","title":"Field Management","text":""},{"location":"fields/configuration/#getting-field-information","title":"Getting Field Information","text":"<pre><code># Get field from table\nfield = table.get_field(\"field_id\")\n\n# Access field properties\nprint(f\"Field ID: {field.field_id}\")\nprint(f\"Type: {field.field_type}\")\nprint(f\"Required: {field.is_required}\")\nprint(f\"Primary: {field.is_primary}\")\nprint(f\"Computed: {field.is_computed}\")\n</code></pre>"},{"location":"fields/configuration/#updating-fields","title":"Updating Fields","text":"<pre><code># Update field configuration\nfield = client.fields.update(\n    field_id=\"field_id\",\n    name=\"New Name\",\n    is_required=True,\n    options={\n        \"choices\": [\"Option 1\", \"Option 2\", \"Option 3\"]  # For select fields\n    }\n)\n</code></pre>"},{"location":"fields/configuration/#field-types-reference","title":"Field Types Reference","text":""},{"location":"fields/configuration/#available-field-types","title":"Available Field Types","text":"<pre><code>from teable import FieldType\n\n# Text Fields\nFieldType.SINGLE_LINE_TEXT    # Single line text\nFieldType.LONG_TEXT          # Multi-line text\n\n# Number Fields\nFieldType.NUMBER            # Numeric values\n\n# Date Fields\nFieldType.DATE              # Date and time\n\n# Selection Fields\nFieldType.SINGLE_SELECT     # Single choice\nFieldType.MULTIPLE_SELECT   # Multiple choices\n\n# Special Fields\nFieldType.CHECKBOX          # Boolean values\nFieldType.RATING           # Rating values\nFieldType.DURATION         # Time duration\nFieldType.BUTTON           # Button field\n\n# System Fields\nFieldType.CREATED_TIME     # Record creation time\nFieldType.LAST_MODIFIED_TIME  # Last modification time\nFieldType.CREATED_BY       # Record creator\nFieldType.LAST_MODIFIED_BY  # Last modifier\nFieldType.AUTO_NUMBER      # Auto-incrementing number\n</code></pre>"},{"location":"fields/configuration/#best-practices","title":"Best Practices","text":"<ol> <li>Field Design</li> <li>Choose appropriate field types for your data</li> <li>Use clear, descriptive field names</li> <li>Set required fields appropriately</li> <li> <p>Document field purposes</p> </li> <li> <p>Field Options</p> </li> <li>Configure field options based on data requirements</li> <li>Use appropriate formats for numbers and dates</li> <li>Set meaningful choices for select fields</li> <li> <p>Consider validation requirements</p> </li> <li> <p>Field Management</p> </li> <li>Regularly review field configurations</li> <li>Update field settings as needed</li> <li>Monitor field usage</li> <li>Clean up unused fields</li> </ol>"},{"location":"fields/configuration/#error-handling","title":"Error Handling","text":"<pre><code>from teable.exceptions import TeableError, ValidationError\n\ntry:\n    # Create a field\n    field = client.fields.create(\n        table_id=\"table_id\",\n        name=\"New Field\",\n        field_type=FieldType.SINGLE_LINE_TEXT,\n        is_required=True\n    )\nexcept ValidationError as e:\n    print(f\"Invalid field configuration: {e}\")\nexcept TeableError as e:\n    print(f\"Error creating field: {e}\")\n</code></pre>"},{"location":"fields/configuration/#next-steps","title":"Next Steps","text":"<ul> <li>Field Validation</li> <li>Table Management</li> <li>Record Operations</li> <li>Views Configuration</li> </ul>"},{"location":"fields/validation/","title":"Field Validation","text":"<p>This guide covers field validation in Teable tables.</p>"},{"location":"fields/validation/#field-validation_1","title":"Field Validation","text":""},{"location":"fields/validation/#basic-validation","title":"Basic Validation","text":"<pre><code>from teable import TeableClient, TeableConfig, FieldType\n\n# Initialize the client\nclient = TeableClient(TeableConfig(\n    api_url=\"https://your-teable-instance.com/api\",\n    api_key=\"your-api-key\"\n))\n\n# Create a required field\nfield = client.fields.create(\n    table_id=\"table_id\",\n    name=\"Name\",\n    field_type=FieldType.SINGLE_LINE_TEXT,\n    is_required=True\n)\n\n# Validate a value\ntry:\n    field.validate_value(\"John Doe\")\n    print(\"Value is valid\")\nexcept ValidationError as e:\n    print(f\"Validation error: {e}\")\n</code></pre>"},{"location":"fields/validation/#number-field-validation","title":"Number Field Validation","text":"<pre><code># Create a number field with precision\nnumber_field = client.fields.create(\n    table_id=\"table_id\",\n    name=\"Score\",\n    field_type=FieldType.NUMBER,\n    options={\n        \"precision\": 2  # Allow 2 decimal places\n    }\n)\n\n# Validate number values\ntry:\n    number_field.validate_value(75.50)  # Valid\n    number_field.validate_value(\"invalid\")  # Will raise ValidationError\nexcept ValidationError as e:\n    print(f\"Validation error: {e}\")\n</code></pre>"},{"location":"fields/validation/#select-field-validation","title":"Select Field Validation","text":"<pre><code># Create a single select field\nselect_field = client.fields.create(\n    table_id=\"table_id\",\n    name=\"Status\",\n    field_type=FieldType.SINGLE_SELECT,\n    options={\n        \"choices\": [\"Active\", \"Pending\", \"Completed\"]\n    }\n)\n\n# Validate select values\ntry:\n    select_field.validate_value(\"Active\")  # Valid\n    select_field.validate_value(\"Invalid Status\")  # Will raise ValidationError\nexcept ValidationError as e:\n    print(f\"Validation error: {e}\")\n</code></pre>"},{"location":"fields/validation/#date-field-validation","title":"Date Field Validation","text":"<pre><code># Create a date field\ndate_field = client.fields.create(\n    table_id=\"table_id\",\n    name=\"Due Date\",\n    field_type=FieldType.DATE,\n    options={\n        \"format\": \"YYYY-MM-DD\",\n        \"include_time\": True\n    }\n)\n\n# Validate date values\ntry:\n    date_field.validate_value(\"2024-01-23\")  # Valid\n    date_field.validate_value(\"invalid date\")  # Will raise ValidationError\nexcept ValidationError as e:\n    print(f\"Validation error: {e}\")\n</code></pre>"},{"location":"fields/validation/#record-validation","title":"Record Validation","text":""},{"location":"fields/validation/#validating-record-fields","title":"Validating Record Fields","text":"<pre><code>from teable.exceptions import ValidationError\n\n# Get a table\ntable = client.tables.get(\"table_id\")\n\n# Validate record fields\ntry:\n    table.validate_record_fields({\n        \"Name\": \"John Doe\",\n        \"Score\": 75.50,\n        \"Status\": \"Active\",\n        \"Due Date\": \"2024-01-23\"\n    })\n    print(\"Record is valid\")\nexcept ValidationError as e:\n    print(f\"Validation error: {e}\")\n</code></pre>"},{"location":"fields/validation/#batch-record-validation","title":"Batch Record Validation","text":"<pre><code>def validate_records(table, records):\n    \"\"\"Validate multiple records.\"\"\"\n    results = {\n        'valid': [],\n        'invalid': []\n    }\n\n    for record in records:\n        try:\n            table.validate_record_fields(record)\n            results['valid'].append(record)\n        except ValidationError as e:\n            results['invalid'].append({\n                'record': record,\n                'error': str(e)\n            })\n\n    return results\n\n# Use the validation function\nrecords = [\n    {\n        \"Name\": \"John Doe\",\n        \"Score\": 75.50,\n        \"Status\": \"Active\"\n    },\n    {\n        \"Name\": \"Jane Smith\",\n        \"Score\": \"invalid\",  # Invalid score\n        \"Status\": \"Unknown\"  # Invalid status\n    }\n]\n\nresults = validate_records(table, records)\nprint(f\"Valid records: {len(results['valid'])}\")\nprint(f\"Invalid records: {len(results['invalid'])}\")\n</code></pre>"},{"location":"fields/validation/#best-practices","title":"Best Practices","text":"<ol> <li>Field Validation</li> <li>Use appropriate field types for data</li> <li>Set required fields appropriately</li> <li>Configure field options correctly</li> <li> <p>Validate data before saving</p> </li> <li> <p>Error Handling</p> </li> <li>Implement comprehensive error handling</li> <li>Provide meaningful error messages</li> <li>Log validation failures</li> <li> <p>Handle validation errors gracefully</p> </li> <li> <p>Performance</p> </li> <li>Use batch validation for multiple records</li> <li>Validate data early in the process</li> <li>Handle validation efficiently</li> <li>Monitor validation performance</li> </ol>"},{"location":"fields/validation/#next-steps","title":"Next Steps","text":"<ul> <li>Field Configuration</li> <li>Table Management</li> <li>Record Operations</li> <li>Error Handling</li> </ul>"},{"location":"getting-started/installation/","title":"Installation Guide","text":"<p>This guide will walk you through the process of installing and configuring the Teable Client Library.</p>"},{"location":"getting-started/installation/#system-requirements","title":"System Requirements","text":"<p>Before installing the Teable Client Library, ensure your system meets these requirements:</p> <ul> <li>Python 3.7 or higher</li> <li>pip (Python package installer)</li> <li>Access to a Teable instance</li> <li>Teable API key</li> <li>For advanced operations: Teable account credentials</li> </ul>"},{"location":"getting-started/installation/#installation-methods","title":"Installation Methods","text":""},{"location":"getting-started/installation/#1-using-pip-recommended","title":"1. Using pip (Recommended)","text":"<p>The simplest way to install the Teable Client Library is using pip:</p> <pre><code>pip install teable-client\n</code></pre>"},{"location":"getting-started/installation/#2-installing-from-source","title":"2. Installing from Source","text":"<p>For the latest development version, you can install directly from the source:</p> <pre><code>git clone https://github.com/your-organization/teable-client.git\ncd teable-client\npip install -e .\n</code></pre>"},{"location":"getting-started/installation/#environment-setup","title":"Environment Setup","text":""},{"location":"getting-started/installation/#1-api-key-configuration","title":"1. API Key Configuration","text":"<p>You'll need a Teable API key to use the library. There are several ways to configure it:</p>"},{"location":"getting-started/installation/#option-1-environment-variables","title":"Option 1: Environment Variables","text":"<p>Create a <code>.env</code> file in your project root:</p> <pre><code>TEABLE_API_KEY=your_api_key_here\nTEABLE_API_URL=https://api.teable.io  # Optional, defaults to this value\n</code></pre> <p>Then in your code:</p> <pre><code>from teable import TeableClient\nclient = TeableClient.from_env()\n</code></pre>"},{"location":"getting-started/installation/#option-2-direct-configuration","title":"Option 2: Direct Configuration","text":"<pre><code>from teable import TeableClient, TeableConfig\n\nconfig = TeableConfig(\n    api_key=\"your_api_key_here\",\n    api_url=\"https://api.teable.io\"  # Optional\n)\nclient = TeableClient(config)\n</code></pre>"},{"location":"getting-started/installation/#2-authentication-setup","title":"2. Authentication Setup","text":"<p>For operations requiring full access (like space management), you'll need to authenticate:</p> <pre><code># After client initialization\nclient.auth.signin(\n    email=\"your-email@example.com\",\n    password=\"your-password\"\n)\n</code></pre>"},{"location":"getting-started/installation/#verification","title":"Verification","text":"<p>To verify your installation and configuration:</p> <pre><code>from teable import TeableClient, TeableConfig\n\n# Initialize client\nconfig = TeableConfig(\n    api_key=\"your_api_key_here\"\n)\nclient = TeableClient(config)\n\n# Test authentication\ntry:\n    # Sign in (required for full access)\n    client.auth.signin(\n        email=\"your-email@example.com\",\n        password=\"your-password\"\n    )\n    print(\"Authentication successful!\")\n\n    # Test API access\n    spaces = client.spaces.get_spaces()\n    print(f\"Found {len(spaces)} spaces\")\n\nexcept Exception as e:\n    print(f\"Setup verification failed: {str(e)}\")\n</code></pre>"},{"location":"getting-started/installation/#development-installation","title":"Development Installation","text":"<p>If you're planning to contribute to the library or need to run tests:</p> <ol> <li> <p>Clone the repository: <pre><code>git clone https://github.com/your-organization/teable-client.git\ncd teable-client\n</code></pre></p> </li> <li> <p>Install development dependencies: <pre><code>pip install -r requirements-test.txt\n</code></pre></p> </li> <li> <p>Set up test environment: Create a <code>.env</code> file in the <code>tests</code> directory: <pre><code>TEABLE_API_KEY=your_api_key_here\nTEABLE_API_URL=https://api.teable.io\nTEABLE_EMAIL=your-email@example.com\nTEABLE_PASSWORD=your-password\n</code></pre></p> </li> <li> <p>Run tests: <pre><code>pytest tests/\n</code></pre></p> </li> </ol>"},{"location":"getting-started/installation/#troubleshooting","title":"Troubleshooting","text":""},{"location":"getting-started/installation/#common-issues","title":"Common Issues","text":"<ol> <li>ImportError: No module named 'teable'</li> <li>Verify the installation: <code>pip list | grep teable</code></li> <li> <p>Try reinstalling: <code>pip install --force-reinstall teable-client</code></p> </li> <li> <p>Authentication Errors</p> </li> <li>Verify your API key is correct</li> <li>Check if your account credentials are valid</li> <li> <p>Ensure you're using the correct API URL</p> </li> <li> <p>Permission Errors</p> </li> <li>Verify you've signed in for operations requiring authentication</li> <li>Check your account has the necessary permissions</li> </ol>"},{"location":"getting-started/installation/#getting-help","title":"Getting Help","text":"<p>If you encounter issues:</p> <ol> <li>Check the error handling documentation</li> <li>Review the API Reference</li> <li>Search existing GitHub issues</li> <li>Create a new issue with:</li> <li>Python version</li> <li>Library version</li> <li>Error message</li> <li>Minimal code example</li> </ol>"},{"location":"getting-started/installation/#next-steps","title":"Next Steps","text":"<p>Once you've completed the installation:</p> <ol> <li>Follow the Quickstart Guide</li> <li>Review Best Practices</li> <li>Explore the API Reference</li> </ol>"},{"location":"getting-started/quickstart/","title":"Quickstart Guide","text":"<p>This guide will help you get started with the Teable Client Library through practical examples.</p>"},{"location":"getting-started/quickstart/#basic-setup","title":"Basic Setup","text":"<p>First, import the necessary classes and create a client instance:</p> <pre><code>from teable import TeableClient, TeableConfig\n\n# Initialize client with API key\nclient = TeableClient(TeableConfig(\n    api_key=\"your_api_key_here\",\n    api_url=\"https://api.teable.io\"\n))\n\n# Sign in for full access\nclient.auth.signin(\n    email=\"your-email@example.com\",\n    password=\"your-password\"\n)\n\n# Get current user info\nuser = client.auth.get_user()\nprint(f\"Signed in as: {user.email}\")\n</code></pre>"},{"location":"getting-started/quickstart/#working-with-spaces","title":"Working with Spaces","text":"<p>Spaces are the top-level containers in Teable:</p> <pre><code># Create a new space\nspace = client.spaces.create_space(name=\"My Project Space\")\n\n# List all spaces\nspaces = client.spaces.get_spaces()\nfor space in spaces:\n    print(f\"Space: {space.name} (ID: {space.space_id})\")\n\n# Get a specific space\nspace = client.spaces.get_space(\"space_id\")\n\n# Create an invitation link\ninvitation = space.create_invitation_link(role=\"editor\")\nprint(f\"Invitation URL: {invitation.invite_url}\")\n\n# Invite users by email\nspace.invite_by_email(\n    emails=[\"user@example.com\"],\n    role=\"editor\"\n)\n</code></pre>"},{"location":"getting-started/quickstart/#managing-tables","title":"Managing Tables","text":"<p>Tables store your data with specific field types and configurations:</p> <pre><code># Create a table with fields\ntable = client.tables.create_table(\n    base_id=\"base_id\",\n    name=\"Employees\",\n    db_table_name=\"employees\",  # Must be 1-63 chars, start with letter\n    description=\"Employee records\",\n    fields=[\n        {\n            \"name\": \"Name\",\n            \"type\": \"singleLineText\",\n            \"required\": True\n        },\n        {\n            \"name\": \"Email\",\n            \"type\": \"singleLineText\"\n        },\n        {\n            \"name\": \"Age\",\n            \"type\": \"number\",\n            \"precision\": 0\n        }\n    ]\n)\n\n# Get table fields\nfields = table.fields\nfor field in fields:\n    print(f\"Field: {field.name} ({field.field_type})\")\n</code></pre>"},{"location":"getting-started/quickstart/#managing-records","title":"Managing Records","text":"<p>Records are individual data entries in a table:</p> <pre><code># Create a single record\nrecord = table.create_record({\n    \"Name\": \"John Doe\",\n    \"Email\": \"john@example.com\",\n    \"Age\": 30\n})\n\n# Batch create records\nrecords_data = [\n    {\"Name\": \"Alice Smith\", \"Email\": \"alice@example.com\", \"Age\": 25},\n    {\"Name\": \"Bob Johnson\", \"Email\": \"bob@example.com\", \"Age\": 35}\n]\nbatch_result = table.batch_create_records(\n    records_data,\n    field_key_type=\"name\",  # Use field names instead of IDs\n    typecast=True  # Enable automatic type conversion\n)\nprint(f\"Created {batch_result.success_count} records\")\n\n# Query records with filtering\nfilter_data = {\n    \"filterSet\": [\n        {\n            \"fieldId\": \"Age\",\n            \"operator\": \"isGreaterEqual\",\n            \"value\": 30\n        }\n    ],\n    \"conjunction\": \"and\"\n}\n\n# Get records with various parameters\nrecords = table.get_records(\n    field_key_type=\"name\",\n    filter=filter_data,\n    take=100,  # Pagination: records per page\n    skip=0,    # Pagination: records to skip\n    cell_format=\"json\"  # Response format (json or text)\n)\n\n# Search records\nsearch_params = [{\n    \"value\": \"John\",\n    \"field\": \"Name\",\n    \"exact\": True\n}]\n\nsearch_results = table.get_records(\n    search=search_params,\n    field_key_type=\"name\"\n)\n\n# Update records\nupdated_record = table.update_record(\n    record.record_id,\n    {\"Age\": 31}\n)\n\n# Batch update records\nupdates = [\n    {\n        \"id\": record.record_id,\n        \"fields\": {\"Age\": record.fields[\"Age\"] + 1}\n    }\n    for record in records\n]\n\nupdated_records = table.batch_update_records(\n    updates,\n    field_key_type=\"name\",\n    typecast=True\n)\n\n# Delete records\ntable.delete_record(record.record_id)\n\n# Batch delete records\nrecord_ids = [record.record_id for record in records]\ntable.batch_delete_records(record_ids)\n</code></pre>"},{"location":"getting-started/quickstart/#working-with-views","title":"Working with Views","text":"<p>Views provide different ways to visualize and filter table data:</p> <pre><code># Create a view\nview = table.create_view({\n    \"name\": \"Age Filter View\",\n    \"type\": \"grid\",\n    \"filter\": {\n        \"filterSet\": [\n            {\n                \"fieldId\": \"Age\",\n                \"operator\": \"isGreaterEqual\",\n                \"value\": 30\n            }\n        ],\n        \"conjunction\": \"and\"\n    }\n})\n\n# Get all views\nviews = table.views\nfor view in views:\n    print(f\"View: {view.name} (Type: {view.view_type})\")\n\n# Get default view ID\ndefault_view_id = client.tables.get_table_default_view_id(\n    base_id=\"base_id\",\n    table_id=table.table_id\n)\n</code></pre>"},{"location":"getting-started/quickstart/#error-handling","title":"Error Handling","text":"<p>Always handle potential errors in your code:</p> <pre><code>from teable.exceptions import ValidationError, APIError\n\ntry:\n    # Attempt to create a record with invalid data\n    record = table.create_record({\n        \"Name\": \"\",  # Required field is empty\n        \"Email\": \"invalid-email\"\n    })\nexcept ValidationError as e:\n    print(f\"Validation error: {str(e)}\")\nexcept APIError as e:\n    print(f\"API error: {str(e)}\")\n    print(f\"Status code: {e.status_code}\")\n    print(f\"Error details: {e.details}\")\nexcept Exception as e:\n    print(f\"Unexpected error: {str(e)}\")\n</code></pre>"},{"location":"getting-started/quickstart/#resource-management","title":"Resource Management","text":"<p>Always clean up resources when done:</p> <pre><code>try:\n    # Perform operations\n    space = client.spaces.create_space(name=\"Temporary Space\")\n    base = space.create_base(name=\"Temporary Base\")\n    # ... more operations ...\nfinally:\n    # Clean up\n    if base:\n        base.delete()\n    if space:\n        client.spaces.permanently_delete_space(space.space_id)\n    # Sign out\n    client.auth.signout()\n</code></pre>"},{"location":"getting-started/quickstart/#best-practices","title":"Best Practices","text":"<ol> <li>Authentication:</li> <li>Always sign in for operations requiring full access</li> <li>Handle authentication errors appropriately</li> <li> <p>Sign out when done</p> </li> <li> <p>Resource Management:</p> </li> <li>Use batch operations for multiple records</li> <li>Clean up temporary resources</li> <li> <p>Implement proper error handling</p> </li> <li> <p>Performance:</p> </li> <li>Use pagination for large datasets</li> <li>Implement caching where appropriate</li> <li> <p>Use field projections to limit data transfer</p> </li> <li> <p>Error Handling:</p> </li> <li>Catch specific exceptions</li> <li>Implement retry logic for transient failures</li> <li>Log errors appropriately</li> </ol>"},{"location":"getting-started/quickstart/#next-steps","title":"Next Steps","text":"<ul> <li>Learn about Authentication</li> <li>Explore Error Handling</li> <li>Review Best Practices</li> <li>Check the API Reference</li> </ul>"},{"location":"integration/sync/","title":"Data Synchronization","text":"<p>This guide covers data synchronization capabilities in Teable, including real-time sync, batch synchronization, and integration patterns.</p>"},{"location":"integration/sync/#real-time-synchronization","title":"Real-time Synchronization","text":""},{"location":"integration/sync/#watching-for-changes","title":"Watching for Changes","text":"<pre><code>from teable import TeableClient, TeableConfig\n\n# Initialize the client\nclient = TeableClient(TeableConfig(\n    api_url=\"https://your-teable-instance.com/api\",\n    api_key=\"your-api-key\"\n))\n\n# Get your table\ntable = client.get_table(\"table_id\")\n\n# Set up change listener\ndef handle_change(change_event):\n    \"\"\"Handle table changes.\"\"\"\n    event_type = change_event['type']  # 'create', 'update', or 'delete'\n    record_id = change_event['recordId']\n    changes = change_event.get('changes', {})\n\n    print(f\"Event type: {event_type}\")\n    print(f\"Record ID: {record_id}\")\n    print(f\"Changes: {changes}\")\n\n# Start watching for changes\ntable.watch(callback=handle_change)\n</code></pre>"},{"location":"integration/sync/#real-time-updates","title":"Real-time Updates","text":"<pre><code># Sync handler with real-time updates\ndef sync_handler(change_event):\n    \"\"\"Handle sync events.\"\"\"\n    if change_event['type'] == 'create':\n        # Handle new record\n        sync_new_record(change_event['record'])\n    elif change_event['type'] == 'update':\n        # Handle updated record\n        sync_updated_record(\n            change_event['recordId'],\n            change_event['changes']\n        )\n    elif change_event['type'] == 'delete':\n        # Handle deleted record\n        sync_deleted_record(change_event['recordId'])\n\ndef sync_new_record(record):\n    \"\"\"Sync new record to external system.\"\"\"\n    # Implement sync logic\n    pass\n\ndef sync_updated_record(record_id, changes):\n    \"\"\"Sync record updates to external system.\"\"\"\n    # Implement sync logic\n    pass\n\ndef sync_deleted_record(record_id):\n    \"\"\"Handle deleted record in external system.\"\"\"\n    # Implement sync logic\n    pass\n</code></pre>"},{"location":"integration/sync/#batch-synchronization","title":"Batch Synchronization","text":""},{"location":"integration/sync/#full-sync","title":"Full Sync","text":"<pre><code>def full_sync(source_table, target_table):\n    \"\"\"Perform full sync between tables.\"\"\"\n    # Get all records from source\n    source_records = source_table.get_records()\n\n    # Get existing records from target\n    target_records = {\n        record.record_id: record\n        for record in target_table.get_records()\n    }\n\n    # Prepare batches\n    to_create = []\n    to_update = []\n    to_delete = set(target_records.keys())\n\n    # Compare records\n    for record in source_records:\n        record_id = record.record_id\n        if record_id in target_records:\n            # Update existing record\n            if record.fields != target_records[record_id].fields:\n                to_update.append({\n                    'recordId': record_id,\n                    'fields': record.fields\n                })\n            to_delete.remove(record_id)\n        else:\n            # Create new record\n            to_create.append(record.fields)\n\n    # Execute changes\n    if to_create:\n        target_table.batch_create_records(to_create)\n    if to_update:\n        target_table.batch_update_records(to_update)\n    if to_delete:\n        target_table.batch_delete_records(list(to_delete))\n</code></pre>"},{"location":"integration/sync/#incremental-sync","title":"Incremental Sync","text":"<pre><code>def incremental_sync(source_table, target_table, last_sync_time):\n    \"\"\"Perform incremental sync between tables.\"\"\"\n    # Get records modified since last sync\n    modified_records = source_table.get_records(\n        filter={\n            \"field\": \"last_modified_time\",\n            \"operator\": \"&gt;\",\n            \"value\": last_sync_time\n        }\n    )\n\n    # Prepare batches\n    to_create = []\n    to_update = []\n\n    # Get existing record IDs\n    existing_ids = {\n        record.record_id\n        for record in target_table.get_records(\n            projection=[\"record_id\"]\n        )\n    }\n\n    # Sort records\n    for record in modified_records:\n        if record.record_id in existing_ids:\n            to_update.append({\n                'recordId': record.record_id,\n                'fields': record.fields\n            })\n        else:\n            to_create.append(record.fields)\n\n    # Execute changes\n    if to_create:\n        target_table.batch_create_records(to_create)\n    if to_update:\n        target_table.batch_update_records(to_update)\n\n    return modified_records[-1].last_modified_time if modified_records else last_sync_time\n</code></pre>"},{"location":"integration/sync/#integration-patterns","title":"Integration Patterns","text":""},{"location":"integration/sync/#external-system-integration","title":"External System Integration","text":"<pre><code>class ExternalSystemSync:\n    \"\"\"Sync manager for external system integration.\"\"\"\n\n    def __init__(self, table, external_client):\n        self.table = table\n        self.external_client = external_client\n        self.sync_status = {}\n\n    def start_sync(self):\n        \"\"\"Start synchronization process.\"\"\"\n        # Set up change listener\n        self.table.watch(callback=self.handle_change)\n\n    def handle_change(self, change_event):\n        \"\"\"Handle table changes.\"\"\"\n        try:\n            if change_event['type'] == 'create':\n                self.sync_to_external(change_event['record'])\n            elif change_event['type'] == 'update':\n                self.update_external(\n                    change_event['recordId'],\n                    change_event['changes']\n                )\n            elif change_event['type'] == 'delete':\n                self.delete_from_external(change_event['recordId'])\n\n            self.sync_status[change_event['recordId']] = {\n                'status': 'success',\n                'timestamp': datetime.now()\n            }\n\n        except Exception as e:\n            self.sync_status[change_event['recordId']] = {\n                'status': 'error',\n                'error': str(e),\n                'timestamp': datetime.now()\n            }\n\n    def sync_to_external(self, record):\n        \"\"\"Sync record to external system.\"\"\"\n        # Implement external system sync\n        pass\n\n    def update_external(self, record_id, changes):\n        \"\"\"Update record in external system.\"\"\"\n        # Implement external system update\n        pass\n\n    def delete_from_external(self, record_id):\n        \"\"\"Delete record from external system.\"\"\"\n        # Implement external system deletion\n        pass\n</code></pre>"},{"location":"integration/sync/#best-practices","title":"Best Practices","text":"<ol> <li>Sync Design</li> <li>Use appropriate sync patterns</li> <li>Handle conflicts gracefully</li> <li>Implement error recovery</li> <li> <p>Monitor sync status</p> </li> <li> <p>Performance</p> </li> <li>Use batch operations</li> <li>Implement incremental sync</li> <li>Optimize data transfer</li> <li> <p>Monitor sync performance</p> </li> <li> <p>Error Handling</p> </li> <li>Implement retry logic</li> <li>Log sync failures</li> <li>Provide status updates</li> <li> <p>Handle edge cases</p> </li> <li> <p>Maintenance</p> </li> <li>Regular sync audits</li> <li>Monitor sync logs</li> <li>Clean up sync data</li> <li>Update sync configurations</li> </ol>"},{"location":"integration/sync/#next-steps","title":"Next Steps","text":"<ul> <li>Workflow Automation</li> <li>Error Handling</li> <li>Best Practices</li> <li>API Reference</li> </ul>"},{"location":"records/bulk-operations/","title":"Bulk Operations","text":"<p>This guide covers all batch operations available in the Teable Client Library for efficient handling of multiple records.</p>"},{"location":"records/bulk-operations/#batch-creation","title":"Batch Creation","text":""},{"location":"records/bulk-operations/#basic-batch-creation","title":"Basic Batch Creation","text":"<pre><code>from teable import TeableClient, TeableConfig\n\n# Initialize client\nclient = TeableClient(TeableConfig(api_key=\"your_api_key\"))\n\n# Prepare records data\nrecords_data = [\n    {\n        \"Name\": \"Alice Smith\",\n        \"Email\": \"alice@example.com\",\n        \"Age\": 25\n    },\n    {\n        \"Name\": \"Bob Johnson\",\n        \"Email\": \"bob@example.com\",\n        \"Age\": 35\n    }\n]\n\n# Create multiple records at once\nbatch_result = client.records.batch_create_records(\n    table_id=\"table_id\",\n    records=records_data,\n    field_key_type=\"name\",  # Use field names instead of IDs\n    typecast=True  # Enable automatic type conversion\n)\n\nprint(f\"Successfully created {batch_result.success_count} records\")\nif batch_result.failure_count &gt; 0:\n    print(f\"Failed to create {batch_result.failure_count} records\")\n    for error in batch_result.errors:\n        print(f\"Error in record {error.index}: {error.message}\")\n</code></pre>"},{"location":"records/bulk-operations/#batch-creation-with-ordering","title":"Batch Creation with Ordering","text":"<pre><code># Create records with specific ordering\nbatch_result = client.records.batch_create_records(\n    table_id=\"table_id\",\n    records=records_data,\n    field_key_type=\"name\",\n    typecast=True,\n    order={\n        \"viewId\": \"view_id\",\n        \"position\": \"after\",\n        \"recordId\": \"anchor_record_id\"\n    }\n)\n</code></pre>"},{"location":"records/bulk-operations/#batch-updates","title":"Batch Updates","text":""},{"location":"records/bulk-operations/#basic-batch-update","title":"Basic Batch Update","text":"<pre><code># Prepare update data\nupdates = [\n    {\n        \"id\": \"record1_id\",\n        \"fields\": {\n            \"Status\": \"Completed\",\n            \"Progress\": 100\n        }\n    },\n    {\n        \"id\": \"record2_id\",\n        \"fields\": {\n            \"Status\": \"In Progress\",\n            \"Progress\": 50\n        }\n    }\n]\n\n# Update multiple records at once\nupdated_records = client.records.batch_update_records(\n    table_id=\"table_id\",\n    updates=updates,\n    field_key_type=\"name\",\n    typecast=True\n)\n</code></pre>"},{"location":"records/bulk-operations/#batch-update-with-ordering","title":"Batch Update with Ordering","text":"<pre><code># Update records with specific ordering\nupdated_records = client.records.batch_update_records(\n    table_id=\"table_id\",\n    updates=updates,\n    field_key_type=\"name\",\n    typecast=True,\n    order={\n        \"viewId\": \"view_id\",\n        \"position\": \"after\",\n        \"recordId\": \"anchor_record_id\"\n    }\n)\n</code></pre>"},{"location":"records/bulk-operations/#batch-deletion","title":"Batch Deletion","text":"<pre><code># Delete multiple records at once\nrecord_ids = [\"record1_id\", \"record2_id\", \"record3_id\"]\n\nsuccess = client.records.batch_delete_records(\n    table_id=\"table_id\",\n    record_ids=record_ids\n)\n</code></pre>"},{"location":"records/bulk-operations/#validation-rules","title":"Validation Rules","text":""},{"location":"records/bulk-operations/#batch-size-limits","title":"Batch Size Limits","text":"<pre><code># Maximum 2000 records per batch operation\ntry:\n    records = [{\"fields\": {}} for _ in range(2001)]  # Too many records\n    client.records.batch_create_records(\n        table_id=\"table_id\",\n        records=records\n    )\nexcept ValidationError as e:\n    print(f\"Validation error: {str(e)}\")\n</code></pre>"},{"location":"records/bulk-operations/#field-validation","title":"Field Validation","text":"<pre><code>def validate_batch_data(records):\n    \"\"\"Validate batch data before sending to API.\"\"\"\n    for i, record in enumerate(records):\n        if not isinstance(record, dict):\n            raise ValidationError(f\"Record {i} must be a dictionary\")\n\n        if \"fields\" not in record:\n            raise ValidationError(f\"Record {i} missing 'fields' key\")\n\n        fields = record[\"fields\"]\n        if not isinstance(fields, dict):\n            raise ValidationError(f\"Fields in record {i} must be a dictionary\")\n\n        # Validate required fields\n        if \"Name\" in fields and not fields[\"Name\"]:\n            raise ValidationError(f\"Name in record {i} cannot be empty\")\n\n        # Validate email format\n        if \"Email\" in fields:\n            email = fields[\"Email\"]\n            if not \"@\" in email:\n                raise ValidationError(f\"Invalid email in record {i}\")\n\n# Use validation\ntry:\n    validate_batch_data(records_data)\n    batch_result = client.records.batch_create_records(\n        table_id=\"table_id\",\n        records=records_data\n    )\nexcept ValidationError as e:\n    print(f\"Validation failed: {str(e)}\")\n</code></pre>"},{"location":"records/bulk-operations/#error-handling","title":"Error Handling","text":""},{"location":"records/bulk-operations/#basic-error-handling","title":"Basic Error Handling","text":"<pre><code>from teable.exceptions import ValidationError, APIError\n\ntry:\n    batch_result = client.records.batch_create_records(\n        table_id=\"table_id\",\n        records=records_data\n    )\nexcept ValidationError as e:\n    print(f\"Validation error: {str(e)}\")\nexcept APIError as e:\n    print(f\"API error: {str(e)}\")\n    print(f\"Status code: {e.status_code}\")\n    print(f\"Error details: {e.details}\")\n</code></pre>"},{"location":"records/bulk-operations/#handling-partial-success","title":"Handling Partial Success","text":"<pre><code>def handle_batch_operation(client, table_id, records):\n    \"\"\"Handle batch operation with partial success tracking.\"\"\"\n    try:\n        batch_result = client.records.batch_create_records(\n            table_id=table_id,\n            records=records\n        )\n\n        # Handle successful records\n        if batch_result.success_count &gt; 0:\n            print(f\"Successfully processed {batch_result.success_count} records\")\n\n        # Handle failed records\n        if batch_result.failure_count &gt; 0:\n            print(f\"Failed to process {batch_result.failure_count} records\")\n            failed_records = []\n\n            for error in batch_result.errors:\n                print(f\"Record {error.index}: {error.message}\")\n                failed_records.append(records[error.index])\n\n            # Implement retry logic for failed records\n            return retry_failed_records(client, table_id, failed_records)\n\n        return batch_result\n\n    except APIError as e:\n        print(f\"Batch operation failed: {str(e)}\")\n        raise\n</code></pre>"},{"location":"records/bulk-operations/#best-practices","title":"Best Practices","text":""},{"location":"records/bulk-operations/#1-process-in-batches","title":"1. Process in Batches","text":"<pre><code>def process_large_dataset(client, table_id, records, batch_size=500):\n    \"\"\"Process large number of records in batches.\"\"\"\n    results = []\n\n    # Split into smaller batches\n    for i in range(0, len(records), batch_size):\n        batch = records[i:i + batch_size]\n        try:\n            batch_result = client.records.batch_create_records(\n                table_id=table_id,\n                records=batch\n            )\n            results.append(batch_result)\n\n        except APIError as e:\n            print(f\"Batch {i//batch_size + 1} failed: {str(e)}\")\n            # Handle error or retry\n\n    return results\n</code></pre>"},{"location":"records/bulk-operations/#2-implement-retry-logic","title":"2. Implement Retry Logic","text":"<pre><code>import time\nfrom teable.exceptions import APIError\n\ndef retry_batch_operation(operation, max_retries=3):\n    \"\"\"Retry batch operation with exponential backoff.\"\"\"\n    for attempt in range(max_retries):\n        try:\n            return operation()\n        except APIError as e:\n            if e.status_code == 429:  # Rate limit\n                if attempt &lt; max_retries - 1:\n                    time.sleep(2 ** attempt)  # Exponential backoff\n                    continue\n            raise\n    raise Exception(\"Max retries exceeded\")\n\n# Usage\nbatch_result = retry_batch_operation(\n    lambda: client.records.batch_create_records(\n        table_id=table_id,\n        records=records_data\n    )\n)\n</code></pre>"},{"location":"records/bulk-operations/#3-validate-before-processing","title":"3. Validate Before Processing","text":"<pre><code>def validate_and_process(client, table_id, records):\n    \"\"\"Validate and process records with error handling.\"\"\"\n    # Group records by operation type\n    to_create = []\n    to_update = []\n    to_delete = []\n\n    for record in records:\n        try:\n            if \"id\" not in record:\n                # New record\n                validate_creation_data(record)\n                to_create.append(record)\n            elif record.get(\"_delete\"):\n                # Record to delete\n                validate_record_id(record[\"id\"])\n                to_delete.append(record[\"id\"])\n            else:\n                # Record to update\n                validate_update_data(record)\n                to_update.append(record)\n\n        except ValidationError as e:\n            print(f\"Validation failed for record: {str(e)}\")\n            continue\n\n    # Process each group\n    results = {\n        \"created\": [],\n        \"updated\": [],\n        \"deleted\": [],\n        \"failed\": []\n    }\n\n    if to_create:\n        try:\n            batch_result = client.records.batch_create_records(\n                table_id=table_id,\n                records=to_create\n            )\n            results[\"created\"] = batch_result.successful\n        except APIError as e:\n            print(f\"Creation failed: {str(e)}\")\n\n    if to_update:\n        try:\n            updated = client.records.batch_update_records(\n                table_id=table_id,\n                updates=to_update\n            )\n            results[\"updated\"] = updated\n        except APIError as e:\n            print(f\"Update failed: {str(e)}\")\n\n    if to_delete:\n        try:\n            success = client.records.batch_delete_records(\n                table_id=table_id,\n                record_ids=to_delete\n            )\n            if success:\n                results[\"deleted\"] = to_delete\n        except APIError as e:\n            print(f\"Deletion failed: {str(e)}\")\n\n    return results\n</code></pre>"},{"location":"records/bulk-operations/#4-monitor-progress","title":"4. Monitor Progress","text":"<p>```python from datetime import datetime</p> <p>def process_with_monitoring(client, table_id, records, batch_size=500):     \"\"\"Process records with progress monitoring.\"\"\"     start_time = datetime.now()     total_batches = (len(records) + batch_size - 1) // batch_size     processed = 0</p> <pre><code>print(f\"Starting batch processing of {len(records)} records\")\n\nfor i in range(0, len(records), batch_size):\n    batch_start = datetime.now()\n    batch = records[i:i + batch_size]\n\n    try:\n        batch_result = client.records.batch_create_records(\n            table_id=table_id,\n            records=batch\n        )\n        processed += batch_result.success_count\n\n        # Calculate progress\n        batch_num = i // batch_size + 1\n        progress = (batch_num / total_batches) * 100\n        elapsed = datetime.now() - start_time\n        batch_time = datetime.now() - batch_start\n\n        print(f\"Batch {batch_num}/{total_batches} ({progress:.1f}%)\")\n        print(f\"Processed: {processed}/{len(records)}\")\n        print(f\"Batch time: {batch_time}\")\n        print(f\"Total time: {elapsed}\")\n\n    except APIError as e:\n        print(f\"Batch {batch_num} failed: {str(e)}\")\n\ntotal_time = datetime.now() - start_time\nprint(f\"\\nProcessing complete:\")\nprint(f\"Total records: {len(records)}\")\nprint(f\"Successfully processed: {processed}\")\nprint(f\"Total time: {total_time}\")\n</code></pre>"},{"location":"records/create/","title":"Creating Records","text":"<p>This guide covers all methods for creating records in Teable tables.</p>"},{"location":"records/create/#single-record-creation","title":"Single Record Creation","text":"<pre><code>from teable import TeableClient, TeableConfig\n\n# Initialize client\nclient = TeableClient(TeableConfig(api_key=\"your_api_key\"))\n\n# Create a single record\nrecord = client.records.create_record(\n    table_id=\"table_id\",\n    fields={\n        \"Name\": \"John Doe\",\n        \"Email\": \"john@example.com\",\n        \"Age\": 30\n    }\n)\n</code></pre>"},{"location":"records/create/#batch-record-creation","title":"Batch Record Creation","text":"<pre><code># Create multiple records at once\nrecords_data = [\n    {\n        \"Name\": \"Alice Smith\",\n        \"Email\": \"alice@example.com\",\n        \"Age\": 25\n    },\n    {\n        \"Name\": \"Bob Johnson\",\n        \"Email\": \"bob@example.com\",\n        \"Age\": 35\n    }\n]\n\nbatch_result = client.records.batch_create_records(\n    table_id=\"table_id\",\n    records=records_data,\n    field_key_type=\"name\",  # Use field names instead of IDs\n    typecast=True,  # Enable automatic type conversion\n    order={  # Optional ordering configuration\n        \"viewId\": \"view_id\",\n        \"position\": \"after\",\n        \"recordId\": \"anchor_record_id\"\n    }\n)\n\nprint(f\"Successfully created {batch_result.success_count} records\")\nif batch_result.failure_count &gt; 0:\n    print(f\"Failed to create {batch_result.failure_count} records\")\n    for error in batch_result.errors:\n        print(f\"Error in record {error.index}: {error.message}\")\n</code></pre>"},{"location":"records/create/#record-duplication","title":"Record Duplication","text":"<pre><code># Duplicate an existing record\nduplicated = client.records.duplicate_record(\n    table_id=\"table_id\",\n    record_id=\"record_to_duplicate\",\n    view_id=\"view_id\",\n    anchor_id=\"anchor_record_id\",\n    position=\"after\"  # 'before' or 'after'\n)\n</code></pre>"},{"location":"records/create/#attachment-upload","title":"Attachment Upload","text":"<pre><code># Upload file attachment\nwith open(\"document.pdf\", \"rb\") as f:\n    file_data = f.read()\n\nresult = client.records.upload_attachment(\n    table_id=\"table_id\",\n    record_id=\"record_id\",\n    field_id=\"attachment_field_id\",\n    file=file_data,\n    mime_type=\"application/pdf\"\n)\n\n# Or upload from URL\nresult = client.records.upload_attachment(\n    table_id=\"table_id\",\n    record_id=\"record_id\",\n    field_id=\"attachment_field_id\",\n    file_url=\"https://example.com/document.pdf\"\n)\n</code></pre>"},{"location":"records/create/#validation-rules","title":"Validation Rules","text":""},{"location":"records/create/#field-values","title":"Field Values","text":"<ul> <li>Must be provided as a dictionary</li> <li>Cannot be empty</li> <li>Keys must match field names or IDs (based on field_key_type)</li> <li>Values must match field type requirements</li> </ul> <pre><code># Example of field validation\ntry:\n    record = client.records.create_record(\n        table_id=\"table_id\",\n        fields={}  # Empty fields - will raise ValidationError\n    )\nexcept ValidationError as e:\n    print(f\"Validation error: {str(e)}\")\n</code></pre>"},{"location":"records/create/#batch-operations","title":"Batch Operations","text":"<ul> <li>Records must be provided as a list</li> <li>List cannot be empty</li> <li>Maximum 2000 records per batch operation</li> <li>Each record must follow field validation rules</li> </ul> <pre><code># Example of batch validation\ntry:\n    batch_result = client.records.batch_create_records(\n        table_id=\"table_id\",\n        records=[{} for _ in range(2001)]  # Too many records\n    )\nexcept ValidationError as e:\n    print(f\"Validation error: {str(e)}\")\n</code></pre>"},{"location":"records/create/#error-handling","title":"Error Handling","text":"<pre><code>from teable.exceptions import ValidationError, APIError\n\ntry:\n    record = client.records.create_record(\n        table_id=\"table_id\",\n        fields={\n            \"Name\": \"\",  # Empty required field\n            \"Email\": \"invalid-email\"\n        }\n    )\nexcept ValidationError as e:\n    print(f\"Validation error: {str(e)}\")\nexcept APIError as e:\n    print(f\"API error: {str(e)}\")\n    print(f\"Status code: {e.status_code}\")\n    print(f\"Error details: {e.details}\")\n</code></pre>"},{"location":"records/create/#best-practices","title":"Best Practices","text":""},{"location":"records/create/#1-use-batch-operations","title":"1. Use Batch Operations","text":"<pre><code># DON'T: Create records one by one\nfor data in records_data:\n    client.records.create_record(table_id, data)  # Inefficient\n\n# DO: Use batch creation\nbatch_result = client.records.batch_create_records(\n    table_id,\n    records_data\n)\n</code></pre>"},{"location":"records/create/#2-enable-typecast","title":"2. Enable Typecast","text":"<pre><code># Enable automatic type conversion\nbatch_result = client.records.batch_create_records(\n    table_id=\"table_id\",\n    records=records_data,\n    typecast=True  # Converts values to correct types\n)\n</code></pre>"},{"location":"records/create/#3-handle-partial-success","title":"3. Handle Partial Success","text":"<pre><code>batch_result = client.records.batch_create_records(\n    table_id=\"table_id\",\n    records=records_data\n)\n\n# Handle successful and failed records\nprint(f\"Created {batch_result.success_count} records\")\nif batch_result.failure_count &gt; 0:\n    print(f\"Failed to create {batch_result.failure_count} records:\")\n    for error in batch_result.errors:\n        print(f\"Record {error.index}: {error.message}\")\n        # Retry failed records or log errors\n</code></pre>"},{"location":"records/create/#4-implement-retry-logic","title":"4. Implement Retry Logic","text":"<pre><code>import time\nfrom teable.exceptions import APIError\n\ndef retry_batch_create(client, table_id, records, max_retries=3):\n    for attempt in range(max_retries):\n        try:\n            return client.records.batch_create_records(\n                table_id=table_id,\n                records=records\n            )\n        except APIError as e:\n            if e.status_code == 429:  # Rate limit\n                if attempt &lt; max_retries - 1:\n                    time.sleep(2 ** attempt)  # Exponential backoff\n                    continue\n            raise\n    raise Exception(\"Max retries exceeded\")\n</code></pre>"},{"location":"records/create/#5-validate-data-before-creation","title":"5. Validate Data Before Creation","text":"<p>```python def validate_record_data(data):     required_fields = [\"Name\", \"Email\"]     for field in required_fields:         if not data.get(field):             raise ValidationError(f\"Missing required field: {field}\")</p> <pre><code># Validate email format\nemail = data.get(\"Email\")\nif email and not \"@\" in email:\n    raise ValidationError(\"Invalid email format\")\n</code></pre>"},{"location":"records/create/#use-validation-before-creation","title":"Use validation before creation","text":"<p>try:     for record in records_data:         validate_record_data(record)</p> <pre><code>batch_result = client.records.batch_create_records(\n    table_id=\"table_id\",\n    records=records_data\n)\n</code></pre> <p>except ValidationError as e:     print(f\"Data validation failed: {str(e)}\")</p>"},{"location":"records/delete/","title":"Deleting Records","text":"<p>This guide covers all methods for deleting records from Teable tables.</p>"},{"location":"records/delete/#single-record-deletion","title":"Single Record Deletion","text":""},{"location":"records/delete/#basic-deletion","title":"Basic Deletion","text":"<pre><code>from teable import TeableClient, TeableConfig\n\n# Initialize client\nclient = TeableClient(TeableConfig(api_key=\"your_api_key\"))\n\n# Delete a single record\nsuccess = client.records.delete_record(\n    table_id=\"table_id\",\n    record_id=\"record_id\"\n)\n\nif success:\n    print(\"Record deleted successfully\")\n</code></pre>"},{"location":"records/delete/#batch-record-deletion","title":"Batch Record Deletion","text":""},{"location":"records/delete/#basic-batch-deletion","title":"Basic Batch Deletion","text":"<pre><code># Delete multiple records at once\nrecord_ids = [\"record1_id\", \"record2_id\", \"record3_id\"]\n\nsuccess = client.records.batch_delete_records(\n    table_id=\"table_id\",\n    record_ids=record_ids\n)\n\nif success:\n    print(\"Records deleted successfully\")\n</code></pre>"},{"location":"records/delete/#record-status-verification","title":"Record Status Verification","text":"<p>Before or after deletion, you can check a record's status:</p> <pre><code># Check record status\nstatus = client.records.get_record_status(\n    table_id=\"table_id\",\n    record_id=\"record_id\"\n)\n\nprint(f\"Is visible: {status.is_visible}\")\nprint(f\"Is deleted: {status.is_deleted}\")\n</code></pre>"},{"location":"records/delete/#error-handling","title":"Error Handling","text":"<pre><code>from teable.exceptions import ValidationError, APIError\n\ntry:\n    # Attempt to delete record\n    client.records.delete_record(\n        table_id=\"table_id\",\n        record_id=\"record_id\"\n    )\nexcept ValidationError as e:\n    print(f\"Validation error: {str(e)}\")\nexcept APIError as e:\n    if e.status_code == 404:\n        print(\"Record not found\")\n    else:\n        print(f\"API error: {str(e)}\")\n        print(f\"Status code: {e.status_code}\")\n        print(f\"Error details: {e.details}\")\n</code></pre>"},{"location":"records/delete/#best-practices","title":"Best Practices","text":""},{"location":"records/delete/#1-use-batch-deletion","title":"1. Use Batch Deletion","text":"<pre><code># DON'T: Delete records one by one\nfor record_id in record_ids:\n    client.records.delete_record(\n        table_id=\"table_id\",\n        record_id=record_id\n    )\n\n# DO: Use batch deletion\nclient.records.batch_delete_records(\n    table_id=\"table_id\",\n    record_ids=record_ids\n)\n</code></pre>"},{"location":"records/delete/#2-implement-retry-logic","title":"2. Implement Retry Logic","text":"<pre><code>import time\nfrom teable.exceptions import APIError\n\ndef retry_batch_delete(client, table_id, record_ids, max_retries=3):\n    \"\"\"Retry batch deletion with exponential backoff.\"\"\"\n    for attempt in range(max_retries):\n        try:\n            return client.records.batch_delete_records(\n                table_id=table_id,\n                record_ids=record_ids\n            )\n        except APIError as e:\n            if e.status_code == 429:  # Rate limit\n                if attempt &lt; max_retries - 1:\n                    time.sleep(2 ** attempt)  # Exponential backoff\n                    continue\n            raise\n    raise Exception(\"Max retries exceeded\")\n</code></pre>"},{"location":"records/delete/#3-validate-before-deletion","title":"3. Validate Before Deletion","text":"<pre><code>def validate_record_ids(client, table_id, record_ids):\n    \"\"\"Validate records exist before deletion.\"\"\"\n    invalid_ids = []\n    for record_id in record_ids:\n        try:\n            status = client.records.get_record_status(\n                table_id=table_id,\n                record_id=record_id\n            )\n            if status.is_deleted:\n                invalid_ids.append(record_id)\n        except APIError as e:\n            if e.status_code == 404:\n                invalid_ids.append(record_id)\n\n    if invalid_ids:\n        raise ValidationError(\n            f\"Records not found or already deleted: {invalid_ids}\"\n        )\n\n# Use validation before deletion\ntry:\n    validate_record_ids(client, table_id, record_ids)\n    client.records.batch_delete_records(\n        table_id=table_id,\n        record_ids=record_ids\n    )\nexcept ValidationError as e:\n    print(f\"Validation failed: {str(e)}\")\n</code></pre>"},{"location":"records/delete/#4-handle-large-deletions","title":"4. Handle Large Deletions","text":"<pre><code>def delete_records_in_batches(client, table_id, record_ids, batch_size=500):\n    \"\"\"Delete large number of records in batches.\"\"\"\n    results = []\n\n    # Split deletions into smaller batches\n    for i in range(0, len(record_ids), batch_size):\n        batch = record_ids[i:i + batch_size]\n        try:\n            success = client.records.batch_delete_records(\n                table_id=table_id,\n                record_ids=batch\n            )\n            if success:\n                results.extend(batch)\n\n        except APIError as e:\n            print(f\"Batch {i//batch_size + 1} failed: {str(e)}\")\n            # Handle error or retry\n\n    return results\n</code></pre>"},{"location":"records/delete/#5-track-deletion-history","title":"5. Track Deletion History","text":"<pre><code>def delete_with_history(client, table_id, record_id):\n    \"\"\"Delete record and log its history.\"\"\"\n    try:\n        # Get record history before deletion\n        history = client.records.get_record_history(\n            table_id=table_id,\n            record_id=record_id\n        )\n\n        # Store history for audit purposes\n        last_modified = history.entries[-1].created_time\n        modified_by = history.users[history.entries[-1].user_id].name\n\n        # Delete the record\n        success = client.records.delete_record(\n            table_id=table_id,\n            record_id=record_id\n        )\n\n        if success:\n            print(f\"Deleted record {record_id}\")\n            print(f\"Last modified: {last_modified}\")\n            print(f\"Modified by: {modified_by}\")\n\n        return success\n\n    except APIError as e:\n        print(f\"Deletion failed: {str(e)}\")\n        raise\n</code></pre>"},{"location":"records/delete/#6-implement-soft-delete","title":"6. Implement Soft Delete","text":"<p>If you need to implement a soft delete mechanism:</p> <p>```python def soft_delete_record(client, table_id, record_id):     \"\"\"Mark record as deleted without actually deleting it.\"\"\"     try:         # Update record status instead of deleting         client.records.update_record(             table_id=table_id,             record_id=record_id,             fields={                 \"is_deleted\": True,                 \"deleted_at\": datetime.now().isoformat(),                 \"deleted_by\": client.auth.get_user().user_id             }         )         return True</p> <pre><code>except APIError as e:\n    print(f\"Soft delete failed: {str(e)}\")\n    raise\n</code></pre> <p>def restore_soft_deleted_record(client, table_id, record_id):     \"\"\"Restore a soft-deleted record.\"\"\"     try:         client.records.update_record(             table_id=table_id,             record_id=record_id,             fields={                 \"is_deleted\": False,                 \"deleted_at\": None,                 \"deleted_by\": None             }         )         return True</p> <pre><code>except APIError as e:\n    print(f\"Restore failed: {str(e)}\")\n    raise\n</code></pre>"},{"location":"records/read/","title":"Reading Records","text":"<p>This guide covers all methods for retrieving records from Teable tables.</p>"},{"location":"records/read/#getting-records","title":"Getting Records","text":""},{"location":"records/read/#basic-record-retrieval","title":"Basic Record Retrieval","text":"<pre><code>from teable import TeableClient, TeableConfig\n\n# Initialize client\nclient = TeableClient(TeableConfig(api_key=\"your_api_key\"))\n\n# Get records with default parameters\nrecords = client.records.get_records(\n    table_id=\"table_id\",\n    field_key_type=\"name\"  # Use field names instead of IDs\n)\n</code></pre>"},{"location":"records/read/#advanced-query-parameters","title":"Advanced Query Parameters","text":"<pre><code># Get records with all available parameters\nrecords = client.records.get_records(\n    table_id=\"table_id\",\n    projection=[\"Name\", \"Email\"],  # Only return specific fields\n    cell_format=\"json\",  # 'json' or 'text'\n    field_key_type=\"name\",  # 'name' or 'id'\n    view_id=\"view_id\",  # Filter by view\n    ignore_view_query=False,  # Whether to ignore view's filter/sort\n    filter_by_tql=\"Name = 'John'\",  # Filter using Teable Query Language\n    filter={  # Complex filter object\n        \"filterSet\": [\n            {\n                \"fieldId\": \"Age\",\n                \"operator\": \"isGreaterEqual\",\n                \"value\": 30\n            }\n        ],\n        \"conjunction\": \"and\"\n    },\n    search=[  # Search parameters\n        {\n            \"value\": \"John\",\n            \"field\": \"Name\",\n            \"exact\": True\n        }\n    ],\n    filter_link_cell_candidate=\"linked_record_id\",  # Filter by link field candidates\n    filter_link_cell_selected=\"selected_record_id\",  # Filter by link field selection\n    selected_record_ids=[\"record1\", \"record2\"],  # Filter by specific records\n    order_by=\"Name\",  # Sort specification\n    group_by=\"Department\",  # Group specification\n    collapsed_group_ids=[\"group1\", \"group2\"],  # List of collapsed group IDs\n    take=100,  # Number of records to return (max 2000)\n    skip=0  # Number of records to skip\n)\n</code></pre>"},{"location":"records/read/#getting-a-single-record","title":"Getting a Single Record","text":"<pre><code># Get a single record by ID\nrecord = client.records.get_record(\n    table_id=\"table_id\",\n    record_id=\"record_id\",\n    projection=[\"Name\", \"Email\"],  # Optional: specific fields\n    cell_format=\"json\",  # Optional: format\n    field_key_type=\"name\"  # Optional: key type\n)\n</code></pre>"},{"location":"records/read/#record-status-and-history","title":"Record Status and History","text":""},{"location":"records/read/#checking-record-status","title":"Checking Record Status","text":"<pre><code># Get record visibility and deletion status\nstatus = client.records.get_record_status(\n    table_id=\"table_id\",\n    record_id=\"record_id\"\n)\n\nprint(f\"Is visible: {status.is_visible}\")\nprint(f\"Is deleted: {status.is_deleted}\")\n</code></pre>"},{"location":"records/read/#getting-record-history","title":"Getting Record History","text":"<pre><code># Get history for a specific record\nhistory = client.records.get_record_history(\n    table_id=\"table_id\",\n    record_id=\"record_id\"\n)\n\n# Print history entries\nfor entry in history.entries:\n    print(f\"Changed by: {history.users[entry.user_id].name}\")\n    print(f\"Action: {entry.action}\")\n    print(f\"Time: {entry.created_time}\")\n\n# Get history for all records in a table\ntable_history = client.records.get_table_record_history(\n    table_id=\"table_id\"\n)\n</code></pre>"},{"location":"records/read/#search-and-filter-options","title":"Search and Filter Options","text":""},{"location":"records/read/#text-search","title":"Text Search","text":"<pre><code># Simple text search\nrecords = client.records.get_records(\n    table_id=\"table_id\",\n    search=[{\n        \"value\": \"John\",\n        \"field\": \"Name\",\n        \"exact\": True  # Exact match\n    }]\n)\n\n# Multiple search criteria\nrecords = client.records.get_records(\n    table_id=\"table_id\",\n    search=[\n        {\n            \"value\": \"John\",\n            \"field\": \"Name\",\n            \"exact\": False  # Partial match\n        },\n        {\n            \"value\": \"Developer\",\n            \"field\": \"Title\",\n            \"exact\": True\n        }\n    ]\n)\n</code></pre>"},{"location":"records/read/#complex-filtering","title":"Complex Filtering","text":"<pre><code># Filter with multiple conditions\nrecords = client.records.get_records(\n    table_id=\"table_id\",\n    filter={\n        \"filterSet\": [\n            {\n                \"fieldId\": \"Age\",\n                \"operator\": \"isGreaterEqual\",\n                \"value\": 30\n            },\n            {\n                \"fieldId\": \"Department\",\n                \"operator\": \"is\",\n                \"value\": \"Engineering\"\n            }\n        ],\n        \"conjunction\": \"and\"\n    }\n)\n\n# Filter with TQL (Teable Query Language)\nrecords = client.records.get_records(\n    table_id=\"table_id\",\n    filter_by_tql=\"Age &gt;= 30 AND Department = 'Engineering'\"\n)\n</code></pre>"},{"location":"records/read/#pagination","title":"Pagination","text":"<pre><code>def fetch_all_records(client, table_id):\n    \"\"\"Fetch all records using pagination.\"\"\"\n    all_records = []\n    page_size = 100\n    skip = 0\n\n    while True:\n        records = client.records.get_records(\n            table_id=table_id,\n            take=page_size,\n            skip=skip\n        )\n\n        if not records:\n            break\n\n        all_records.extend(records)\n        skip += page_size\n\n        if len(records) &lt; page_size:\n            break\n\n    return all_records\n</code></pre>"},{"location":"records/read/#error-handling","title":"Error Handling","text":"<pre><code>from teable.exceptions import ValidationError, APIError\n\ntry:\n    records = client.records.get_records(\n        table_id=\"table_id\",\n        take=3000  # Exceeds maximum\n    )\nexcept ValidationError as e:\n    print(f\"Validation error: {str(e)}\")\nexcept APIError as e:\n    print(f\"API error: {str(e)}\")\n    print(f\"Status code: {e.status_code}\")\n    print(f\"Error details: {e.details}\")\n</code></pre>"},{"location":"records/read/#best-practices","title":"Best Practices","text":""},{"location":"records/read/#1-use-field-projections","title":"1. Use Field Projections","text":"<pre><code># DON'T: Fetch all fields when not needed\nrecords = client.records.get_records(table_id=\"table_id\")\n\n# DO: Only fetch required fields\nrecords = client.records.get_records(\n    table_id=\"table_id\",\n    projection=[\"Name\", \"Email\"]  # Only fetch needed fields\n)\n</code></pre>"},{"location":"records/read/#2-implement-pagination","title":"2. Implement Pagination","text":"<pre><code># DON'T: Fetch all records at once\nrecords = client.records.get_records(table_id=\"table_id\")\n\n# DO: Use pagination\ndef process_records_in_batches(client, table_id, batch_size=100):\n    skip = 0\n    while True:\n        batch = client.records.get_records(\n            table_id=table_id,\n            take=batch_size,\n            skip=skip\n        )\n\n        if not batch:\n            break\n\n        process_batch(batch)\n        skip += batch_size\n</code></pre>"},{"location":"records/read/#3-use-efficient-filtering","title":"3. Use Efficient Filtering","text":"<pre><code># DON'T: Filter in memory\nrecords = client.records.get_records(table_id=\"table_id\")\nfiltered = [r for r in records if r[\"Age\"] &gt; 30]  # Inefficient\n\n# DO: Filter at API level\nrecords = client.records.get_records(\n    table_id=\"table_id\",\n    filter={\n        \"filterSet\": [\n            {\n                \"fieldId\": \"Age\",\n                \"operator\": \"isGreaterThan\",\n                \"value\": 30\n            }\n        ]\n    }\n)\n</code></pre>"},{"location":"records/read/#4-handle-rate-limits","title":"4. Handle Rate Limits","text":"<pre><code>import time\nfrom teable.exceptions import APIError\n\ndef get_records_with_retry(client, table_id, max_retries=3):\n    for attempt in range(max_retries):\n        try:\n            return client.records.get_records(table_id=table_id)\n        except APIError as e:\n            if e.status_code == 429:  # Rate limit\n                if attempt &lt; max_retries - 1:\n                    time.sleep(2 ** attempt)  # Exponential backoff\n                    continue\n            raise\n    raise Exception(\"Max retries exceeded\")\n</code></pre>"},{"location":"records/read/#5-cache-results-when-appropriate","title":"5. Cache Results When Appropriate","text":"<p>```python from functools import lru_cache from datetime import datetime, timedelta</p> <p>@lru_cache(maxsize=100) def get_cached_record(client, table_id, record_id):     \"\"\"Cache individual record lookups.\"\"\"     return client.records.get_record(         table_id=table_id,         record_id=record_id     )</p> <p>class RecordCache:     \"\"\"Time-based cache for record queries.\"\"\"     def init(self, ttl_seconds=300):         self.cache = {}         self.ttl = timedelta(seconds=ttl_seconds)</p> <pre><code>def get_records(self, client, table_id, **query_params):\n    cache_key = f\"{table_id}:{str(query_params)}\"\n    now = datetime.now()\n\n    if cache_key in self.cache:\n        result, timestamp = self.cache[cache_key]\n        if now - timestamp &lt; self.ttl:\n            return result\n\n    result = client.records.get_records(\n        table_id=table_id,\n        **query_params\n    )\n    self.cache[cache_key] = (result, now)\n    return result\n</code></pre>"},{"location":"records/update/","title":"Updating Records","text":"<p>This guide covers all methods for updating records in Teable tables.</p>"},{"location":"records/update/#single-record-updates","title":"Single Record Updates","text":""},{"location":"records/update/#basic-update","title":"Basic Update","text":"<pre><code>from teable import TeableClient, TeableConfig\n\n# Initialize client\nclient = TeableClient(TeableConfig(api_key=\"your_api_key\"))\n\n# Update a single record\nupdated_record = client.records.update_record(\n    table_id=\"table_id\",\n    record_id=\"record_id\",\n    fields={\n        \"Name\": \"Updated Name\",\n        \"Email\": \"updated@example.com\"\n    }\n)\n</code></pre>"},{"location":"records/update/#advanced-update-options","title":"Advanced Update Options","text":"<pre><code># Update with type conversion and field keys\nupdated_record = client.records.update_record(\n    table_id=\"table_id\",\n    record_id=\"record_id\",\n    fields={\n        \"Age\": \"30\",  # Will be converted to number\n        \"IsActive\": \"true\"  # Will be converted to boolean\n    },\n    field_key_type=\"name\",  # Use field names instead of IDs\n    typecast=True,  # Enable automatic type conversion\n    order={  # Optional record ordering\n        \"viewId\": \"view_id\",\n        \"position\": \"after\",\n        \"recordId\": \"anchor_record_id\"\n    }\n)\n</code></pre>"},{"location":"records/update/#batch-record-updates","title":"Batch Record Updates","text":""},{"location":"records/update/#basic-batch-update","title":"Basic Batch Update","text":"<pre><code># Update multiple records at once\nupdates = [\n    {\n        \"id\": \"record1_id\",\n        \"fields\": {\n            \"Status\": \"Completed\",\n            \"Progress\": 100\n        }\n    },\n    {\n        \"id\": \"record2_id\",\n        \"fields\": {\n            \"Status\": \"In Progress\",\n            \"Progress\": 50\n        }\n    }\n]\n\nupdated_records = client.records.batch_update_records(\n    table_id=\"table_id\",\n    updates=updates,\n    field_key_type=\"name\",\n    typecast=True\n)\n</code></pre>"},{"location":"records/update/#batch-update-with-ordering","title":"Batch Update with Ordering","text":"<pre><code># Update records with specific ordering\nupdated_records = client.records.batch_update_records(\n    table_id=\"table_id\",\n    updates=updates,\n    field_key_type=\"name\",\n    typecast=True,\n    order={\n        \"viewId\": \"view_id\",\n        \"position\": \"after\",\n        \"recordId\": \"anchor_record_id\"\n    }\n)\n</code></pre>"},{"location":"records/update/#validation-rules","title":"Validation Rules","text":""},{"location":"records/update/#field-values","title":"Field Values","text":"<pre><code>from teable.exceptions import ValidationError\n\n# Example of field validation\ntry:\n    client.records.update_record(\n        table_id=\"table_id\",\n        record_id=\"record_id\",\n        fields={}  # Empty fields - will raise ValidationError\n    )\nexcept ValidationError as e:\n    print(f\"Validation error: {str(e)}\")\n</code></pre>"},{"location":"records/update/#batch-operations","title":"Batch Operations","text":"<pre><code># Batch update validation\ntry:\n    # Too many records in one batch\n    updates = [{\"id\": f\"id_{i}\", \"fields\": {}} for i in range(2001)]\n    client.records.batch_update_records(\n        table_id=\"table_id\",\n        updates=updates\n    )\nexcept ValidationError as e:\n    print(f\"Validation error: {str(e)}\")\n</code></pre>"},{"location":"records/update/#error-handling","title":"Error Handling","text":"<pre><code>from teable.exceptions import ValidationError, APIError\n\ntry:\n    client.records.update_record(\n        table_id=\"table_id\",\n        record_id=\"record_id\",\n        fields={\n            \"Email\": \"invalid-email\",\n            \"Age\": \"not-a-number\"\n        }\n    )\nexcept ValidationError as e:\n    print(f\"Validation error: {str(e)}\")\nexcept APIError as e:\n    print(f\"API error: {str(e)}\")\n    print(f\"Status code: {e.status_code}\")\n    print(f\"Error details: {e.details}\")\n</code></pre>"},{"location":"records/update/#best-practices","title":"Best Practices","text":""},{"location":"records/update/#1-use-batch-updates","title":"1. Use Batch Updates","text":"<pre><code># DON'T: Update records one by one\nfor record_id, new_data in updates.items():\n    client.records.update_record(\n        table_id=\"table_id\",\n        record_id=record_id,\n        fields=new_data\n    )\n\n# DO: Use batch update\nbatch_updates = [\n    {\"id\": record_id, \"fields\": new_data}\n    for record_id, new_data in updates.items()\n]\nclient.records.batch_update_records(\n    table_id=\"table_id\",\n    updates=batch_updates\n)\n</code></pre>"},{"location":"records/update/#2-enable-typecast","title":"2. Enable Typecast","text":"<pre><code># Enable automatic type conversion\nclient.records.update_record(\n    table_id=\"table_id\",\n    record_id=\"record_id\",\n    fields={\n        \"Age\": \"30\",  # String will be converted to number\n        \"IsActive\": \"true\",  # String will be converted to boolean\n        \"Date\": \"2023-01-01\"  # String will be converted to date\n    },\n    typecast=True\n)\n</code></pre>"},{"location":"records/update/#3-implement-retry-logic","title":"3. Implement Retry Logic","text":"<pre><code>import time\nfrom teable.exceptions import APIError\n\ndef retry_batch_update(client, table_id, updates, max_retries=3):\n    for attempt in range(max_retries):\n        try:\n            return client.records.batch_update_records(\n                table_id=table_id,\n                updates=updates\n            )\n        except APIError as e:\n            if e.status_code == 429:  # Rate limit\n                if attempt &lt; max_retries - 1:\n                    time.sleep(2 ** attempt)  # Exponential backoff\n                    continue\n            raise\n    raise Exception(\"Max retries exceeded\")\n</code></pre>"},{"location":"records/update/#4-validate-before-updating","title":"4. Validate Before Updating","text":"<pre><code>def validate_update_data(data):\n    \"\"\"Validate update data before sending to API.\"\"\"\n    required_fields = [\"Name\", \"Email\"]\n    for field in required_fields:\n        if field in data and not data[field]:\n            raise ValidationError(f\"Field '{field}' cannot be empty\")\n\n    if \"Email\" in data:\n        email = data[\"Email\"]\n        if not \"@\" in email:\n            raise ValidationError(\"Invalid email format\")\n\n    if \"Age\" in data:\n        try:\n            age = int(data[\"Age\"])\n            if age &lt; 0 or age &gt; 120:\n                raise ValidationError(\"Age must be between 0 and 120\")\n        except ValueError:\n            raise ValidationError(\"Age must be a number\")\n\n# Use validation before update\ntry:\n    update_data = {\n        \"Name\": \"John Doe\",\n        \"Email\": \"john@example.com\",\n        \"Age\": 30\n    }\n\n    validate_update_data(update_data)\n\n    client.records.update_record(\n        table_id=\"table_id\",\n        record_id=\"record_id\",\n        fields=update_data\n    )\nexcept ValidationError as e:\n    print(f\"Validation failed: {str(e)}\")\n</code></pre>"},{"location":"records/update/#5-handle-partial-success-in-batch-updates","title":"5. Handle Partial Success in Batch Updates","text":"<pre><code>def handle_batch_update(client, table_id, updates):\n    \"\"\"Handle batch updates with error tracking.\"\"\"\n    try:\n        results = client.records.batch_update_records(\n            table_id=table_id,\n            updates=updates\n        )\n\n        # Track successful updates\n        successful_ids = [r[\"id\"] for r in results]\n\n        # Find failed updates\n        failed_ids = set(u[\"id\"] for u in updates) - set(successful_ids)\n\n        if failed_ids:\n            print(f\"Failed to update records: {failed_ids}\")\n            # Implement retry logic for failed records\n            retry_updates = [\n                u for u in updates\n                if u[\"id\"] in failed_ids\n            ]\n            # Retry failed updates...\n\n        return results\n\n    except APIError as e:\n        print(f\"Batch update failed: {str(e)}\")\n        raise\n</code></pre>"},{"location":"records/update/#6-optimize-large-updates","title":"6. Optimize Large Updates","text":"<p>```python def update_records_in_batches(client, table_id, updates, batch_size=500):     \"\"\"Update large number of records in batches.\"\"\"     results = []</p> <pre><code># Split updates into smaller batches\nfor i in range(0, len(updates), batch_size):\n    batch = updates[i:i + batch_size]\n    try:\n        batch_results = client.records.batch_update_records(\n            table_id=table_id,\n            updates=batch\n        )\n        results.extend(batch_results)\n\n    except APIError as e:\n        print(f\"Batch {i//batch_size + 1} failed: {str(e)}\")\n        # Handle error or retry\n\nreturn results\n</code></pre>"},{"location":"spaces/configuration/","title":"Space Configuration","text":"<p>This guide covers the configuration options and settings available for spaces in Teable.</p>"},{"location":"spaces/configuration/#space-roles","title":"Space Roles","text":"<p>Teable defines several roles for space access control:</p> <pre><code>from teable import SpaceRole\n\n# Available roles\nSpaceRole.OWNER       # Full control over the space\nSpaceRole.CREATOR     # Can create and manage content\nSpaceRole.EDITOR      # Can edit existing content\nSpaceRole.COMMENTER   # Can comment on content\nSpaceRole.VIEWER      # Can only view content\n</code></pre>"},{"location":"spaces/configuration/#basic-space-configuration","title":"Basic Space Configuration","text":""},{"location":"spaces/configuration/#updating-space-information","title":"Updating Space Information","text":"<p>You can update a space's basic information:</p> <pre><code>from teable import TeableClient, TeableConfig\n\n# Initialize the client\nclient = TeableClient(TeableConfig(\n    api_url=\"https://your-teable-instance.com/api\",\n    api_key=\"your-api-key\"\n))\n\n# Get a space\nspace = client.spaces.get(\"space123\")\n\n# Update space name\nupdated_space = space.update(name=\"New Space Name\")\nprint(f\"Space updated: {updated_space.space_id}\")\n</code></pre>"},{"location":"spaces/configuration/#access-control","title":"Access Control","text":""},{"location":"spaces/configuration/#managing-collaborators","title":"Managing Collaborators","text":"<pre><code>from teable.models.collaborator import PrincipalType\n\n# Get collaborators with filtering options\ncollaborators, total_count = space.get_collaborators(\n    include_system=True,    # Include system collaborators\n    include_base=True,      # Include base information\n    skip=0,                 # Pagination offset\n    take=100,              # Number of results to return\n    search=\"john\",         # Search term\n    collaborator_type=PrincipalType.USER  # Filter by type\n)\n\n# Update collaborator role\nspace.update_collaborator(\n    principal_id=\"user123\",\n    principal_type=PrincipalType.USER,\n    role=SpaceRole.EDITOR\n)\n\n# Remove collaborator\nspace.delete_collaborator(\n    principal_id=\"user123\",\n    principal_type=PrincipalType.USER\n)\n\n# Add new collaborators\ncollaborators = [\n    {\n        \"principalId\": \"user123\",\n        \"principalType\": \"user\"\n    },\n    {\n        \"principalId\": \"dept456\",\n        \"principalType\": \"department\"\n    }\n]\nspace.add_collaborators(collaborators, role=SpaceRole.EDITOR)\n</code></pre>"},{"location":"spaces/configuration/#invitation-management","title":"Invitation Management","text":""},{"location":"spaces/configuration/#creating-and-managing-invitations","title":"Creating and Managing Invitations","text":"<pre><code># Create invitation link\ninvitation = space.create_invitation_link(role=SpaceRole.EDITOR)\n\n# List all invitation links\ninvitations = space.get_invitation_links()\n\n# Send email invitations\nemails = [\"user1@example.com\", \"user2@example.com\"]\nresult = space.invite_by_email(emails, role=SpaceRole.EDITOR)\n</code></pre>"},{"location":"spaces/configuration/#space-management","title":"Space Management","text":""},{"location":"spaces/configuration/#creating-bases","title":"Creating Bases","text":"<pre><code># Create a new base in the space\nbase = client.tables.create(\n    space_id=space.space_id,\n    name=\"Project Database\",\n    icon=\"\ud83d\udcca\"  # Optional emoji or icon identifier\n)\nprint(f\"Created base: {base.table_id}\")\n</code></pre>"},{"location":"spaces/configuration/#best-practices","title":"Best Practices","text":"<ol> <li>Role Assignment</li> <li>Follow the principle of least privilege</li> <li>Regularly audit user roles</li> <li> <p>Use appropriate roles for different users</p> </li> <li> <p>Access Control</p> </li> <li>Regularly review collaborator access</li> <li>Clean up unused invitation links</li> <li>Use time-limited invitations when possible</li> <li> <p>Document access control policies</p> </li> <li> <p>Space Structure</p> </li> <li>Organize bases logically within spaces</li> <li>Use clear, descriptive names</li> <li>Maintain consistent structure across spaces</li> </ol>"},{"location":"spaces/configuration/#error-handling","title":"Error Handling","text":"<pre><code>from teable.exceptions import TeableError, ValidationError\n\ntry:\n    # Update space configuration\n    space.update(name=\"New Name\")\nexcept ValidationError as e:\n    print(f\"Invalid configuration: {e}\")\nexcept TeableError as e:\n    print(f\"Error updating space: {e}\")\n</code></pre>"},{"location":"spaces/configuration/#next-steps","title":"Next Steps","text":"<p>After configuring your space, you can:</p> <ul> <li>Create and manage bases</li> <li>Set up tables</li> <li>Manage records</li> </ul>"},{"location":"spaces/creation/","title":"Creating and Managing Spaces","text":"<p>Spaces in Teable are organizational units that contain bases (databases). This guide covers how to create and manage spaces using the Teable-Client library.</p>"},{"location":"spaces/creation/#space-operations","title":"Space Operations","text":""},{"location":"spaces/creation/#creating-a-space","title":"Creating a Space","text":"<pre><code>from teable import TeableClient\n\n# Initialize the client\nclient = TeableClient()\n\n# Create a new space\nspace = client.spaces.create_space(name=\"My Project Space\")\nprint(f\"Created space with ID: {space.space_id}\")\n</code></pre>"},{"location":"spaces/creation/#listing-spaces","title":"Listing Spaces","text":"<pre><code># Get all spaces\nspaces = client.spaces.get_spaces()\nfor space in spaces:\n    print(f\"Space: {space.name} (ID: {space.space_id})\")\n</code></pre>"},{"location":"spaces/creation/#updating-space","title":"Updating Space","text":"<pre><code># Update space name\nspace.update(\"Updated Space Name\")\n\n# Verify update\nupdated_space = client.spaces.get_space(space.space_id)\nassert updated_space.name == \"Updated Space Name\"\n</code></pre>"},{"location":"spaces/creation/#deleting-space","title":"Deleting Space","text":"<pre><code># Permanently delete a space\nclient.spaces.permanently_delete_space(space.space_id)\n</code></pre>"},{"location":"spaces/creation/#base-management","title":"Base Management","text":""},{"location":"spaces/creation/#getting-bases","title":"Getting Bases","text":"<pre><code># Get all bases in the space\nbases = space.get_bases()\nfor base in bases:\n    print(f\"Base: {base.name} (ID: {base.base_id})\")\n</code></pre>"},{"location":"spaces/creation/#creating-a-base","title":"Creating a Base","text":"<pre><code># Create a new base in the space\nbase = space.create_base(\n    name=\"My New Base\",\n    icon=\"\ud83d\udcca\"  # Optional emoji icon\n)\nassert base.name == \"My New Base\"\nassert base.space_id == space.space_id\n</code></pre>"},{"location":"spaces/creation/#managing-space-collaborators","title":"Managing Space Collaborators","text":""},{"location":"spaces/creation/#adding-collaborators","title":"Adding Collaborators","text":"<p>You can add collaborators to a space with specific roles:</p> <pre><code>from teable import SpaceRole\n\n# Add collaborators\ncollaborators = [\n    {\n        \"principalId\": \"user123\",\n        \"principalType\": \"user\"\n    },\n    {\n        \"principalId\": \"user456\",\n        \"principalType\": \"user\"\n    }\n]\n\nspace.add_collaborators(\n    collaborators=collaborators,\n    role=SpaceRole.EDITOR\n)\n</code></pre>"},{"location":"spaces/creation/#listing-collaborators","title":"Listing Collaborators","text":"<p>You can list all collaborators in a space with various filtering options:</p> <pre><code># List all collaborators\ncollaborators, total = space.get_collaborators(\n    include_system=True,  # Include system collaborators\n    include_base=True,    # Include base information\n    take=100,            # Limit results\n    search=\"john\"        # Search by name/email\n)\n\nfor collaborator in collaborators:\n    print(f\"Name: {collaborator.name}\")\n    print(f\"Role: {collaborator.role}\")\n</code></pre>"},{"location":"spaces/creation/#updating-collaborator-roles","title":"Updating Collaborator Roles","text":"<p>You can update a collaborator's role:</p> <pre><code>from teable.models.collaborator import PrincipalType\n\n# Update collaborator role\nspace.update_collaborator(\n    principal_id=\"user123\",\n    principal_type=PrincipalType.USER,\n    role=SpaceRole.CREATOR\n)\n</code></pre>"},{"location":"spaces/creation/#removing-collaborators","title":"Removing Collaborators","text":"<p>To remove a collaborator from a space:</p> <pre><code># Remove collaborator\nspace.delete_collaborator(\n    principal_id=\"user123\",\n    principal_type=PrincipalType.USER\n)\n</code></pre>"},{"location":"spaces/creation/#managing-space-invitations","title":"Managing Space Invitations","text":""},{"location":"spaces/creation/#creating-invitation-links","title":"Creating Invitation Links","text":"<p>You can create invitation links to share with potential collaborators:</p> <pre><code># Create an invitation link\ninvitation = space.create_invitation_link(\n    role=SpaceRole.EDITOR\n)\n</code></pre>"},{"location":"spaces/creation/#sending-email-invitations","title":"Sending Email Invitations","text":"<p>You can directly send invitation emails to multiple users:</p> <pre><code># Send invitation emails\nemails = [\"user1@example.com\", \"user2@example.com\"]\nresult = space.invite_by_email(\n    emails=emails,\n    role=SpaceRole.EDITOR\n)\n</code></pre>"},{"location":"spaces/creation/#listing-invitation-links","title":"Listing Invitation Links","text":"<p>List all invitation links:</p> <pre><code># List all invitation links\ninvitations = space.get_invitation_links()\n</code></pre>"},{"location":"spaces/creation/#best-practices","title":"Best Practices","text":"<ol> <li>Role Management</li> <li>Assign appropriate roles based on user responsibilities</li> <li>Regularly review and audit collaborator permissions</li> <li> <p>Use the most restrictive role that still allows users to do their work</p> </li> <li> <p>Invitation Management</p> </li> <li>Use email invitations for direct user invites</li> <li>Use invitation links for broader sharing needs</li> <li> <p>Regularly review and clean up invitations</p> </li> <li> <p>Security Considerations</p> </li> <li>Regularly audit space access and permissions</li> <li>Remove collaborators who no longer need access</li> <li>Monitor space activity for unusual patterns</li> </ol>"},{"location":"spaces/creation/#error-handling","title":"Error Handling","text":"<p>Handle potential errors when managing spaces:</p> <pre><code>from teable.exceptions import TeableError, ValidationError, AuthenticationError\n\ntry:\n    space = client.spaces.create(name=\"New Space\")\nexcept ValidationError as e:\n    print(f\"Invalid space name: {e}\")\nexcept AuthenticationError as e:\n    print(f\"Authentication failed: {e}\")\nexcept TeableError as e:\n    print(f\"Error creating space: {e}\")\n</code></pre>"},{"location":"spaces/creation/#next-steps","title":"Next Steps","text":"<p>After creating and configuring your space, you can:</p> <ul> <li>Create bases within the space</li> <li>Manage space configuration</li> <li>Set up tables within bases</li> </ul>"},{"location":"spaces/management/","title":"Managing Spaces","text":"<p>This guide covers the various operations available for managing spaces in Teable.</p>"},{"location":"spaces/management/#listing-spaces","title":"Listing Spaces","text":"<p>You can retrieve all accessible spaces:</p> <pre><code>from teable import TeableClient, TeableConfig\n\n# Initialize the client\nclient = TeableClient(TeableConfig(\n    api_url=\"https://your-teable-instance.com/api\",\n    api_key=\"your-api-key\"\n))\n\n# Get all accessible spaces\nspaces = client.spaces.get_all()\n\n# Display space information\nfor space in spaces:\n    print(f\"Space ID: {space.space_id}\")\n</code></pre>"},{"location":"spaces/management/#retrieving-a-specific-space","title":"Retrieving a Specific Space","text":"<p>Get detailed information about a specific space:</p> <pre><code># Get a space by ID\nspace = client.spaces.get(\"space123\")\n\n# Access space properties\nprint(f\"Space ID: {space.space_id}\")\n</code></pre>"},{"location":"spaces/management/#managing-space-content","title":"Managing Space Content","text":""},{"location":"spaces/management/#listing-bases-in-a-space","title":"Listing Bases in a Space","text":"<p>You can retrieve all bases within a space:</p> <pre><code># Get all bases in a space\nbases = client.tables.get_all(space_id=\"space123\")\n\nfor base in bases:\n    print(f\"Base ID: {base.table_id}\")\n</code></pre>"},{"location":"spaces/management/#space-permissions","title":"Space Permissions","text":""},{"location":"spaces/management/#managing-collaborators","title":"Managing Collaborators","text":"<pre><code>from teable import SpaceRole\nfrom teable.models.collaborator import PrincipalType\n\n# Get a space\nspace = client.spaces.get(\"space123\")\n\n# Get collaborators\ncollaborators, total = space.get_collaborators(\n    include_system=True,\n    take=100,\n    search=\"john\"\n)\n\n# Add collaborators\ncollaborators = [\n    {\n        \"principalId\": \"user123\",\n        \"principalType\": \"user\"\n    },\n    {\n        \"principalId\": \"dept456\",\n        \"principalType\": \"department\"\n    }\n]\n\nspace.add_collaborators(\n    collaborators=collaborators,\n    role=SpaceRole.EDITOR\n)\n\n# Update collaborator role\nspace.update_collaborator(\n    principal_id=\"user123\",\n    principal_type=PrincipalType.USER,\n    role=SpaceRole.EDITOR\n)\n\n# Remove collaborator\nspace.delete_collaborator(\n    principal_id=\"user123\",\n    principal_type=PrincipalType.USER\n)\n</code></pre>"},{"location":"spaces/management/#best-practices","title":"Best Practices","text":"<ol> <li>Resource Management</li> <li>Regularly clean up unused spaces and bases</li> <li>Monitor space usage</li> <li> <p>Back up important data</p> </li> <li> <p>Organization</p> </li> <li>Maintain a clear naming convention for spaces</li> <li>Group related bases within the same space</li> <li> <p>Use descriptive names for better searchability</p> </li> <li> <p>Access Control</p> </li> <li>Regularly review collaborator access</li> <li>Use appropriate roles for different users</li> <li>Document access policies</li> </ol>"},{"location":"spaces/management/#error-handling","title":"Error Handling","text":"<p>Implement proper error handling for space management operations:</p> <pre><code>from teable.exceptions import TeableError, ResourceNotFoundError\n\ntry:\n    space = client.spaces.get(\"space123\")\nexcept ResourceNotFoundError:\n    print(\"Space not found\")\nexcept TeableError as e:\n    print(f\"Error accessing space: {e}\")\n</code></pre>"},{"location":"spaces/management/#next-steps","title":"Next Steps","text":"<p>After mastering space management, you might want to explore:</p> <ul> <li>Space Configuration</li> <li>Base Creation</li> <li>Table Management</li> </ul>"},{"location":"tables/bulk-operations/","title":"Bulk Operations","text":"<p>This guide covers how to perform bulk operations in Teable tables.</p>"},{"location":"tables/bulk-operations/#batch-record-operations","title":"Batch Record Operations","text":""},{"location":"tables/bulk-operations/#batch-creation","title":"Batch Creation","text":"<pre><code>from teable import TeableClient, TeableConfig\n\n# Initialize the client\nclient = TeableClient(TeableConfig(\n    api_url=\"https://your-teable-instance.com/api\",\n    api_key=\"your-api-key\"\n))\n\n# Prepare multiple records\nrecords = [\n    {\n        \"Name\": f\"User {i}\",\n        \"Email\": f\"user{i}@example.com\",\n        \"Department\": \"Engineering\"\n    }\n    for i in range(1, 101)  # Create 100 records\n]\n\n# Batch create records\nresult = client.records.batch_create_records(\n    table_id=\"table_id\",\n    records=records\n)\n\nprint(f\"Successfully created: {result.success_count}\")\nprint(f\"Failed to create: {result.failure_count}\")\nprint(f\"Success rate: {result.success_rate}%\")\n\n# Process successful records\nfor record in result.successful:\n    print(f\"Created record: {record.record_id}\")\n\n# Process failed records\nfor failure in result.failed:\n    print(f\"Failed record: {failure}\")\n</code></pre>"},{"location":"tables/bulk-operations/#batch-updates","title":"Batch Updates","text":"<pre><code># Prepare updates for multiple records\nrecords = [\n    {\n        \"record_id\": \"rec123\",\n        \"fields\": {\n            \"Status\": \"Active\",\n            \"Last Updated\": \"2023-01-15\"\n        }\n    },\n    {\n        \"record_id\": \"rec456\",\n        \"fields\": {\n            \"Status\": \"Inactive\",\n            \"Last Updated\": \"2023-01-15\"\n        }\n    }\n]\n\n# Batch update records\nresult = client.records.batch_update_records(\n    table_id=\"table_id\",\n    records=records\n)\n\nprint(f\"Successfully updated: {result.success_count}\")\nprint(f\"Failed to update: {result.failure_count}\")\nprint(f\"Success rate: {result.success_rate}%\")\n</code></pre>"},{"location":"tables/bulk-operations/#batch-deletion","title":"Batch Deletion","text":"<pre><code># Delete multiple records\nrecord_ids = [\"rec123\", \"rec456\", \"rec789\"]\n\nsuccess = client.records.batch_delete_records(\n    table_id=\"table_id\",\n    record_ids=record_ids\n)\n\nif success:\n    print(f\"Successfully deleted {len(record_ids)} records\")\n</code></pre>"},{"location":"tables/bulk-operations/#error-handling","title":"Error Handling","text":""},{"location":"tables/bulk-operations/#handling-batch-operations","title":"Handling Batch Operations","text":"<pre><code>from teable.exceptions import TeableError, ValidationError\n\ndef safe_batch_operation(client, table_id, records):\n    \"\"\"Safely perform batch operations with error handling.\"\"\"\n    try:\n        # Get table for validation\n        table = client.tables.get(table_id)\n\n        # Validate records\n        for record in records:\n            table.validate_record_fields(record['fields'])\n\n        # Perform batch creation\n        result = client.records.batch_create_records(\n            table_id=table_id,\n            records=records\n        )\n\n        print(f\"Successfully created: {result.success_count}\")\n        print(f\"Failed to create: {result.failure_count}\")\n        print(f\"Success rate: {result.success_rate}%\")\n\n        return result\n\n    except ValidationError as e:\n        print(f\"Validation error: {e}\")\n        return None\n    except TeableError as e:\n        print(f\"Batch operation failed: {e}\")\n        return None\n</code></pre>"},{"location":"tables/bulk-operations/#best-practices","title":"Best Practices","text":"<ol> <li>Batch Processing</li> <li>Use batch operations for multiple records</li> <li>Handle partial failures gracefully</li> <li>Monitor API rate limits</li> <li> <p>Consider performance impact</p> </li> <li> <p>Data Preparation</p> </li> <li>Clean data before processing</li> <li>Validate data structure</li> <li>Handle missing values</li> <li> <p>Convert data types appropriately</p> </li> <li> <p>Error Handling</p> </li> <li>Implement comprehensive error handling</li> <li>Log failures for review</li> <li>Provide meaningful error messages</li> <li> <p>Consider recovery strategies</p> </li> <li> <p>Performance</p> </li> <li>Monitor API usage</li> <li>Consider rate limits</li> <li>Track operation progress</li> <li>Handle failures appropriately</li> </ol>"},{"location":"tables/bulk-operations/#next-steps","title":"Next Steps","text":"<p>After mastering bulk operations, you can:</p> <ul> <li>Configure data validation</li> <li>Work with views</li> <li>Implement data synchronization</li> </ul>"},{"location":"tables/connection/","title":"Table Connections and Relationships","text":"<p>This guide covers how to establish and manage connections between tables in Teable using the Teable-Client library.</p>"},{"location":"tables/connection/#creating-reference-fields","title":"Creating Reference Fields","text":""},{"location":"tables/connection/#basic-reference-field","title":"Basic Reference Field","text":"<pre><code>from teable import TeableClient, TeableConfig, FieldType\n\n# Initialize the client\nclient = TeableClient(TeableConfig(\n    api_url=\"https://your-teable-instance.com/api\",\n    api_key=\"your-api-key\"\n))\n\n# Get your tables\nemployees_table = client.tables.get(\"employees_table_id\")\nprojects_table = client.tables.get(\"projects_table_id\")\n\n# Create a reference field in the projects table\nreference_field = client.fields.create(\n    table_id=projects_table.table_id,\n    name=\"Project Manager\",\n    field_type=FieldType.REFERENCE,\n    options={\n        \"table_id\": employees_table.table_id\n    }\n)\n</code></pre>"},{"location":"tables/connection/#working-with-referenced-records","title":"Working with Referenced Records","text":""},{"location":"tables/connection/#creating-records-with-references","title":"Creating Records with References","text":"<pre><code># Create a project and link it to an existing employee\nproject = client.records.create(\n    table_id=projects_table.table_id,\n    fields={\n        \"Project Name\": \"New Website\",\n        \"Project Manager\": [\"employee123\"]  # Reference employee by ID\n    }\n)\n\n# Create with multiple references\nproject = client.records.create(\n    table_id=projects_table.table_id,\n    fields={\n        \"Project Name\": \"Big Initiative\",\n        \"Team Members\": [\"employee123\", \"employee456\"]\n    }\n)\n</code></pre>"},{"location":"tables/connection/#querying-referenced-records","title":"Querying Referenced Records","text":"<pre><code>from teable import FilterOperator\n\n# Get all projects managed by a specific employee\nprojects = client.records.get_records(\n    table_id=projects_table.table_id,\n    query={\n        \"filter\": {\n            \"operator\": \"and\",\n            \"conditions\": [\n                {\n                    \"field\": \"Project Manager\",\n                    \"operator\": FilterOperator.EQUALS,\n                    \"value\": \"employee123\"\n                }\n            ]\n        }\n    }\n)\n</code></pre>"},{"location":"tables/connection/#updating-referenced-records","title":"Updating Referenced Records","text":"<pre><code># Update project manager\nclient.records.update(\n    table_id=projects_table.table_id,\n    record_id=\"project123\",\n    fields={\n        \"Project Manager\": [\"new_manager_id\"]\n    }\n)\n\n# Update team members\nclient.records.update(\n    table_id=projects_table.table_id,\n    record_id=\"project123\",\n    fields={\n        \"Team Members\": [\"member1\", \"member2\", \"new_member\"]\n    }\n)\n</code></pre>"},{"location":"tables/connection/#best-practices","title":"Best Practices","text":"<ol> <li>Relationship Planning</li> <li>Plan your table relationships before implementation</li> <li>Choose appropriate field types</li> <li>Consider data integrity implications</li> <li> <p>Document relationship purposes</p> </li> <li> <p>Field Naming</p> </li> <li>Use clear, descriptive names for reference fields</li> <li>Maintain consistent naming conventions</li> <li>Document field relationships</li> <li> <p>Consider field organization</p> </li> <li> <p>Performance</p> </li> <li>Use appropriate field types</li> <li>Consider query performance implications</li> <li>Monitor reference field usage</li> <li> <p>Optimize queries when possible</p> </li> <li> <p>Data Integrity</p> </li> <li>Validate referenced records exist</li> <li>Handle deleted records appropriately</li> <li>Maintain referential integrity</li> <li>Regular relationship audits</li> </ol>"},{"location":"tables/connection/#error-handling","title":"Error Handling","text":"<pre><code>from teable.exceptions import TeableError, ValidationError\n\ntry:\n    # Create a reference field\n    reference_field = client.fields.create(\n        table_id=projects_table.table_id,\n        name=\"Project Manager\",\n        field_type=FieldType.REFERENCE,\n        options={\n            \"table_id\": employees_table.table_id\n        }\n    )\nexcept ValidationError as e:\n    print(f\"Invalid field configuration: {e}\")\nexcept TeableError as e:\n    print(f\"Error creating reference: {e}\")\n\n# Validate referenced records\ntry:\n    table = client.tables.get(projects_table.table_id)\n    table.validate_record_fields({\n        \"Project Name\": \"New Project\",\n        \"Project Manager\": [\"invalid_id\"]\n    })\nexcept ValidationError as e:\n    print(f\"Invalid reference: {e}\")\n</code></pre>"},{"location":"tables/connection/#next-steps","title":"Next Steps","text":"<p>After setting up table connections, you can:</p> <ul> <li>Create and manage records</li> <li>Set up views</li> <li>Configure data validation</li> <li>Work with bulk operations</li> </ul>"},{"location":"tables/creation/","title":"Creating and Configuring Tables","text":"<p>This guide covers how to create and configure tables in Teable using the Teable-Client library.</p>"},{"location":"tables/creation/#basic-table-creation","title":"Basic Table Creation","text":""},{"location":"tables/creation/#creating-a-simple-table","title":"Creating a Simple Table","text":"<pre><code>from teable import TeableClient\n\n# Initialize the client\nclient = TeableClient()\n\n# Create a basic table\ntable = client.tables.create_table(\n    base_id=\"base123\",\n    name=\"Employees\",\n    db_table_name=\"employees\",  # Must start with letter, max 63 chars\n    description=\"Employee directory and information\"\n)\n\nprint(f\"Created table: {table.table_id}\")\n\n# Validate db_table_name\ntry:\n    client.tables.create_table(\n        base_id=\"base123\",\n        name=\"Invalid Table\",\n        db_table_name=\"1invalid_name\"  # Must start with letter\n    )\nexcept ValueError as e:\n    print(f\"Invalid db_table_name: {e}\")\n\ntry:\n    client.tables.create_table(\n        base_id=\"base123\",\n        name=\"Invalid Table\",\n        db_table_name=\"a\" * 64  # Too long\n    )\nexcept ValueError as e:\n    print(f\"Invalid db_table_name: {e}\")\n</code></pre>"},{"location":"tables/creation/#updating-table-information","title":"Updating Table Information","text":"<pre><code># Update table name\nclient.tables.update_table_name(\n    base_id=\"base123\",\n    table_id=\"table123\",\n    name=\"Updated Table Name\"\n)\n\n# Update table description\nclient.tables.update_table_description(\n    base_id=\"base123\",\n    table_id=\"table123\",\n    description=\"Updated description\"\n)\n</code></pre>"},{"location":"tables/creation/#deleting-a-table","title":"Deleting a Table","text":"<pre><code># Delete a table\nresult = client.tables.delete_table(\n    base_id=\"base123\",\n    table_id=\"table123\"\n)\nassert result is True\n</code></pre>"},{"location":"tables/creation/#creating-a-table-with-fields","title":"Creating a Table with Fields","text":"<pre><code>from teable import FieldType\n\n# Define fields for the table\nfields = [\n    {\n        \"name\": \"Full Name\",\n        \"type\": FieldType.SINGLE_LINE_TEXT,\n        \"required\": True\n    },\n    {\n        \"name\": \"Department\",\n        \"type\": FieldType.SINGLE_SELECT,\n        \"options\": {\n            \"choices\": [\"Engineering\", \"Marketing\", \"Sales\", \"HR\"]\n        }\n    },\n    {\n        \"name\": \"Start Date\",\n        \"type\": FieldType.DATE\n    },\n    {\n        \"name\": \"Salary\",\n        \"type\": FieldType.NUMBER,\n        \"options\": {\n            \"precision\": 2,\n            \"format\": \"currency\"\n        }\n    }\n]\n\n# Create table with fields\ntable = client.tables.create(\n    space_id=\"space123\",\n    name=\"Employees\",\n    description=\"Employee directory and information\",\n    fields=fields\n)\n</code></pre>"},{"location":"tables/creation/#table-views","title":"Table Views","text":""},{"location":"tables/creation/#creating-a-table-with-views","title":"Creating a Table with Views","text":"<pre><code># Create a table with views\ntable = client.tables.create_table(\n    base_id=\"base123\",\n    name=\"Table with Views\",\n    db_table_name=\"viewtable\",\n    fields=[{\"name\": \"Name\", \"type\": \"singleLineText\"}],\n    views=[{\n        \"name\": \"Default View\",\n        \"type\": \"grid\"\n    }]\n)\n\n# Get all views\nviews = table.views\nprint(f\"Number of views: {len(views)}\")\n\n# Get default view ID\ndefault_view_id = client.tables.get_table_default_view_id(\n    base_id=\"base123\",\n    table_id=table.table_id\n)\nprint(f\"Default view ID: {default_view_id}\")\n</code></pre>"},{"location":"tables/creation/#table-permissions","title":"Table Permissions","text":""},{"location":"tables/creation/#getting-table-permissions","title":"Getting Table Permissions","text":"<pre><code># Get table permissions\npermissions = client.tables.get_table_permission(\n    base_id=\"base123\",\n    table_id=\"table123\"\n)\n\n# Check specific permissions\nprint(f\"Table permissions: {permissions['table']}\")\nprint(f\"View permissions: {permissions['view']}\")\nprint(f\"Record permissions: {permissions['record']}\")\nprint(f\"Field permissions: {permissions['field']}\")\n</code></pre>"},{"location":"tables/creation/#field-management","title":"Field Management","text":""},{"location":"tables/creation/#getting-table-fields","title":"Getting Table Fields","text":"<pre><code># Access all fields in a table\nfields = table.fields\n\nfor field in fields:\n    print(f\"Field ID: {field.field_id}\")\n    print(f\"Type: {field.field_type}\")\n    print(f\"Required: {field.is_required}\")\n    print(\"---\")\n</code></pre>"},{"location":"tables/creation/#field-validation","title":"Field Validation","text":"<p>Tables automatically validate data against field configurations:</p> <pre><code>try:\n    # Get table for validation\n    table = client.tables.get(\"table_id\")\n\n    # Validate record data\n    data = {\n        \"Full Name\": \"John Doe\",\n        \"Department\": \"Engineering\",\n        \"Start Date\": \"2023-01-15\",\n        \"Salary\": 75000\n    }\n\n    # Validate data\n    table.validate_record_fields(data)\n\n    # Create record\n    record = client.records.create(\n        table_id=table.table_id,\n        fields=data\n    )\n    print(f\"Created record: {record.record_id}\")\nexcept ValidationError as e:\n    print(f\"Validation error: {e}\")\n</code></pre>"},{"location":"tables/creation/#field-types-reference","title":"Field Types Reference","text":"<p>Here are the available field types in Teable:</p> <pre><code>from teable import FieldType\n\n# Text Fields\nFieldType.SINGLE_LINE_TEXT    # Single line text\nFieldType.LONG_TEXT          # Multi-line text\n\n# Number Fields\nFieldType.NUMBER            # Numeric values\n\n# Date Fields\nFieldType.DATE              # Date and time\n\n# Selection Fields\nFieldType.SINGLE_SELECT     # Single choice\nFieldType.MULTIPLE_SELECT   # Multiple choices\n\n# Special Fields\nFieldType.CHECKBOX          # Boolean values\nFieldType.RATING           # Rating values\nFieldType.DURATION         # Time duration\nFieldType.BUTTON           # Button field\n\n# System Fields\nFieldType.CREATED_TIME     # Record creation time\nFieldType.LAST_MODIFIED_TIME  # Last modification time\nFieldType.CREATED_BY       # Record creator\nFieldType.LAST_MODIFIED_BY  # Last modifier\nFieldType.AUTO_NUMBER      # Auto-incrementing number\n</code></pre>"},{"location":"tables/creation/#best-practices","title":"Best Practices","text":"<ol> <li>Field Planning</li> <li>Plan your field structure before creating tables</li> <li>Use appropriate field types for data</li> <li>Set required fields appropriately</li> <li> <p>Consider field relationships</p> </li> <li> <p>Data Validation</p> </li> <li>Use field constraints to ensure data quality</li> <li>Set appropriate field formats</li> <li>Document validation requirements</li> <li> <p>Handle validation errors gracefully</p> </li> <li> <p>Performance</p> </li> <li>Create tables with all fields initially when possible</li> <li>Use batch operations for multiple records</li> <li>Consider field indexing for large tables</li> <li> <p>Monitor table performance</p> </li> <li> <p>Documentation</p> </li> <li>Add clear table descriptions</li> <li>Document field purposes</li> <li>Maintain field naming conventions</li> <li>Keep field options documented</li> </ol>"},{"location":"tables/creation/#error-handling","title":"Error Handling","text":"<pre><code>from teable.exceptions import TeableError, ValidationError, ResourceNotFoundError\n\ntry:\n    # Create table with fields\n    table = client.tables.create(\n        space_id=\"space123\",\n        name=\"Employees\",\n        fields=fields\n    )\nexcept ValidationError as e:\n    print(f\"Invalid field configuration: {e}\")\nexcept TeableError as e:\n    print(f\"Error creating table: {e}\")\n\n# Field validation\ntry:\n    table.validate_record_fields({\n        \"Full Name\": \"John Doe\",\n        \"Department\": \"Engineering\"\n    })\nexcept ValidationError as e:\n    print(f\"Field validation error: {e}\")\n</code></pre>"},{"location":"tables/creation/#next-steps","title":"Next Steps","text":"<p>After creating your table, you can:</p> <ul> <li>Configure table connections</li> <li>Manage records</li> <li>Set up views</li> <li>Configure bulk operations</li> </ul>"},{"location":"tables/data-insertion/","title":"Data Insertion and Record Creation","text":"<p>This guide covers how to insert data and create records in Teable tables using the Teable-Client library.</p>"},{"location":"tables/data-insertion/#single-record-creation","title":"Single Record Creation","text":""},{"location":"tables/data-insertion/#basic-record-creation","title":"Basic Record Creation","text":"<pre><code>from teable import TeableClient, TeableConfig\n\n# Initialize the client\nclient = TeableClient(TeableConfig(\n    api_url=\"https://your-teable-instance.com/api\",\n    api_key=\"your-api-key\"\n))\n\n# Create a single record\nrecord = client.records.create(\n    table_id=\"table_id\",\n    fields={\n        \"Name\": \"John Doe\",\n        \"Email\": \"john@example.com\",\n        \"Department\": \"Engineering\",\n        \"Start Date\": \"2023-01-15\"\n    }\n)\n\nprint(f\"Created record ID: {record.record_id}\")\n</code></pre>"},{"location":"tables/data-insertion/#record-creation-with-validation","title":"Record Creation with Validation","text":"<pre><code>from teable.exceptions import ValidationError\n\ntry:\n    # Get table for validation\n    table = client.tables.get(\"table_id\")\n\n    # Prepare record data\n    data = {\n        \"Name\": \"Jane Smith\",\n        \"Email\": \"jane@example.com\",\n        \"Salary\": 75000,\n        \"Active\": True\n    }\n\n    # Validate data\n    table.validate_record_fields(data)\n\n    # Create record\n    record = client.records.create(\n        table_id=table.table_id,\n        fields=data\n    )\nexcept ValidationError as e:\n    print(f\"Validation error: {e}\")\n</code></pre>"},{"location":"tables/data-insertion/#batch-record-creation","title":"Batch Record Creation","text":""},{"location":"tables/data-insertion/#creating-multiple-records","title":"Creating Multiple Records","text":"<pre><code># Prepare multiple records\nrecords = [\n    {\n        \"Name\": \"Alice Johnson\",\n        \"Email\": \"alice@example.com\",\n        \"Department\": \"Marketing\"\n    },\n    {\n        \"Name\": \"Bob Wilson\",\n        \"Email\": \"bob@example.com\",\n        \"Department\": \"Sales\"\n    },\n    {\n        \"Name\": \"Carol Brown\",\n        \"Email\": \"carol@example.com\",\n        \"Department\": \"Engineering\"\n    }\n]\n\n# Batch create records\nresult = client.records.batch_create_records(\n    table_id=\"table_id\",\n    records=records\n)\n\nprint(f\"Successfully created: {result.success_count}\")\nprint(f\"Failed to create: {result.failure_count}\")\nprint(f\"Success rate: {result.success_rate}%\")\n\n# Process successful records\nfor record in result.successful:\n    print(f\"Created record: {record.record_id}\")\n\n# Process failed records\nfor failure in result.failed:\n    print(f\"Failed record: {failure}\")\n</code></pre>"},{"location":"tables/data-insertion/#validation-and-error-handling","title":"Validation and Error Handling","text":""},{"location":"tables/data-insertion/#pre-validation","title":"Pre-validation","text":"<pre><code>try:\n    # Get table for validation\n    table = client.tables.get(\"table_id\")\n\n    # Validate fields before creation\n    table.validate_record_fields({\n        \"Name\": \"Test User\",\n        \"Email\": \"invalid-email\",\n        \"Department\": \"Invalid Dept\"\n    })\nexcept ValidationError as e:\n    print(f\"Validation failed: {e}\")\n</code></pre>"},{"location":"tables/data-insertion/#batch-error-handling","title":"Batch Error Handling","text":"<pre><code>from teable.exceptions import TeableError\n\ntry:\n    # Prepare records\n    records = [\n        {\"Name\": \"User 1\", \"Email\": \"valid@example.com\"},\n        {\"Name\": \"User 2\", \"Email\": \"invalid-email\"},\n        {\"Name\": \"User 3\", \"Email\": \"another@example.com\"}\n    ]\n\n    # Attempt batch creation\n    result = client.records.batch_create_records(\n        table_id=\"table_id\",\n        records=records\n    )\n\n    # Check results\n    print(f\"Successfully created: {result.success_count}\")\n    print(f\"Failed to create: {result.failure_count}\")\n    print(f\"Success rate: {result.success_rate}%\")\n\nexcept TeableError as e:\n    print(f\"Batch operation failed: {e}\")\n</code></pre>"},{"location":"tables/data-insertion/#best-practices","title":"Best Practices","text":"<ol> <li>Data Validation</li> <li>Validate data before insertion</li> <li>Handle validation errors gracefully</li> <li>Use appropriate data types</li> <li> <p>Clean and normalize data</p> </li> <li> <p>Batch Operations</p> </li> <li>Use batch operations for multiple records</li> <li>Handle partial failures appropriately</li> <li>Monitor performance</li> <li> <p>Consider rate limits</p> </li> <li> <p>Error Handling</p> </li> <li>Implement comprehensive error handling</li> <li>Log validation failures</li> <li>Provide meaningful error messages</li> <li> <p>Handle errors appropriately</p> </li> <li> <p>Performance</p> </li> <li>Use batch operations when possible</li> <li>Monitor API usage</li> <li>Prepare data efficiently</li> <li>Consider rate limits</li> </ol>"},{"location":"tables/data-insertion/#error-handling-examples","title":"Error Handling Examples","text":"<pre><code>from teable.exceptions import TeableError, ValidationError, ResourceNotFoundError\n\ndef safe_create_record(client, table_id, data):\n    \"\"\"Safely create a record with error handling.\"\"\"\n    try:\n        # Get table for validation\n        table = client.tables.get(table_id)\n\n        # Validate first\n        table.validate_record_fields(data)\n\n        # Create record\n        record = client.records.create(\n            table_id=table_id,\n            fields=data\n        )\n        return record\n\n    except ValidationError as e:\n        print(f\"Data validation failed: {e}\")\n        return None\n    except ResourceNotFoundError as e:\n        print(f\"Table or field not found: {e}\")\n        return None\n    except TeableError as e:\n        print(f\"Operation failed: {e}\")\n        return None\n</code></pre>"},{"location":"tables/data-insertion/#next-steps","title":"Next Steps","text":"<p>After mastering data insertion, you can:</p> <ul> <li>Query and filter records</li> <li>Update existing records</li> <li>Delete records</li> <li>Work with views</li> </ul>"},{"location":"tables/management/","title":"Table Management","text":"<p>This guide covers how to manage tables in Teable.</p>"},{"location":"tables/management/#basic-table-management","title":"Basic Table Management","text":""},{"location":"tables/management/#getting-tables","title":"Getting Tables","text":"<pre><code>from teable import TeableClient, TeableConfig\n\n# Initialize the client\nclient = TeableClient(TeableConfig(\n    api_url=\"https://your-teable-instance.com/api\",\n    api_key=\"your-api-key\"\n))\n\n# Get a specific table\ntable = client.tables.get(\"table_id\")\n\n# Get all tables in a space\ntables = client.tables.get_all(space_id=\"space123\")\n\n# Process tables\nfor table in tables:\n    print(f\"Table ID: {table.table_id}\")\n</code></pre>"},{"location":"tables/management/#updating-tables","title":"Updating Tables","text":"<pre><code># Update table properties\ntable = client.tables.update(\n    table_id=\"table_id\",\n    name=\"New Table Name\",\n    description=\"Updated description\"\n)\n</code></pre>"},{"location":"tables/management/#field-management","title":"Field Management","text":""},{"location":"tables/management/#managing-fields","title":"Managing Fields","text":"<pre><code>from teable import FieldType\n\n# Get all fields\nfields = table.fields\n\n# Create new field\nnew_field = client.fields.create(\n    table_id=table.table_id,\n    name=\"Status\",\n    field_type=FieldType.SINGLE_SELECT,\n    options={\n        \"choices\": [\"Active\", \"Inactive\"]\n    }\n)\n\n# Update field\nfield = client.fields.update(\n    field_id=\"field_id\",\n    name=\"New Name\"\n)\n\n# Delete field\nclient.fields.delete(field_id=\"field_id\")\n</code></pre>"},{"location":"tables/management/#managing-views","title":"Managing Views","text":"<pre><code>from teable import FilterOperator, SortDirection\n\n# Get all views\nviews = table.views\n\n# Create new view\nnew_view = client.views.create(\n    table_id=table.table_id,\n    name=\"Custom View\",\n    type=\"grid\",\n    filter={\n        \"operator\": \"and\",\n        \"conditions\": [\n            {\n                \"field\": \"Status\",\n                \"operator\": FilterOperator.EQUALS,\n                \"value\": \"Active\"\n            }\n        ]\n    }\n)\n\n# Update view\nview = client.views.update(\n    view_id=\"view_id\",\n    name=\"Updated View\",\n    sort=[\n        {\n            \"field\": \"CreatedTime\",\n            \"direction\": SortDirection.DESCENDING\n        }\n    ]\n)\n\n# Delete view\nclient.views.delete(view_id=\"view_id\")\n</code></pre>"},{"location":"tables/management/#data-management","title":"Data Management","text":""},{"location":"tables/management/#record-operations","title":"Record Operations","text":"<pre><code>from teable import FilterOperator\n\n# Get records with filtering\nrecords = client.records.get_records(\n    table_id=table.table_id,\n    query={\n        \"filter\": {\n            \"operator\": \"and\",\n            \"conditions\": [\n                {\n                    \"field\": \"Status\",\n                    \"operator\": FilterOperator.EQUALS,\n                    \"value\": \"Active\"\n                }\n            ]\n        }\n    }\n)\n</code></pre>"},{"location":"tables/management/#batch-operations","title":"Batch Operations","text":"<pre><code># Batch create records\nrecords = [\n    {\"Name\": f\"Record {i}\"} for i in range(100)\n]\nresult = client.records.batch_create_records(\n    table_id=table.table_id,\n    records=records\n)\n\n# Batch update records\nupdates = [\n    {\n        \"record_id\": f\"rec{i}\",\n        \"fields\": {\"Status\": \"Updated\"}\n    }\n    for i in range(100)\n]\nresult = client.records.batch_update_records(\n    table_id=table.table_id,\n    records=updates\n)\n\n# Batch delete records\nrecord_ids = [f\"rec{i}\" for i in range(100)]\nresult = client.records.batch_delete_records(\n    table_id=table.table_id,\n    record_ids=record_ids\n)\n</code></pre>"},{"location":"tables/management/#best-practices","title":"Best Practices","text":"<ol> <li>Table Design</li> <li>Plan table structure carefully</li> <li>Use appropriate field types</li> <li>Consider relationships</li> <li> <p>Document table purpose</p> </li> <li> <p>Performance</p> </li> <li>Use batch operations</li> <li>Implement pagination</li> <li>Optimize queries</li> <li> <p>Monitor table size</p> </li> <li> <p>Data Integrity</p> </li> <li>Validate data before operations</li> <li>Regular data cleanup</li> <li>Backup important data</li> <li> <p>Handle errors appropriately</p> </li> <li> <p>Organization</p> </li> <li>Use clear naming conventions</li> <li>Group related tables</li> <li>Maintain documentation</li> <li>Regular maintenance</li> </ol>"},{"location":"tables/management/#next-steps","title":"Next Steps","text":"<ul> <li>Table Connections</li> <li>Data Insertion</li> <li>Bulk Operations</li> <li>Views Creation</li> </ul>"},{"location":"views/creation/","title":"Creating and Managing Views","text":"<p>This guide covers how to create and manage views in Teable tables.</p>"},{"location":"views/creation/#creating-views","title":"Creating Views","text":""},{"location":"views/creation/#basic-view-creation","title":"Basic View Creation","text":"<pre><code>from teable import TeableClient, TeableConfig\n\n# Initialize the client\nclient = TeableClient(TeableConfig(\n    api_url=\"https://your-teable-instance.com/api\",\n    api_key=\"your-api-key\"\n))\n\n# Create a grid view\nview = client.views.create(\n    table_id=\"table_id\",\n    name=\"My Grid View\",\n    type=\"grid\"\n)\n\nprint(f\"Created view: {view.view_id}\")\n</code></pre>"},{"location":"views/creation/#view-configuration","title":"View Configuration","text":""},{"location":"views/creation/#filtering-records","title":"Filtering Records","text":"<pre><code>from teable import FilterOperator\n\n# Create view with filters\nview = client.views.create(\n    table_id=\"table_id\",\n    name=\"Active Projects\",\n    type=\"grid\",\n    filter={\n        \"operator\": \"and\",\n        \"conditions\": [\n            {\n                \"field\": \"Status\",\n                \"operator\": FilterOperator.EQUALS,\n                \"value\": \"Active\"\n            },\n            {\n                \"field\": \"Due Date\",\n                \"operator\": FilterOperator.GREATER_THAN,\n                \"value\": \"2023-01-01\"\n            }\n        ]\n    }\n)\n</code></pre>"},{"location":"views/creation/#sorting-records","title":"Sorting Records","text":"<pre><code>from teable import SortDirection\n\n# Create view with sorting\nview = client.views.create(\n    table_id=\"table_id\",\n    name=\"Projects by Priority\",\n    type=\"grid\",\n    sort=[\n        {\n            \"field\": \"Priority\",\n            \"direction\": SortDirection.DESCENDING\n        },\n        {\n            \"field\": \"Due Date\",\n            \"direction\": SortDirection.ASCENDING\n        }\n    ]\n)\n</code></pre>"},{"location":"views/creation/#field-visibility","title":"Field Visibility","text":"<pre><code># Create view with specific visible fields\nview = client.views.create(\n    table_id=\"table_id\",\n    name=\"Simple View\",\n    type=\"grid\",\n    fields={\n        \"visible\": [\"Name\", \"Status\", \"Due Date\"],\n        \"hidden\": [\"Internal Notes\", \"Created By\"]\n    }\n)\n</code></pre>"},{"location":"views/creation/#managing-views","title":"Managing Views","text":""},{"location":"views/creation/#getting-views","title":"Getting Views","text":"<pre><code># Get table\ntable = client.tables.get(\"table_id\")\n\n# Get all views in a table\nviews = table.views\n</code></pre>"},{"location":"views/creation/#updating-views","title":"Updating Views","text":"<pre><code>from teable import FilterOperator\n\n# Update view configuration\nview = client.views.update(\n    view_id=\"view_id\",\n    name=\"Updated View Name\",\n    filter={\n        \"operator\": \"and\",\n        \"conditions\": [\n            {\n                \"field\": \"Status\",\n                \"operator\": FilterOperator.IN,\n                \"value\": [\"Active\", \"In Progress\"]\n            }\n        ]\n    }\n)\n</code></pre>"},{"location":"views/creation/#deleting-views","title":"Deleting Views","text":"<pre><code># Delete a view\nclient.views.delete(view_id=\"view_id\")\n</code></pre>"},{"location":"views/creation/#working-with-view-data","title":"Working with View Data","text":""},{"location":"views/creation/#getting-records-from-a-view","title":"Getting Records from a View","text":"<pre><code># Get records using view's configuration\nrecords = client.records.get_records(\n    table_id=\"table_id\",\n    view_id=\"view_id\"\n)\n</code></pre>"},{"location":"views/creation/#pagination-in-views","title":"Pagination in Views","text":"<pre><code># Get paginated records from a view\nrecords = client.records.get_records(\n    table_id=\"table_id\",\n    view_id=\"view_id\",\n    take=50,    # Number of records to return\n    skip=100    # Number of records to skip\n)\n</code></pre>"},{"location":"views/creation/#best-practices","title":"Best Practices","text":"<ol> <li>View Organization</li> <li>Use clear, descriptive names</li> <li>Group related views together</li> <li>Consider user permissions</li> <li> <p>Document view purposes</p> </li> <li> <p>Performance</p> </li> <li>Optimize filters for performance</li> <li>Use appropriate pagination</li> <li>Consider data volume</li> <li> <p>Monitor view usage</p> </li> <li> <p>User Experience</p> </li> <li>Configure meaningful defaults</li> <li>Provide clear field visibility</li> <li>Consider sorting and filtering</li> <li> <p>Keep views organized</p> </li> <li> <p>Maintenance</p> </li> <li>Regular view audits</li> <li>Clean up unused views</li> <li>Update view configurations</li> <li>Monitor view usage</li> </ol>"},{"location":"views/creation/#next-steps","title":"Next Steps","text":"<ul> <li>Table Management</li> <li>Record Operations</li> <li>Field Configuration</li> <li>Advanced Topics</li> </ul>"}]}