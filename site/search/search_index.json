{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Teable-Client Documentation","text":"<p>Welcome to the official documentation for the Teable-Client Python library. This comprehensive guide will help you understand and effectively use the Teable-Client library for interacting with the Teable API.</p>"},{"location":"#overview","title":"Overview","text":"<p>Teable-Client is a professional Python library that provides an object-oriented interface for managing tables, records, fields, and views in Teable. Whether you're building a simple data management solution or a complex application, this library offers the tools and flexibility you need.</p>"},{"location":"#key-features","title":"Key Features","text":""},{"location":"#complete-api-coverage","title":"Complete API Coverage \ud83c\udf10","text":"<ul> <li>Full Teable API support with an intuitive object-oriented interface</li> <li>Comprehensive field type support with validation</li> <li>Dashboard and plugin management</li> <li>Data aggregation and analytics</li> <li>User authentication and profile management</li> <li>File attachment handling</li> <li>Selection and range operations</li> </ul>"},{"location":"#data-management","title":"Data Management \ud83d\udcbe","text":"<ul> <li>Efficient batch operations for creating, updating, and deleting records</li> <li>Advanced querying capabilities with a fluent query builder</li> <li>Field calculation planning and conversion</li> <li>Table and view management</li> <li>Record selection and manipulation</li> </ul>"},{"location":"#performance-reliability","title":"Performance &amp; Reliability \u26a1","text":"<ul> <li>Automatic rate limiting and retry handling</li> <li>Resource caching for improved performance</li> <li>Connection pooling and management</li> <li>Error handling and validation</li> </ul>"},{"location":"#developer-experience","title":"Developer Experience \ud83d\udc68\u200d\ud83d\udcbb","text":"<ul> <li>Type hints for better IDE support</li> <li>Detailed documentation and examples</li> <li>Comprehensive test coverage</li> <li>Professional logging and debugging</li> </ul>"},{"location":"#core-components","title":"Core Components","text":"<p>The Teable client provides several specialized manager classes for different aspects of the API:</p> <ul> <li>TableManager: Handle table operations, metadata, and structure</li> <li>FieldManager: Manage field definitions, types, and calculations</li> <li>RecordManager: Create, update, and delete records</li> <li>ViewManager: Configure and manage table views</li> <li>DashboardManager: Create and manage dashboards and widgets</li> <li>AggregationManager: Perform data aggregation and analytics</li> <li>SelectionManager: Handle table selection and range operations</li> <li>AttachmentManager: Manage file uploads and attachments</li> <li>AuthManager: Handle user authentication and profile management</li> </ul>"},{"location":"#getting-started","title":"Getting Started","text":"<p>To get started with Teable-Client, visit our Installation Guide and Quick Start Guide.</p>"},{"location":"#documentation-structure","title":"Documentation Structure","text":"<p>This documentation is organized into several main sections:</p> <ul> <li>Getting Started: Installation, configuration, and basic usage</li> <li>Spaces: Managing workspaces and organizational units</li> <li>Bases: Working with databases and data collections</li> <li>Tables: Creating and managing data tables</li> <li>Records: CRUD operations and bulk data management</li> <li>Advanced Topics: Authentication, error handling, and best practices</li> <li>API Reference: Detailed documentation of all classes and methods</li> </ul>"},{"location":"#support-and-contributing","title":"Support and Contributing","text":"<p>If you encounter any issues or would like to contribute to the project, please visit our GitHub repository. We welcome contributions and feedback from the community!</p>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the MIT License. See the LICENSE file in the repository for more details.</p>"},{"location":"advanced/authentication/","title":"Authentication","text":"<p>This guide covers authentication methods and security best practices for the Teable-Client library.</p>"},{"location":"advanced/authentication/#api-key-authentication","title":"API Key Authentication","text":""},{"location":"advanced/authentication/#basic-authentication","title":"Basic Authentication","text":"<pre><code>from teable import TeableClient, TeableConfig\n\n# Initialize with API key\nclient = TeableClient(TeableConfig(\n    api_url=\"https://your-teable-instance.com/api\",\n    api_key=\"your-api-key\"\n))\n</code></pre>"},{"location":"advanced/authentication/#environment-variables","title":"Environment Variables","text":"<p>For better security, use environment variables:</p> <pre><code>import os\nfrom teable import TeableClient, TeableConfig\n\n# Load API key from environment\nclient = TeableClient(TeableConfig(\n    api_url=os.getenv(\"TEABLE_API_URL\"),\n    api_key=os.getenv(\"TEABLE_API_KEY\")\n))\n</code></pre>"},{"location":"advanced/authentication/#oauth-authentication","title":"OAuth Authentication","text":""},{"location":"advanced/authentication/#oauth-flow","title":"OAuth Flow","text":"<ol> <li>Register your application</li> <li>Get client credentials</li> <li>Implement OAuth flow</li> <li>Handle token refresh</li> </ol> <pre><code>from teable import TeableClient, TeableConfig, OAuth2Config\n\n# OAuth configuration\noauth_config = OAuth2Config(\n    client_id=\"your-client-id\",\n    client_secret=\"your-client-secret\",\n    redirect_uri=\"your-redirect-uri\"\n)\n\n# Initialize with OAuth\nconfig = TeableConfig(\n    api_url=\"https://your-teable-instance.com/api\",\n    oauth=oauth_config\n)\nclient = TeableClient(config)\n</code></pre>"},{"location":"advanced/authentication/#token-management","title":"Token Management","text":""},{"location":"advanced/authentication/#token-refresh","title":"Token Refresh","text":"<pre><code># Automatic token refresh\nconfig = TeableConfig(\n    api_url=\"https://your-teable-instance.com/api\",\n    oauth=oauth_config,\n    auto_refresh_token=True\n)\n\n# Manual token refresh\nnew_token = client.refresh_access_token()\n</code></pre>"},{"location":"advanced/authentication/#token-storage","title":"Token Storage","text":"<pre><code>class TokenStorage:\n    def save_token(self, token):\n        # Implement secure token storage\n        pass\n\n    def load_token(self):\n        # Implement secure token loading\n        pass\n\n# Use custom token storage\nconfig = TeableConfig(\n    api_url=\"https://your-teable-instance.com/api\",\n    oauth=oauth_config,\n    token_storage=TokenStorage()\n)\n</code></pre>"},{"location":"advanced/authentication/#security-best-practices","title":"Security Best Practices","text":"<ol> <li>API Key Security</li> <li>Never hardcode API keys</li> <li>Use environment variables</li> <li>Rotate keys regularly</li> <li> <p>Use separate keys for different environments</p> </li> <li> <p>OAuth Security</p> </li> <li>Use HTTPS</li> <li>Validate redirect URIs</li> <li>Implement PKCE</li> <li> <p>Handle token expiration</p> </li> <li> <p>General Security</p> </li> <li>Implement rate limiting</li> <li>Monitor API usage</li> <li>Log authentication events</li> <li>Regular security audits</li> </ol>"},{"location":"advanced/authentication/#error-handling","title":"Error Handling","text":"<pre><code>from teable.exceptions import AuthenticationError, TokenExpiredError\n\ntry:\n    client = TeableClient(config)\n    # Use client...\nexcept AuthenticationError as e:\n    print(f\"Authentication failed: {e}\")\nexcept TokenExpiredError as e:\n    print(f\"Token expired: {e}\")\n    # Implement token refresh\n</code></pre>"},{"location":"advanced/authentication/#next-steps","title":"Next Steps","text":"<ul> <li>Error Handling</li> <li>Best Practices</li> <li>API Reference</li> </ul>"},{"location":"advanced/best-practices/","title":"Best Practices","text":"<p>This guide covers best practices and recommended patterns for using the Teable-Client library effectively. Learn about optimization, security, error handling, and performance considerations.</p>"},{"location":"advanced/best-practices/#code-organization","title":"Code Organization","text":""},{"location":"advanced/best-practices/#client-configuration","title":"Client Configuration","text":"<pre><code>from teable import TeableClient, TeableConfig\nimport os\n\ndef create_client(environment='production'):\n    \"\"\"Create a properly configured client instance.\"\"\"\n    configs = {\n        'production': {\n            'api_url': os.getenv('TEABLE_PROD_API_URL'),\n            'api_key': os.getenv('TEABLE_PROD_API_KEY')\n        },\n        'staging': {\n            'api_url': os.getenv('TEABLE_STAGING_API_URL'),\n            'api_key': os.getenv('TEABLE_STAGING_API_KEY')\n        }\n    }\n\n    env_config = configs.get(environment)\n    if not env_config:\n        raise ValueError(f\"Invalid environment: {environment}\")\n\n    config = TeableConfig(\n        api_url=env_config['api_url'],\n        api_key=env_config['api_key']\n    )\n\n    return TeableClient(config)\n</code></pre>"},{"location":"advanced/best-practices/#resource-management","title":"Resource Management","text":"<pre><code>class TeableManager:\n    \"\"\"Centralized manager for Teable resources.\"\"\"\n\n    def __init__(self, client):\n        self.client = client\n        self._space_cache = {}\n        self._base_cache = {}\n        self._table_cache = {}\n\n    def get_space(self, space_id):\n        \"\"\"Get space with caching.\"\"\"\n        if space_id not in self._space_cache:\n            self._space_cache[space_id] = self.client.get_space(space_id)\n        return self._space_cache[space_id]\n\n    def get_base(self, base_id):\n        \"\"\"Get base with caching.\"\"\"\n        if base_id not in self._base_cache:\n            self._base_cache[base_id] = self.client.get_base(base_id)\n        return self._base_cache[base_id]\n\n    def get_table(self, table_id):\n        \"\"\"Get table with caching.\"\"\"\n        if table_id not in self._table_cache:\n            self._table_cache[table_id] = self.client.get_table(table_id)\n        return self._table_cache[table_id]\n\n    def clear_cache(self):\n        \"\"\"Clear all caches.\"\"\"\n        self._space_cache.clear()\n        self._base_cache.clear()\n        self._table_cache.clear()\n</code></pre>"},{"location":"advanced/best-practices/#performance-optimization","title":"Performance Optimization","text":""},{"location":"advanced/best-practices/#batch-operations","title":"Batch Operations","text":"<pre><code>def batch_process_records(table, records, batch_size=1000):\n    \"\"\"Process records in batches for optimal performance.\"\"\"\n    for i in range(0, len(records), batch_size):\n        batch = records[i:i + batch_size]\n        result = table.batch_create_records(batch)\n        yield result\n\n# Usage\nrecords = [{\"Name\": f\"Record {i}\"} for i in range(10000)]\nfor result in batch_process_records(table, records):\n    print(f\"Processed batch: {result.success_count} successful\")\n</code></pre>"},{"location":"advanced/best-practices/#query-optimization","title":"Query Optimization","text":"<pre><code>def optimize_query(table, filters=None, sort=None, fields=None):\n    \"\"\"Create optimized queries.\"\"\"\n    query = table.query()\n\n    # Add specific field projection\n    if fields:\n        query = query.select(fields)\n\n    # Add filters\n    if filters:\n        for field, operator, value in filters:\n            query = query.filter(field, operator, value)\n\n    # Add sorting\n    if sort:\n        for field, direction in sort:\n            query = query.sort(field, direction)\n\n    return query\n\n# Usage\nquery = optimize_query(\n    table,\n    filters=[(\"Status\", \"=\", \"Active\")],\n    sort=[(\"CreatedDate\", \"desc\")],\n    fields=[\"Name\", \"Status\", \"CreatedDate\"]\n)\nrecords = table.get_records(query=query)\n</code></pre>"},{"location":"advanced/best-practices/#data-validation","title":"Data Validation","text":""},{"location":"advanced/best-practices/#field-validation","title":"Field Validation","text":"<pre><code>def validate_record_data(table, data):\n    \"\"\"Validate record data before creation/update.\"\"\"\n    required_fields = [f for f in table.fields if f.is_required]\n\n    # Check required fields\n    for field in required_fields:\n        if field.name not in data:\n            raise ValidationError(f\"Missing required field: {field.name}\")\n\n    # Validate field values\n    for field_name, value in data.items():\n        field = next((f for f in table.fields if f.name == field_name), None)\n        if field:\n            field.validate_value(value)\n        else:\n            raise ValidationError(f\"Unknown field: {field_name}\")\n\n    return True\n</code></pre>"},{"location":"advanced/best-practices/#data-cleaning","title":"Data Cleaning","text":"<pre><code>def clean_record_data(data):\n    \"\"\"Clean and normalize record data.\"\"\"\n    cleaned = {}\n\n    for key, value in data.items():\n        # Remove whitespace\n        if isinstance(value, str):\n            value = value.strip()\n\n        # Convert empty strings to None\n        if value == \"\":\n            value = None\n\n        # Skip None values\n        if value is not None:\n            cleaned[key] = value\n\n    return cleaned\n</code></pre>"},{"location":"advanced/best-practices/#error-handling","title":"Error Handling","text":""},{"location":"advanced/best-practices/#comprehensive-error-handling","title":"Comprehensive Error Handling","text":"<pre><code>from contextlib import contextmanager\n\n@contextmanager\ndef teable_operation():\n    \"\"\"Context manager for Teable operations.\"\"\"\n    try:\n        yield\n    except ValidationError as e:\n        logger.error(f\"Validation error: {e}\")\n        raise\n    except AuthenticationError as e:\n        logger.error(f\"Authentication error: {e}\")\n        raise\n    except RateLimitError as e:\n        logger.warning(f\"Rate limit exceeded: {e}\")\n        raise\n    except TeableError as e:\n        logger.error(f\"Teable error: {e}\")\n        raise\n    except Exception as e:\n        logger.error(f\"Unexpected error: {e}\")\n        raise\n\n# Usage\nwith teable_operation():\n    record = table.create_record(data)\n</code></pre>"},{"location":"advanced/best-practices/#security","title":"Security","text":""},{"location":"advanced/best-practices/#secure-configuration","title":"Secure Configuration","text":"<pre><code>def load_secure_config():\n    \"\"\"Load secure configuration from environment.\"\"\"\n    required_vars = [\n        'TEABLE_API_URL',\n        'TEABLE_API_KEY'\n    ]\n\n    # Verify all required variables\n    missing = [var for var in required_vars if not os.getenv(var)]\n    if missing:\n        raise ValueError(f\"Missing environment variables: {missing}\")\n\n    return TeableConfig(\n        api_url=os.getenv('TEABLE_API_URL'),\n        api_key=os.getenv('TEABLE_API_KEY')\n    )\n</code></pre>"},{"location":"advanced/best-practices/#logging-and-monitoring","title":"Logging and Monitoring","text":""},{"location":"advanced/best-practices/#enhanced-logging","title":"Enhanced Logging","text":"<pre><code>import logging\n\ndef setup_logging():\n    \"\"\"Set up enhanced logging.\"\"\"\n    logging.basicConfig(\n        level=logging.INFO,\n        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'\n    )\n\n    # Create file handler\n    fh = logging.FileHandler('teable.log')\n    fh.setLevel(logging.INFO)\n\n    # Create console handler\n    ch = logging.StreamHandler()\n    ch.setLevel(logging.INFO)\n\n    # Create formatter\n    formatter = logging.Formatter(\n        '%(asctime)s - %(name)s - %(levelname)s - %(message)s'\n    )\n    fh.setFormatter(formatter)\n    ch.setFormatter(formatter)\n\n    # Get logger\n    logger = logging.getLogger('teable')\n    logger.addHandler(fh)\n    logger.addHandler(ch)\n\n    return logger\n</code></pre>"},{"location":"advanced/best-practices/#testing","title":"Testing","text":""},{"location":"advanced/best-practices/#test-utilities","title":"Test Utilities","text":"<pre><code>class TeableTestCase:\n    \"\"\"Base class for Teable tests.\"\"\"\n\n    def setUp(self):\n        \"\"\"Set up test environment.\"\"\"\n        self.client = TeableClient(TeableConfig(\n            api_url=os.getenv('TEABLE_TEST_API_URL'),\n            api_key=os.getenv('TEABLE_TEST_API_KEY')\n        ))\n\n    def tearDown(self):\n        \"\"\"Clean up test environment.\"\"\"\n        # Clean up test data\n        pass\n\n    def create_test_space(self):\n        \"\"\"Create a test space.\"\"\"\n        return self.client.create_space(f\"Test Space {uuid.uuid4()}\")\n\n    def create_test_base(self, space):\n        \"\"\"Create a test base.\"\"\"\n        return space.create_base(f\"Test Base {uuid.uuid4()}\")\n</code></pre>"},{"location":"advanced/best-practices/#general-best-practices","title":"General Best Practices","text":"<ol> <li>Resource Management</li> <li>Use context managers</li> <li>Implement proper cleanup</li> <li>Cache frequently accessed resources</li> <li> <p>Monitor resource usage</p> </li> <li> <p>Performance</p> </li> <li>Use batch operations</li> <li>Optimize queries</li> <li>Implement caching</li> <li> <p>Monitor performance metrics</p> </li> <li> <p>Error Handling</p> </li> <li>Implement comprehensive error handling</li> <li>Use appropriate error types</li> <li>Log errors with context</li> <li> <p>Implement retry mechanisms</p> </li> <li> <p>Security</p> </li> <li>Use environment variables</li> <li>Implement proper authentication</li> <li>Validate input data</li> <li>Follow security best practices</li> </ol>"},{"location":"advanced/best-practices/#next-steps","title":"Next Steps","text":"<ul> <li>Authentication</li> <li>Error Handling</li> <li>API Reference</li> </ul>"},{"location":"advanced/error-handling/","title":"Error Handling","text":"<p>This guide covers comprehensive error handling strategies for the Teable-Client library. Learn how to handle various types of errors and implement robust error recovery mechanisms.</p>"},{"location":"advanced/error-handling/#exception-types","title":"Exception Types","text":""},{"location":"advanced/error-handling/#core-exceptions","title":"Core Exceptions","text":"<pre><code>from teable.exceptions import (\n    TeableError,           # Base exception for all Teable errors\n    ValidationError,       # Data validation errors\n    AuthenticationError,   # Authentication failures\n    ResourceNotFoundError, # Resource not found errors\n    RateLimitError,       # API rate limit exceeded\n    NetworkError          # Network-related errors\n)\n</code></pre>"},{"location":"advanced/error-handling/#basic-error-handling","title":"Basic Error Handling","text":""},{"location":"advanced/error-handling/#simple-try-catch","title":"Simple Try-Catch","text":"<pre><code>from teable import TeableClient, TeableConfig\n\ntry:\n    client = TeableClient(TeableConfig(\n        api_url=\"https://your-teable-instance.com/api\",\n        api_key=\"your-api-key\"\n    ))\n\n    # Perform operations\n    table = client.get_table(\"table_id\")\n    record = table.create_record({\"Name\": \"Test\"})\n\nexcept ValidationError as e:\n    print(f\"Data validation error: {e}\")\nexcept AuthenticationError as e:\n    print(f\"Authentication failed: {e}\")\nexcept ResourceNotFoundError as e:\n    print(f\"Resource not found: {e}\")\nexcept TeableError as e:\n    print(f\"Teable error: {e}\")\nexcept Exception as e:\n    print(f\"Unexpected error: {e}\")\n</code></pre>"},{"location":"advanced/error-handling/#advanced-error-handling","title":"Advanced Error Handling","text":""},{"location":"advanced/error-handling/#custom-error-handler","title":"Custom Error Handler","text":"<pre><code>class ErrorHandler:\n    def __init__(self, logger=None):\n        self.logger = logger\n        self.retry_count = 0\n        self.max_retries = 3\n\n    def handle_error(self, error, context=None):\n        \"\"\"Handle different types of errors.\"\"\"\n        if isinstance(error, ValidationError):\n            self._handle_validation_error(error, context)\n        elif isinstance(error, AuthenticationError):\n            self._handle_auth_error(error)\n        elif isinstance(error, RateLimitError):\n            self._handle_rate_limit_error(error)\n        elif isinstance(error, NetworkError):\n            self._handle_network_error(error)\n        else:\n            self._handle_unknown_error(error)\n\n    def _handle_validation_error(self, error, context):\n        if self.logger:\n            self.logger.error(f\"Validation error: {error}\")\n            if context:\n                self.logger.error(f\"Context: {context}\")\n        # Implement validation error recovery\n\n    def _handle_auth_error(self, error):\n        if self.logger:\n            self.logger.error(f\"Authentication error: {error}\")\n        # Implement auth error recovery\n\n    def _handle_rate_limit_error(self, error):\n        if self.logger:\n            self.logger.warning(f\"Rate limit exceeded: {error}\")\n        # Implement rate limit handling\n\n    def _handle_network_error(self, error):\n        if self.logger:\n            self.logger.error(f\"Network error: {error}\")\n        # Implement network error recovery\n\n    def _handle_unknown_error(self, error):\n        if self.logger:\n            self.logger.error(f\"Unknown error: {error}\")\n        # Implement unknown error handling\n</code></pre>"},{"location":"advanced/error-handling/#using-the-error-handler","title":"Using the Error Handler","text":"<pre><code>import logging\n\n# Set up logging\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(__name__)\n\n# Create error handler\nerror_handler = ErrorHandler(logger)\n\n# Use in operations\ntry:\n    client = TeableClient(config)\n    table = client.get_table(\"table_id\")\n    record = table.create_record({\"Name\": \"Test\"})\nexcept TeableError as e:\n    error_handler.handle_error(e, context={\"operation\": \"create_record\"})\n</code></pre>"},{"location":"advanced/error-handling/#retry-mechanisms","title":"Retry Mechanisms","text":""},{"location":"advanced/error-handling/#basic-retry","title":"Basic Retry","text":"<pre><code>def retry_operation(operation, max_retries=3, delay=1):\n    \"\"\"Retry an operation with exponential backoff.\"\"\"\n    for attempt in range(max_retries):\n        try:\n            return operation()\n        except (NetworkError, RateLimitError) as e:\n            if attempt == max_retries - 1:\n                raise\n            time.sleep(delay * (2 ** attempt))\n</code></pre>"},{"location":"advanced/error-handling/#advanced-retry-with-backoff","title":"Advanced Retry with Backoff","text":"<pre><code>import time\nfrom functools import wraps\n\ndef retry_with_backoff(max_retries=3, base_delay=1, max_delay=60):\n    def decorator(func):\n        @wraps(func)\n        def wrapper(*args, **kwargs):\n            retries = 0\n            while retries &lt; max_retries:\n                try:\n                    return func(*args, **kwargs)\n                except (NetworkError, RateLimitError) as e:\n                    retries += 1\n                    if retries == max_retries:\n                        raise\n\n                    delay = min(base_delay * (2 ** (retries - 1)), max_delay)\n                    time.sleep(delay)\n            return None\n        return wrapper\n    return decorator\n\n# Usage\n@retry_with_backoff(max_retries=3)\ndef create_record(table, data):\n    return table.create_record(data)\n</code></pre>"},{"location":"advanced/error-handling/#batch-operation-error-handling","title":"Batch Operation Error Handling","text":""},{"location":"advanced/error-handling/#handling-batch-failures","title":"Handling Batch Failures","text":"<pre><code>def handle_batch_operation(table, records, operation='create'):\n    \"\"\"Handle batch operations with error recovery.\"\"\"\n    results = {\n        'successful': [],\n        'failed': [],\n        'errors': []\n    }\n\n    try:\n        if operation == 'create':\n            batch_result = table.batch_create_records(records)\n        elif operation == 'update':\n            batch_result = table.batch_update_records(records)\n        else:\n            raise ValueError(f\"Unsupported operation: {operation}\")\n\n        # Process results\n        results['successful'] = batch_result.successful\n\n        # Handle partial failures\n        for error in batch_result.errors:\n            results['failed'].append({\n                'record': records[error.index],\n                'error': error.message\n            })\n\n    except TeableError as e:\n        results['errors'].append(str(e))\n\n    return results\n</code></pre>"},{"location":"advanced/error-handling/#best-practices","title":"Best Practices","text":"<ol> <li>Error Classification</li> <li>Categorize errors appropriately</li> <li>Handle specific exceptions before general ones</li> <li>Log errors with context</li> <li> <p>Implement appropriate recovery strategies</p> </li> <li> <p>Retry Strategies</p> </li> <li>Use exponential backoff</li> <li>Set maximum retry limits</li> <li>Handle rate limiting</li> <li> <p>Consider operation idempotency</p> </li> <li> <p>Error Recovery</p> </li> <li>Implement graceful degradation</li> <li>Maintain data consistency</li> <li>Provide meaningful error messages</li> <li> <p>Consider partial success scenarios</p> </li> <li> <p>Logging and Monitoring</p> </li> <li>Log errors with context</li> <li>Monitor error rates</li> <li>Set up alerts</li> <li>Track error patterns</li> </ol>"},{"location":"advanced/error-handling/#next-steps","title":"Next Steps","text":"<ul> <li>Best Practices</li> <li>Authentication</li> <li>API Reference</li> </ul>"},{"location":"api/client/","title":"API Reference: TeableClient","text":"<p>This document provides detailed API reference for the TeableClient class, which is the main entry point for interacting with the Teable API.</p>"},{"location":"api/client/#teableclient","title":"TeableClient","text":"<p>The TeableClient class provides the primary interface for interacting with Teable services.</p>"},{"location":"api/client/#constructor","title":"Constructor","text":"<pre><code>from teable import TeableClient, TeableConfig\n\nclient = TeableClient(\n    config=TeableConfig(\n        api_url=\"https://your-teable-instance.com/api\",\n        api_key=\"your-api-key\"\n    )\n)\n</code></pre>"},{"location":"api/client/#configuration-options","title":"Configuration Options","text":"<p>The <code>TeableConfig</code> class accepts the following parameters:</p> Parameter Type Required Description api_url str Yes The base URL of your Teable instance API api_key str Yes Your API key for authentication timeout int No Request timeout in seconds (default: 30) max_retries int No Maximum number of retry attempts (default: 3) cache_enabled bool No Enable response caching (default: True)"},{"location":"api/client/#space-operations","title":"Space Operations","text":""},{"location":"api/client/#get-spaces","title":"Get Spaces","text":"<p>Retrieve all accessible spaces.</p> <pre><code>spaces = client.get_spaces()\n</code></pre> <p>Returns: <code>List[Space]</code></p>"},{"location":"api/client/#get-space","title":"Get Space","text":"<p>Get a specific space by ID.</p> <pre><code>space = client.get_space(\"space_id\")\n</code></pre> <p>Parameters: - space_id (str): The ID of the space to retrieve</p> <p>Returns: <code>Space</code></p>"},{"location":"api/client/#create-space","title":"Create Space","text":"<p>Create a new space.</p> <pre><code>space = client.create_space(\"My New Space\")\n</code></pre> <p>Parameters: - name (str): The name for the new space</p> <p>Returns: <code>Space</code></p>"},{"location":"api/client/#base-operations","title":"Base Operations","text":""},{"location":"api/client/#get-bases","title":"Get Bases","text":"<p>Retrieve all accessible bases.</p> <pre><code>bases = client.get_bases()\n</code></pre> <p>Returns: <code>List[Base]</code></p>"},{"location":"api/client/#get-base","title":"Get Base","text":"<p>Get a specific base by ID.</p> <pre><code>base = client.get_base(\"base_id\")\n</code></pre> <p>Parameters: - base_id (str): The ID of the base to retrieve</p> <p>Returns: <code>Base</code></p>"},{"location":"api/client/#create-base","title":"Create Base","text":"<p>Create a new base in a space.</p> <pre><code>base = client.create_base(\n    space_id=\"space_id\",\n    name=\"My New Base\",\n    icon=\"\ud83d\udcca\"  # Optional\n)\n</code></pre> <p>Parameters: - space_id (str): The ID of the space to create the base in - name (str, optional): The name for the new base - icon (str, optional): An emoji or icon identifier</p> <p>Returns: <code>Base</code></p>"},{"location":"api/client/#duplicate-base","title":"Duplicate Base","text":"<p>Create a copy of an existing base.</p> <pre><code>base = client.duplicate_base(\n    from_base_id=\"source_base_id\",\n    space_id=\"target_space_id\",\n    name=\"Duplicated Base\",\n    with_records=True\n)\n</code></pre> <p>Parameters: - from_base_id (str): The ID of the base to duplicate - space_id (str): The ID of the space to create the duplicate in - name (str, optional): The name for the duplicated base - with_records (bool): Whether to include records in the duplicate</p> <p>Returns: <code>Base</code></p>"},{"location":"api/client/#table-operations","title":"Table Operations","text":""},{"location":"api/client/#get-table","title":"Get Table","text":"<p>Get a specific table by ID.</p> <pre><code>table = client.get_table(\"table_id\")\n</code></pre> <p>Parameters: - table_id (str): The ID of the table to retrieve</p> <p>Returns: <code>Table</code></p>"},{"location":"api/client/#create-table","title":"Create Table","text":"<p>Create a new table in a base.</p> <pre><code>table = client.create_table(\n    base_id=\"base_id\",\n    name=\"My New Table\",\n    description=\"Table description\",\n    fields=[\n        {\n            \"name\": \"Name\",\n            \"type\": \"text\",\n            \"required\": True\n        },\n        {\n            \"name\": \"Age\",\n            \"type\": \"number\"\n        }\n    ]\n)\n</code></pre> <p>Parameters: - base_id (str): The ID of the base to create the table in - name (str): The name for the new table - description (str, optional): A description of the table - fields (List[Dict], optional): Field definitions for the table</p> <p>Returns: <code>Table</code></p>"},{"location":"api/client/#record-operations","title":"Record Operations","text":""},{"location":"api/client/#get-record","title":"Get Record","text":"<p>Get a specific record by ID.</p> <pre><code>record = client.get_record(\n    table_id=\"table_id\",\n    record_id=\"record_id\",\n    cell_format=\"json\"\n)\n</code></pre> <p>Parameters: - table_id (str): The ID of the table containing the record - record_id (str): The ID of the record to retrieve - cell_format (str, optional): Format for cell values ('json' or 'text')</p> <p>Returns: <code>Record</code></p>"},{"location":"api/client/#create-record","title":"Create Record","text":"<p>Create a new record in a table.</p> <pre><code>record = client.create_record(\n    table_id=\"table_id\",\n    fields={\n        \"Name\": \"John Doe\",\n        \"Age\": 30\n    }\n)\n</code></pre> <p>Parameters: - table_id (str): The ID of the table to create the record in - fields (Dict): The field values for the new record</p> <p>Returns: <code>Record</code></p>"},{"location":"api/client/#error-handling","title":"Error Handling","text":"<p>The client may raise the following exceptions:</p> <ul> <li><code>TeableError</code>: Base exception for all Teable errors</li> <li><code>ValidationError</code>: Data validation errors</li> <li><code>AuthenticationError</code>: Authentication failures</li> <li><code>ResourceNotFoundError</code>: Resource not found errors</li> <li><code>RateLimitError</code>: API rate limit exceeded</li> <li><code>NetworkError</code>: Network-related errors</li> </ul> <p>Example error handling:</p> <pre><code>from teable.exceptions import TeableError, ValidationError\n\ntry:\n    record = client.create_record(table_id, fields)\nexcept ValidationError as e:\n    print(f\"Invalid data: {e}\")\nexcept TeableError as e:\n    print(f\"Operation failed: {e}\")\n</code></pre>"},{"location":"api/client/#next-steps","title":"Next Steps","text":"<ul> <li>Models Reference</li> <li>Exceptions Reference</li> <li>Best Practices</li> </ul>"},{"location":"api/exceptions/","title":"API Reference: Exceptions","text":"<p>This document provides detailed API reference for all exception classes in the Teable-Client library.</p>"},{"location":"api/exceptions/#exception-hierarchy","title":"Exception Hierarchy","text":"<pre><code>TeableError\n\u251c\u2500\u2500 ValidationError\n\u251c\u2500\u2500 AuthenticationError\n\u251c\u2500\u2500 ResourceNotFoundError\n\u251c\u2500\u2500 RateLimitError\n\u251c\u2500\u2500 NetworkError\n\u2514\u2500\u2500 ConfigurationError\n</code></pre>"},{"location":"api/exceptions/#base-exception","title":"Base Exception","text":""},{"location":"api/exceptions/#teableerror","title":"TeableError","text":"<p>Base exception class for all Teable-specific errors.</p> <pre><code>from teable.exceptions import TeableError\n\ntry:\n    # Perform operation\n    pass\nexcept TeableError as e:\n    print(f\"Operation failed: {e}\")\n    print(f\"Error code: {e.code}\")\n    print(f\"Error details: {e.details}\")\n</code></pre> <p>Properties: - message (str): Human-readable error message - code (str): Error code identifier - details (Optional[Dict]): Additional error details</p>"},{"location":"api/exceptions/#validation-errors","title":"Validation Errors","text":""},{"location":"api/exceptions/#validationerror","title":"ValidationError","text":"<p>Raised when data validation fails.</p> <pre><code>from teable.exceptions import ValidationError\n\ntry:\n    table.create_record({\n        \"Name\": \"John Doe\",\n        \"Age\": \"invalid\"  # Should be a number\n    })\nexcept ValidationError as e:\n    print(f\"Validation failed: {e}\")\n    print(f\"Field: {e.field}\")\n    print(f\"Value: {e.value}\")\n    print(f\"Constraint: {e.constraint}\")\n</code></pre> <p>Properties: - field (str): Name of the field that failed validation - value (Any): Invalid value that caused the error - constraint (str): Description of the validation constraint that failed</p>"},{"location":"api/exceptions/#authentication-errors","title":"Authentication Errors","text":""},{"location":"api/exceptions/#authenticationerror","title":"AuthenticationError","text":"<p>Raised when authentication fails.</p> <pre><code>from teable.exceptions import AuthenticationError\n\ntry:\n    client = TeableClient(TeableConfig(\n        api_url=\"https://example.com\",\n        api_key=\"invalid-key\"\n    ))\nexcept AuthenticationError as e:\n    print(f\"Authentication failed: {e}\")\n    print(f\"Reason: {e.reason}\")\n</code></pre> <p>Properties: - reason (str): Specific reason for authentication failure - is_expired (bool): Whether the error is due to expired credentials</p>"},{"location":"api/exceptions/#tokenexpirederror","title":"TokenExpiredError","text":"<p>Raised when an OAuth token has expired.</p> <pre><code>from teable.exceptions import TokenExpiredError\n\ntry:\n    # Perform authenticated operation\n    pass\nexcept TokenExpiredError as e:\n    print(f\"Token expired: {e}\")\n    print(f\"Expiry time: {e.expiry_time}\")\n    # Implement token refresh\n</code></pre> <p>Properties: - expiry_time (datetime): When the token expired - can_refresh (bool): Whether the token can be refreshed</p>"},{"location":"api/exceptions/#resource-errors","title":"Resource Errors","text":""},{"location":"api/exceptions/#resourcenotfounderror","title":"ResourceNotFoundError","text":"<p>Raised when a requested resource doesn't exist.</p> <pre><code>from teable.exceptions import ResourceNotFoundError\n\ntry:\n    table = client.get_table(\"non-existent-id\")\nexcept ResourceNotFoundError as e:\n    print(f\"Resource not found: {e}\")\n    print(f\"Resource type: {e.resource_type}\")\n    print(f\"Resource ID: {e.resource_id}\")\n</code></pre> <p>Properties: - resource_type (str): Type of resource that wasn't found - resource_id (str): ID of the resource that wasn't found</p>"},{"location":"api/exceptions/#rate-limiting","title":"Rate Limiting","text":""},{"location":"api/exceptions/#ratelimiterror","title":"RateLimitError","text":"<p>Raised when API rate limits are exceeded.</p> <pre><code>from teable.exceptions import RateLimitError\n\ntry:\n    # Perform many operations\n    pass\nexcept RateLimitError as e:\n    print(f\"Rate limit exceeded: {e}\")\n    print(f\"Reset time: {e.reset_time}\")\n    print(f\"Retry after: {e.retry_after} seconds\")\n</code></pre> <p>Properties: - reset_time (datetime): When the rate limit will reset - retry_after (int): Seconds until next retry is allowed - limit (int): Current rate limit - remaining (int): Remaining requests allowed</p>"},{"location":"api/exceptions/#network-errors","title":"Network Errors","text":""},{"location":"api/exceptions/#networkerror","title":"NetworkError","text":"<p>Raised for network-related issues.</p> <pre><code>from teable.exceptions import NetworkError\n\ntry:\n    # Perform network operation\n    pass\nexcept NetworkError as e:\n    print(f\"Network error: {e}\")\n    print(f\"Status code: {e.status_code}\")\n    print(f\"Is timeout: {e.is_timeout}\")\n</code></pre> <p>Properties: - status_code (Optional[int]): HTTP status code if available - is_timeout (bool): Whether the error is due to timeout - is_connection_error (bool): Whether it's a connection error</p>"},{"location":"api/exceptions/#configuration-errors","title":"Configuration Errors","text":""},{"location":"api/exceptions/#configurationerror","title":"ConfigurationError","text":"<p>Raised when there are configuration issues.</p> <pre><code>from teable.exceptions import ConfigurationError\n\ntry:\n    client = TeableClient(TeableConfig(\n        api_url=\"invalid-url\"\n    ))\nexcept ConfigurationError as e:\n    print(f\"Configuration error: {e}\")\n    print(f\"Parameter: {e.parameter}\")\n</code></pre> <p>Properties: - parameter (str): Name of the invalid configuration parameter - reason (str): Reason for the configuration error</p>"},{"location":"api/exceptions/#error-handling-best-practices","title":"Error Handling Best Practices","text":""},{"location":"api/exceptions/#comprehensive-error-handling","title":"Comprehensive Error Handling","text":"<pre><code>from teable.exceptions import (\n    TeableError,\n    ValidationError,\n    AuthenticationError,\n    ResourceNotFoundError,\n    RateLimitError,\n    NetworkError\n)\n\ntry:\n    # Perform operations\n    client = TeableClient(config)\n    table = client.get_table(\"table_id\")\n    record = table.create_record(data)\n\nexcept ValidationError as e:\n    # Handle data validation errors\n    print(f\"Invalid data: {e}\")\n\nexcept AuthenticationError as e:\n    # Handle authentication issues\n    print(f\"Authentication failed: {e}\")\n\nexcept ResourceNotFoundError as e:\n    # Handle missing resources\n    print(f\"Resource not found: {e}\")\n\nexcept RateLimitError as e:\n    # Handle rate limiting\n    print(f\"Rate limit exceeded. Retry after {e.retry_after} seconds\")\n\nexcept NetworkError as e:\n    # Handle network issues\n    print(f\"Network error: {e}\")\n\nexcept TeableError as e:\n    # Handle any other Teable-specific errors\n    print(f\"Operation failed: {e}\")\n\nexcept Exception as e:\n    # Handle unexpected errors\n    print(f\"Unexpected error: {e}\")\n</code></pre>"},{"location":"api/exceptions/#next-steps","title":"Next Steps","text":"<ul> <li>Client Reference</li> <li>Models Reference</li> <li>Error Handling Guide</li> </ul>"},{"location":"api/models/","title":"API Reference: Models","text":"<p>This document provides detailed API reference for all model classes in the Teable-Client library.</p>"},{"location":"api/models/#space-models","title":"Space Models","text":""},{"location":"api/models/#space","title":"Space","text":"<p>Represents a space in Teable, which is a container for bases and other resources.</p> <pre><code>from teable import Space, SpaceRole\n\n# Space properties\nspace.space_id: str          # Unique identifier\nspace.name: str              # Display name\nspace.role: SpaceRole        # User's role in the space\nspace.organization: Optional[Organization]  # Associated organization\n</code></pre>"},{"location":"api/models/#methods","title":"Methods","text":"<pre><code># Update space information\nspace.update(name: str) -&gt; Space\n\n# Delete space\nspace.delete() -&gt; bool\n\n# Delete permanently\nspace.delete_permanent() -&gt; bool\n\n# Get invitation links\nspace.get_invitation_links() -&gt; List[Invitation]\n\n# Create invitation link\nspace.create_invitation_link(role: SpaceRole) -&gt; Invitation\n\n# Send email invitations\nspace.invite_by_email(\n    emails: List[str],\n    role: SpaceRole\n) -&gt; Dict[str, Dict[str, str]]\n\n# Get collaborators\nspace.get_collaborators(\n    include_system: Optional[bool] = None,\n    include_base: Optional[bool] = None,\n    skip: Optional[int] = None,\n    take: Optional[int] = None,\n    search: Optional[str] = None\n) -&gt; Tuple[List[Collaborator], int]\n</code></pre>"},{"location":"api/models/#spacerole","title":"SpaceRole","text":"<p>Enumeration of possible roles in a space.</p> <pre><code>from teable import SpaceRole\n\nSpaceRole.OWNER      # Full control\nSpaceRole.CREATOR    # Can create and manage content\nSpaceRole.EDITOR     # Can edit content\nSpaceRole.COMMENTER  # Can comment on content\nSpaceRole.VIEWER     # Can only view content\n</code></pre>"},{"location":"api/models/#base-models","title":"Base Models","text":""},{"location":"api/models/#base","title":"Base","text":"<p>Represents a base in Teable, which is a container for tables.</p> <pre><code>from teable import Base, CollaboratorType\n\n# Base properties\nbase.base_id: str           # Unique identifier\nbase.name: str              # Display name\nbase.space_id: str          # ID of containing space\nbase.icon: Optional[str]    # Base icon\nbase.collaborator_type: Optional[CollaboratorType]  # Type of collaborator\nbase.is_unrestricted: bool  # Access restriction flag\n</code></pre>"},{"location":"api/models/#methods_1","title":"Methods","text":"<pre><code># Update base information\nbase.update(\n    name: Optional[str] = None,\n    icon: Optional[str] = None\n) -&gt; Base\n\n# Delete base\nbase.delete() -&gt; bool\n\n# Delete permanently\nbase.delete_permanent() -&gt; bool\n\n# Update order\nbase.update_order(\n    anchor_id: str,\n    position: Position\n) -&gt; None\n\n# Duplicate base\nbase.duplicate(\n    space_id: str,\n    name: Optional[str] = None,\n    with_records: bool = False\n) -&gt; Base\n</code></pre>"},{"location":"api/models/#table-models","title":"Table Models","text":""},{"location":"api/models/#table","title":"Table","text":"<p>Represents a table in Teable, which stores records and fields.</p> <pre><code>from teable import Table\n\n# Table properties\ntable.table_id: str              # Unique identifier\ntable.name: str                  # Display name\ntable.description: Optional[str]  # Table description\n</code></pre>"},{"location":"api/models/#methods_2","title":"Methods","text":"<pre><code># Get fields\n@property\ndef fields(self) -&gt; List[Field]\n\n# Get views\n@property\ndef views(self) -&gt; List[View]\n\n# Get specific field\ndef get_field(self, field_id: str) -&gt; Field\n\n# Get specific view\ndef get_view(self, view_id: str) -&gt; View\n\n# Validate record fields\ndef validate_record_fields(self, fields: Dict[str, Any]) -&gt; None\n\n# Get records\ndef get_records(\n    self,\n    projection: Optional[List[str]] = None,\n    cell_format: str = 'json',\n    field_key_type: str = 'name',\n    view_id: Optional[str] = None,\n    filter: Optional[Dict[str, Any]] = None,\n    order_by: Optional[str] = None,\n    take: Optional[int] = None,\n    skip: Optional[int] = None\n) -&gt; List[Record]\n</code></pre>"},{"location":"api/models/#record-models","title":"Record Models","text":""},{"location":"api/models/#record","title":"Record","text":"<p>Represents a record in a table.</p> <pre><code>from teable import Record\n\n# Record properties\nrecord.record_id: str          # Unique identifier\nrecord.fields: Dict[str, Any]  # Field values\nrecord.name: Optional[str]     # Primary field value\nrecord.auto_number: Optional[int]  # Auto-incrementing number\nrecord.created_time: Optional[datetime]  # Creation timestamp\nrecord.last_modified_time: Optional[datetime]  # Last modification timestamp\nrecord.created_by: Optional[str]  # Creator user ID\nrecord.last_modified_by: Optional[str]  # Last modifier user ID\n</code></pre>"},{"location":"api/models/#methods_3","title":"Methods","text":"<pre><code># Get field value\ndef get_field_value(\n    self,\n    field: Union[str, Field],\n    cell_format: str = 'json'\n) -&gt; Any\n\n# Set field value\ndef set_field_value(\n    self,\n    field: Union[str, Field],\n    value: Any,\n    typecast: bool = False\n) -&gt; None\n</code></pre>"},{"location":"api/models/#recordbatch","title":"RecordBatch","text":"<p>Represents results from batch record operations.</p> <pre><code>from teable import RecordBatch\n\n# Properties\nbatch.successful: List[Record]  # Successfully processed records\nbatch.failed: List[Dict]       # Failed operations with error details\nbatch.total: int               # Total number of records in batch\n\n# Computed properties\n@property\ndef success_count(self) -&gt; int  # Number of successful operations\n\n@property\ndef failure_count(self) -&gt; int  # Number of failed operations\n\n@property\ndef success_rate(self) -&gt; float  # Success rate as percentage\n</code></pre>"},{"location":"api/models/#field-models","title":"Field Models","text":""},{"location":"api/models/#field","title":"Field","text":"<p>Base class for all field types.</p> <pre><code>from teable import Field\n\n# Field properties\nfield.field_id: str           # Unique identifier\nfield.name: str               # Display name\nfield.field_type: str         # Field type identifier\nfield.description: Optional[str]  # Field description\nfield.is_required: bool       # Required flag\nfield.is_primary: bool        # Primary field flag\nfield.is_computed: bool       # Computed field flag\n</code></pre>"},{"location":"api/models/#methods_4","title":"Methods","text":"<pre><code># Validate field value\ndef validate_value(self, value: Any) -&gt; None\n\n# Convert value to API format\ndef to_api_value(self, value: Any) -&gt; Any\n\n# Convert value from API format\ndef from_api_value(self, value: Any) -&gt; Any\n</code></pre>"},{"location":"api/models/#view-models","title":"View Models","text":""},{"location":"api/models/#view","title":"View","text":"<p>Represents a view of a table.</p> <pre><code>from teable import View\n\n# View properties\nview.view_id: str            # Unique identifier\nview.name: str               # Display name\nview.type: str              # View type\nview.filter: Optional[Dict]  # View filter configuration\nview.sort: Optional[List]    # View sort configuration\n</code></pre>"},{"location":"api/models/#methods_5","title":"Methods","text":"<pre><code># Update view\ndef update(self, config: Dict[str, Any]) -&gt; View\n\n# Delete view\ndef delete(self) -&gt; bool\n</code></pre>"},{"location":"api/models/#next-steps","title":"Next Steps","text":"<ul> <li>Client Reference</li> <li>Exceptions Reference</li> <li>Best Practices</li> </ul>"},{"location":"automation/workflows/","title":"Workflow Automation","text":"<p>This guide covers workflow automation capabilities in Teable, including triggers, actions, and automation patterns.</p>"},{"location":"automation/workflows/#triggers","title":"Triggers","text":""},{"location":"automation/workflows/#record-based-triggers","title":"Record-Based Triggers","text":"<pre><code>from teable import TeableClient, TeableConfig, Trigger\n\n# Initialize the client\nclient = TeableClient(TeableConfig(\n    api_url=\"https://your-teable-instance.com/api\",\n    api_key=\"your-api-key\"\n))\n\n# Get your table\ntable = client.get_table(\"table_id\")\n\n# Create record trigger\ntrigger = Trigger(\n    name=\"New Record Trigger\",\n    event=\"record.created\",\n    table_id=table.table_id,\n    conditions=[\n        {\n            \"field\": \"Status\",\n            \"operator\": \"=\",\n            \"value\": \"New\"\n        }\n    ]\n)\n\n# Register trigger handler\n@trigger.handler\ndef handle_new_record(event):\n    \"\"\"Handle new record creation.\"\"\"\n    record = event.record\n    print(f\"New record created: {record.record_id}\")\n    # Implement trigger logic\n</code></pre>"},{"location":"automation/workflows/#field-change-triggers","title":"Field Change Triggers","text":"<pre><code># Create field change trigger\nfield_trigger = Trigger(\n    name=\"Status Change Trigger\",\n    event=\"field.changed\",\n    table_id=table.table_id,\n    field_id=\"status_field_id\",\n    conditions=[\n        {\n            \"from\": \"In Progress\",\n            \"to\": \"Completed\"\n        }\n    ]\n)\n\n@field_trigger.handler\ndef handle_status_change(event):\n    \"\"\"Handle status field changes.\"\"\"\n    record = event.record\n    old_value = event.old_value\n    new_value = event.new_value\n    print(f\"Status changed from {old_value} to {new_value}\")\n    # Implement trigger logic\n</code></pre>"},{"location":"automation/workflows/#actions","title":"Actions","text":""},{"location":"automation/workflows/#record-actions","title":"Record Actions","text":"<pre><code>from teable import Action\n\n# Create record action\naction = Action(\n    name=\"Update Related Records\",\n    description=\"Update related records when status changes\"\n)\n\n@action.execute\ndef update_related_records(context):\n    \"\"\"Update related records.\"\"\"\n    record = context.record\n    related_records = record.get_field_value(\"Related Records\")\n\n    # Update each related record\n    for related_id in related_records:\n        related_record = table.get_record(related_id)\n        table.update_record(\n            record_id=related_id,\n            fields={\n                \"Status\": \"Updated\",\n                \"Last Updated\": context.timestamp\n            }\n        )\n</code></pre>"},{"location":"automation/workflows/#notification-actions","title":"Notification Actions","text":"<pre><code># Create notification action\nnotification_action = Action(\n    name=\"Send Notification\",\n    description=\"Send notification when record is assigned\"\n)\n\n@notification_action.execute\ndef send_notification(context):\n    \"\"\"Send notification to assigned user.\"\"\"\n    record = context.record\n    assignee = record.get_field_value(\"Assignee\")\n\n    if assignee:\n        notification = {\n            \"user_id\": assignee,\n            \"title\": \"New Assignment\",\n            \"message\": f\"You have been assigned to {record.name}\",\n            \"link\": f\"/record/{record.record_id}\"\n        }\n\n        client.send_notification(notification)\n</code></pre>"},{"location":"automation/workflows/#workflow-definitions","title":"Workflow Definitions","text":""},{"location":"automation/workflows/#creating-workflows","title":"Creating Workflows","text":"<pre><code>from teable import Workflow\n\n# Create workflow\nworkflow = Workflow(\n    name=\"Task Assignment Workflow\",\n    description=\"Handle task assignments and notifications\"\n)\n\n# Add triggers and actions\nworkflow.add_trigger(trigger)\nworkflow.add_action(action)\nworkflow.add_action(notification_action)\n\n# Set workflow order\nworkflow.set_execution_order([\n    \"update_related_records\",\n    \"send_notification\"\n])\n\n# Enable workflow\nworkflow.enable()\n</code></pre>"},{"location":"automation/workflows/#conditional-workflows","title":"Conditional Workflows","text":"<pre><code># Create conditional workflow\nconditional_workflow = Workflow(\n    name=\"Priority Task Workflow\",\n    description=\"Handle high priority tasks\"\n)\n\n@conditional_workflow.condition\ndef check_priority(context):\n    \"\"\"Check if task is high priority.\"\"\"\n    record = context.record\n    priority = record.get_field_value(\"Priority\")\n    return priority == \"High\"\n\n@conditional_workflow.action\ndef handle_priority_task(context):\n    \"\"\"Handle high priority task.\"\"\"\n    record = context.record\n\n    # Notify management\n    notification = {\n        \"user_id\": \"manager_id\",\n        \"title\": \"High Priority Task\",\n        \"message\": f\"New high priority task: {record.name}\",\n        \"priority\": \"urgent\"\n    }\n\n    client.send_notification(notification)\n\n    # Update task tracking\n    table.update_record(\n        record_id=record.record_id,\n        fields={\n            \"Tracked\": True,\n            \"Track Date\": context.timestamp\n        }\n    )\n</code></pre>"},{"location":"automation/workflows/#automation-patterns","title":"Automation Patterns","text":""},{"location":"automation/workflows/#sequential-workflows","title":"Sequential Workflows","text":"<pre><code>def create_sequential_workflow(table, steps):\n    \"\"\"Create workflow with sequential steps.\"\"\"\n    workflow = Workflow(\n        name=\"Sequential Process\",\n        description=\"Handle multi-step process\"\n    )\n\n    current_step = 0\n\n    @workflow.trigger\n    def step_completed(event):\n        \"\"\"Trigger when step is completed.\"\"\"\n        nonlocal current_step\n        record = event.record\n\n        if current_step &lt; len(steps):\n            # Execute current step\n            step = steps[current_step]\n            step(record)\n            current_step += 1\n\n            # Update progress\n            table.update_record(\n                record_id=record.record_id,\n                fields={\n                    \"Current Step\": current_step,\n                    \"Progress\": (current_step / len(steps)) * 100\n                }\n            )\n\n    return workflow\n</code></pre>"},{"location":"automation/workflows/#parallel-workflows","title":"Parallel Workflows","text":"<pre><code>def create_parallel_workflow(table, tasks):\n    \"\"\"Create workflow with parallel tasks.\"\"\"\n    workflow = Workflow(\n        name=\"Parallel Process\",\n        description=\"Handle parallel tasks\"\n    )\n\n    @workflow.trigger\n    def start_tasks(event):\n        \"\"\"Start parallel tasks.\"\"\"\n        record = event.record\n\n        # Create task records\n        for task in tasks:\n            table.create_record({\n                \"Parent\": record.record_id,\n                \"Task\": task[\"name\"],\n                \"Status\": \"Pending\",\n                \"Assigned To\": task[\"assignee\"]\n            })\n\n    @workflow.action\n    def check_completion(context):\n        \"\"\"Check if all tasks are complete.\"\"\"\n        record = context.record\n\n        # Get task records\n        task_records = table.get_records(\n            filter={\n                \"field\": \"Parent\",\n                \"operator\": \"=\",\n                \"value\": record.record_id\n            }\n        )\n\n        # Check completion\n        all_complete = all(\n            task.get_field_value(\"Status\") == \"Complete\"\n            for task in task_records\n        )\n\n        if all_complete:\n            table.update_record(\n                record_id=record.record_id,\n                fields={\"Status\": \"Complete\"}\n            )\n\n    return workflow\n</code></pre>"},{"location":"automation/workflows/#best-practices","title":"Best Practices","text":"<ol> <li>Workflow Design</li> <li>Keep workflows focused</li> <li>Handle errors gracefully</li> <li>Document workflow logic</li> <li> <p>Test thoroughly</p> </li> <li> <p>Performance</p> </li> <li>Optimize trigger conditions</li> <li>Use batch operations</li> <li>Monitor execution time</li> <li> <p>Handle timeouts</p> </li> <li> <p>Error Handling</p> </li> <li>Implement retry logic</li> <li>Log workflow errors</li> <li>Provide status updates</li> <li> <p>Handle edge cases</p> </li> <li> <p>Maintenance</p> </li> <li>Regular workflow audits</li> <li>Monitor execution logs</li> <li>Update documentation</li> <li>Version control workflows</li> </ol>"},{"location":"automation/workflows/#next-steps","title":"Next Steps","text":"<ul> <li>Data Synchronization</li> <li>Error Handling</li> <li>Best Practices</li> <li>API Reference</li> </ul>"},{"location":"bases/creation/","title":"Creating and Managing Bases","text":"<p>A base in Teable is a container for tables and other resources within a space. This guide covers how to create and manage bases using the Teable-Client library.</p>"},{"location":"bases/creation/#creating-a-base","title":"Creating a Base","text":""},{"location":"bases/creation/#basic-base-creation","title":"Basic Base Creation","text":"<p>The simplest way to create a base is within a space:</p> <pre><code>from teable import TeableClient, TeableConfig\n\n# Initialize the client\nclient = TeableClient(TeableConfig(\n    api_url=\"https://your-teable-instance.com/api\",\n    api_key=\"your-api-key\"\n))\n\n# Create a base in a space\nbase = client.create_base(\n    space_id=\"space123\",\n    name=\"Project Tracker\",\n    icon=\"\ud83d\udcca\"  # Optional emoji or icon identifier\n)\n\nprint(f\"Created base: {base.name} (ID: {base.base_id})\")\n</code></pre>"},{"location":"bases/creation/#creating-from-a-space-instance","title":"Creating from a Space Instance","text":"<p>You can also create a base directly from a space instance:</p> <pre><code># Get a space\nspace = client.get_space(\"space123\")\n\n# Create a base in this space\nbase = space.create_base(\n    name=\"Customer Database\",\n    icon=\"\ud83d\udc65\"\n)\n</code></pre>"},{"location":"bases/creation/#duplicating-bases","title":"Duplicating Bases","text":"<p>You can create a copy of an existing base:</p> <pre><code># Duplicate a base\nduplicated_base = client.duplicate_base(\n    from_base_id=\"base123\",\n    space_id=\"space123\",\n    name=\"Project Tracker Copy\",\n    with_records=True  # Include existing records in the copy\n)\n</code></pre> <p>Or duplicate from a base instance:</p> <pre><code># Get an existing base\nbase = client.get_base(\"base123\")\n\n# Create a duplicate\nduplicate = base.duplicate(\n    space_id=\"space123\",\n    name=\"Project Tracker - Development\",\n    with_records=False  # Start with empty tables\n)\n</code></pre>"},{"location":"bases/creation/#creating-from-templates","title":"Creating from Templates","text":"<p>You can create a new base from an existing template:</p> <pre><code># Create a base from a template\nbase = client.create_base_from_template(\n    space_id=\"space123\",\n    template_id=\"template123\",\n    with_records=True  # Include template records\n)\n</code></pre>"},{"location":"bases/creation/#base-configuration","title":"Base Configuration","text":""},{"location":"bases/creation/#updating-base-information","title":"Updating Base Information","text":"<p>You can update a base's name and icon:</p> <pre><code># Get a base\nbase = client.get_base(\"base123\")\n\n# Update base information\nupdated_base = base.update(\n    name=\"New Project Tracker\",\n    icon=\"\ud83d\ude80\"\n)\n</code></pre>"},{"location":"bases/creation/#managing-base-order","title":"Managing Base Order","text":"<p>You can arrange bases within a space:</p> <pre><code>from teable import Position\n\n# Update base position\nbase.update_order(\n    anchor_id=\"base456\",  # The base to position relative to\n    position=Position.AFTER  # or Position.BEFORE\n)\n</code></pre>"},{"location":"bases/creation/#base-permissions","title":"Base Permissions","text":""},{"location":"bases/creation/#checking-permissions","title":"Checking Permissions","text":"<pre><code># Get permissions for a base\npermissions = base.get_permissions()\n\n# Check specific permissions\nfor permission, allowed in permissions.items():\n    print(f\"{permission}: {'Allowed' if allowed else 'Not Allowed'}\")\n</code></pre>"},{"location":"bases/creation/#base-collaborators","title":"Base Collaborators","text":""},{"location":"bases/creation/#adding-collaborators","title":"Adding Collaborators","text":"<pre><code># Add collaborators to a base\ncollaborators = [\n    {\n        \"principalId\": \"user123\",\n        \"principalType\": \"user\"\n    },\n    {\n        \"principalId\": \"dept456\",\n        \"principalType\": \"department\"\n    }\n]\n\nbase.add_collaborators(\n    collaborators=collaborators,\n    role=\"editor\"  # Options: creator, editor, commenter, viewer\n)\n</code></pre>"},{"location":"bases/creation/#managing-collaborators","title":"Managing Collaborators","text":"<pre><code>from teable.models.collaborator import PrincipalType\n\n# List collaborators\ncollaborators, total = base.get_collaborators(\n    include_system=True,\n    take=100,\n    search=\"john\"\n)\n\n# Update collaborator role\nbase.update_collaborator(\n    principal_id=\"user123\",\n    principal_type=PrincipalType.USER,\n    role=\"editor\"\n)\n\n# Remove collaborator\nbase.delete_collaborator(\n    principal_id=\"user123\",\n    principal_type=PrincipalType.USER\n)\n</code></pre>"},{"location":"bases/creation/#base-invitations","title":"Base Invitations","text":""},{"location":"bases/creation/#creating-invitation-links","title":"Creating Invitation Links","text":"<pre><code># Create an invitation link\ninvitation = base.create_invitation_link(role=\"editor\")\nprint(f\"Invitation URL: {invitation.invite_url}\")\n\n# List all invitation links\ninvitations = base.get_invitation_links()\nfor inv in invitations:\n    print(f\"ID: {inv.invitation_id}\")\n    print(f\"Role: {inv.role}\")\n</code></pre>"},{"location":"bases/creation/#sending-email-invitations","title":"Sending Email Invitations","text":"<pre><code># Send invitation emails\nemails = [\"user1@example.com\", \"user2@example.com\"]\nresult = base.send_email_invitations(\n    emails=emails,\n    role=\"editor\"\n)\n\nfor email, info in result.items():\n    print(f\"Invited {email}: {info['invitationId']}\")\n</code></pre>"},{"location":"bases/creation/#base-deletion","title":"Base Deletion","text":""},{"location":"bases/creation/#moving-to-trash","title":"Moving to Trash","text":"<pre><code># Move base to trash (can be restored later)\nbase.delete()\n</code></pre>"},{"location":"bases/creation/#permanent-deletion","title":"Permanent Deletion","text":"<pre><code># Permanently delete a base (cannot be undone)\nbase.delete_permanent()\n</code></pre> <p>Warning</p> <p>Permanent deletion cannot be undone. Make sure to back up any important data before proceeding.</p>"},{"location":"bases/creation/#best-practices","title":"Best Practices","text":"<ol> <li>Base Organization</li> <li>Use clear, descriptive names for bases</li> <li>Organize bases logically within spaces</li> <li>Use appropriate icons for visual identification</li> <li> <p>Document base purposes and relationships</p> </li> <li> <p>Access Control</p> </li> <li>Regularly review collaborator access</li> <li>Use appropriate roles for different user types</li> <li>Clean up unused invitation links</li> <li> <p>Document access policies</p> </li> <li> <p>Data Management</p> </li> <li>Consider whether to include records when duplicating</li> <li>Back up important bases before major changes</li> <li>Use templates for standardized base structures</li> <li>Maintain consistent naming conventions</li> </ol>"},{"location":"bases/creation/#error-handling","title":"Error Handling","text":"<pre><code>from teable.exceptions import TeableError, ValidationError\n\ntry:\n    base = client.create_base(\n        space_id=\"space123\",\n        name=\"New Project\"\n    )\nexcept ValidationError as e:\n    print(f\"Invalid base configuration: {e}\")\nexcept TeableError as e:\n    print(f\"Error creating base: {e}\")\n</code></pre>"},{"location":"bases/creation/#next-steps","title":"Next Steps","text":"<p>After creating and configuring your base, you can:</p> <ul> <li>Manage base tables</li> <li>Configure table integration</li> <li>Work with records</li> </ul>"},{"location":"bases/management/","title":"Managing Bases","text":"<p>This guide covers the various operations available for managing bases in Teable, including listing bases, database connections, and querying capabilities.</p>"},{"location":"bases/management/#listing-bases","title":"Listing Bases","text":""},{"location":"bases/management/#getting-all-accessible-bases","title":"Getting All Accessible Bases","text":"<pre><code>from teable import TeableClient, TeableConfig\n\n# Initialize the client\nclient = TeableClient(TeableConfig(\n    api_url=\"https://your-teable-instance.com/api\",\n    api_key=\"your-api-key\"\n))\n\n# Get all accessible bases\nbases = client.get_bases()\n\nfor base in bases:\n    print(f\"Base: {base.name}\")\n    print(f\"ID: {base.base_id}\")\n    print(f\"Space ID: {base.space_id}\")\n    print(f\"Icon: {base.icon or 'No icon'}\")\n    print(\"---\")\n</code></pre>"},{"location":"bases/management/#getting-bases-in-a-space","title":"Getting Bases in a Space","text":"<pre><code># Get bases in a specific space\nspace_bases = client.get_space_bases(\"space123\")\n\n# Or from a space instance\nspace = client.get_space(\"space123\")\nspace_bases = space.get_bases()\n</code></pre>"},{"location":"bases/management/#getting-shared-bases","title":"Getting Shared Bases","text":"<pre><code># Get all shared bases\nshared_bases = client.get_shared_bases()\n\nfor base in shared_bases:\n    print(f\"Shared Base: {base.name}\")\n    print(f\"ID: {base.base_id}\")\n</code></pre>"},{"location":"bases/management/#database-connections","title":"Database Connections","text":"<p>Teable allows you to establish database connections for direct data access.</p>"},{"location":"bases/management/#creating-a-connection","title":"Creating a Connection","text":"<pre><code># Create a database connection\nconnection = client.create_db_connection(\"base123\")\n\n# Access connection details\nprint(f\"Connection URL: {connection['url']}\")\nprint(f\"DSN: {connection['dsn']}\")\nprint(f\"Current Connections: {connection['connection']['current']}\")\nprint(f\"Max Connections: {connection['connection']['max']}\")\n</code></pre>"},{"location":"bases/management/#managing-connections","title":"Managing Connections","text":"<pre><code># Get connection information\nconnection_info = client.get_db_connection(\"base123\")\n\n# Delete a connection when no longer needed\nclient.delete_db_connection(\"base123\")\n</code></pre>"},{"location":"bases/management/#querying-bases","title":"Querying Bases","text":"<p>Teable provides SQL querying capabilities for bases.</p>"},{"location":"bases/management/#basic-queries","title":"Basic Queries","text":"<pre><code># Execute a simple query\nresults = base.query(\n    query=\"SELECT * FROM table_name LIMIT 10\",\n    cell_format=\"text\"  # or \"json\"\n)\n\nfor row in results:\n    print(row)\n</code></pre>"},{"location":"bases/management/#advanced-queries","title":"Advanced Queries","text":"<pre><code># Complex query with joins and aggregations\nquery = \"\"\"\nSELECT t1.name, COUNT(t2.id) as count\nFROM table1 t1\nLEFT JOIN table2 t2 ON t1.id = t2.table1_id\nGROUP BY t1.name\nHAVING count &gt; 5\nORDER BY count DESC\n\"\"\"\n\nresults = base.query(query, cell_format=\"json\")\n\n# Process results\nfor row in results:\n    print(f\"Name: {row['name']}, Count: {row['count']}\")\n</code></pre>"},{"location":"bases/management/#base-properties","title":"Base Properties","text":""},{"location":"bases/management/#checking-base-type","title":"Checking Base Type","text":"<pre><code>from teable import CollaboratorType\n\n# Check base type\nif base.collaborator_type == CollaboratorType.SPACE:\n    print(\"This is a space-level base\")\nelif base.collaborator_type == CollaboratorType.BASE:\n    print(\"This is a base-level base\")\n\n# Check if base is unrestricted\nif base.is_unrestricted:\n    print(\"This base has no access restrictions\")\n</code></pre>"},{"location":"bases/management/#base-organization","title":"Base Organization","text":""},{"location":"bases/management/#managing-base-order","title":"Managing Base Order","text":"<pre><code>from teable import Position\n\n# Reorder bases\nbase.update_order(\n    anchor_id=\"base456\",\n    position=Position.BEFORE  # or Position.AFTER\n)\n</code></pre>"},{"location":"bases/management/#trash-management","title":"Trash Management","text":""},{"location":"bases/management/#managing-deleted-bases","title":"Managing Deleted Bases","text":"<pre><code>from teable.models.trash import ResourceType\n\n# List bases in trash\ntrash_items = client.get_trash_items(ResourceType.BASE)\n\n# List trash items for a specific base\nbase_trash = client.get_trash_items_for_resource(\n    resource_id=\"base123\",\n    resource_type=ResourceType.BASE\n)\n\n# Restore a base from trash\nclient.restore_trash_item(\"trash_item_id\")\n\n# Permanently delete trash items\nclient.reset_trash_items_for_resource(\n    resource_id=\"base123\",\n    resource_type=ResourceType.BASE\n)\n</code></pre>"},{"location":"bases/management/#best-practices","title":"Best Practices","text":"<ol> <li>Database Connections</li> <li>Close connections when not in use</li> <li>Monitor connection pool usage</li> <li>Use appropriate cell formats for queries</li> <li> <p>Implement connection error handling</p> </li> <li> <p>Query Optimization</p> </li> <li>Use appropriate WHERE clauses</li> <li>Limit result sets when possible</li> <li>Consider query performance impact</li> <li> <p>Use indexes effectively</p> </li> <li> <p>Resource Management</p> </li> <li>Clean up unused bases</li> <li>Archive inactive bases</li> <li>Monitor base usage</li> <li> <p>Regular backup important bases</p> </li> <li> <p>Organization</p> </li> <li>Use consistent naming conventions</li> <li>Maintain logical base ordering</li> <li>Document base relationships</li> <li>Regular access review</li> </ol>"},{"location":"bases/management/#error-handling","title":"Error Handling","text":"<pre><code>from teable.exceptions import TeableError, ResourceNotFoundError\n\ntry:\n    # Attempt database operations\n    connection = client.create_db_connection(\"base123\")\n    results = base.query(\"SELECT * FROM table_name\")\nexcept ResourceNotFoundError:\n    print(\"Base or table not found\")\nexcept TeableError as e:\n    print(f\"Error accessing base: {e}\")\nfinally:\n    # Clean up connections\n    try:\n        client.delete_db_connection(\"base123\")\n    except TeableError:\n        print(\"Error closing connection\")\n</code></pre>"},{"location":"bases/management/#performance-tips","title":"Performance Tips","text":"<ol> <li> <p>Query Optimization <pre><code># Good - Specific columns, limited results\nresults = base.query(\n    \"SELECT specific_column FROM table_name WHERE condition LIMIT 100\"\n)\n\n# Avoid - Select all columns, no limit\nresults = base.query(\"SELECT * FROM table_name\")\n</code></pre></p> </li> <li> <p>Connection Management <pre><code># Create connection only when needed\nconnection = client.create_db_connection(\"base123\")\ntry:\n    # Perform operations\n    results = base.query(\"SELECT * FROM table_name\")\nfinally:\n    # Always clean up\n    client.delete_db_connection(\"base123\")\n</code></pre></p> </li> </ol>"},{"location":"bases/management/#next-steps","title":"Next Steps","text":"<p>After mastering base management, you can:</p> <ul> <li>Configure table integration</li> <li>Work with records</li> <li>Set up views</li> </ul>"},{"location":"bases/table-integration/","title":"Table Integration with Bases","text":"<p>This guide covers how to integrate and manage tables within bases using the Teable-Client library. Tables are the fundamental data structures within bases that store and organize your information.</p>"},{"location":"bases/table-integration/#table-structure-in-bases","title":"Table Structure in Bases","text":"<p>A base can contain multiple tables, and these tables can be interconnected through relationships. Each table consists of:</p> <ul> <li>Fields (columns) that define the data structure</li> <li>Records (rows) that contain the actual data</li> <li>Views that provide different ways to visualize and interact with the data</li> </ul>"},{"location":"bases/table-integration/#creating-tables-in-a-base","title":"Creating Tables in a Base","text":""},{"location":"bases/table-integration/#basic-table-creation","title":"Basic Table Creation","text":"<pre><code>from teable import TeableClient, TeableConfig\n\n# Initialize the client\nclient = TeableClient(TeableConfig(\n    api_url=\"https://your-teable-instance.com/api\",\n    api_key=\"your-api-key\"\n))\n\n# Get a base\nbase = client.get_base(\"base123\")\n\n# Create a table\ntable = base.create_table(\n    name=\"Projects\",\n    description=\"Track all company projects\"\n)\n</code></pre>"},{"location":"bases/table-integration/#creating-tables-with-fields","title":"Creating Tables with Fields","text":"<pre><code># Define fields for the table\nfields = [\n    {\n        \"name\": \"Project Name\",\n        \"type\": \"text\",\n        \"required\": True\n    },\n    {\n        \"name\": \"Start Date\",\n        \"type\": \"date\"\n    },\n    {\n        \"name\": \"Status\",\n        \"type\": \"single_select\",\n        \"options\": {\n            \"choices\": [\n                {\"name\": \"Planning\"},\n                {\"name\": \"In Progress\"},\n                {\"name\": \"Completed\"}\n            ]\n        }\n    }\n]\n\n# Create table with fields\ntable = base.create_table(\n    name=\"Projects\",\n    fields=fields\n)\n</code></pre>"},{"location":"bases/table-integration/#managing-tables","title":"Managing Tables","text":""},{"location":"bases/table-integration/#listing-tables","title":"Listing Tables","text":"<pre><code># Get all tables in a base\ntables = base.get_tables()\n\nfor table in tables:\n    print(f\"Table: {table.name}\")\n    print(f\"ID: {table.table_id}\")\n    print(\"Fields:\")\n    for field in table.fields:\n        print(f\"  - {field.name} ({field.type})\")\n    print(\"---\")\n</code></pre>"},{"location":"bases/table-integration/#updating-tables","title":"Updating Tables","text":"<pre><code># Update table properties\ntable.update(\n    name=\"Active Projects\",\n    description=\"Track ongoing and planned projects\"\n)\n</code></pre>"},{"location":"bases/table-integration/#table-relationships","title":"Table Relationships","text":""},{"location":"bases/table-integration/#creating-linked-fields","title":"Creating Linked Fields","text":"<pre><code># Create a linked field to another table\nlinked_field = {\n    \"name\": \"Project Manager\",\n    \"type\": \"link\",\n    \"options\": {\n        \"relationship\": \"many_to_one\",\n        \"foreignTableId\": \"employees_table_id\",\n        \"symmetricFieldId\": \"managed_projects\"  # Optional\n    }\n}\n\ntable.create_field(linked_field)\n</code></pre>"},{"location":"bases/table-integration/#managing-relationships","title":"Managing Relationships","text":"<pre><code># Update relationship configuration\ntable.update_field(\n    field_id=\"field123\",\n    options={\n        \"relationship\": \"many_to_many\",\n        \"symmetricFieldId\": \"new_symmetric_field\"\n    }\n)\n</code></pre>"},{"location":"bases/table-integration/#views-integration","title":"Views Integration","text":""},{"location":"bases/table-integration/#creating-views","title":"Creating Views","text":"<pre><code># Create a view for the table\nview = table.create_view({\n    \"name\": \"Active Projects\",\n    \"type\": \"grid\",\n    \"filter\": {\n        \"operator\": \"and\",\n        \"conditions\": [\n            {\n                \"field\": \"Status\",\n                \"operator\": \"=\",\n                \"value\": \"In Progress\"\n            }\n        ]\n    },\n    \"sort\": [\n        {\n            \"field\": \"Start Date\",\n            \"direction\": \"desc\"\n        }\n    ]\n})\n</code></pre>"},{"location":"bases/table-integration/#managing-views","title":"Managing Views","text":"<pre><code># List views\nviews = table.get_views()\n\n# Update view configuration\nview.update({\n    \"name\": \"Current Projects\",\n    \"filter\": {\n        \"operator\": \"and\",\n        \"conditions\": [\n            {\n                \"field\": \"Status\",\n                \"operator\": \"in\",\n                \"value\": [\"Planning\", \"In Progress\"]\n            }\n        ]\n    }\n})\n</code></pre>"},{"location":"bases/table-integration/#data-integration","title":"Data Integration","text":""},{"location":"bases/table-integration/#importing-data","title":"Importing Data","text":"<pre><code># Import data from CSV\nwith open('projects.csv', 'rb') as file:\n    table.import_csv(\n        file,\n        chunk_size=1000,  # Optional: Process in chunks\n        field_mapping={    # Optional: Map CSV columns to fields\n            \"Project\": \"Project Name\",\n            \"Start\": \"Start Date\"\n        }\n    )\n</code></pre>"},{"location":"bases/table-integration/#exporting-data","title":"Exporting Data","text":"<pre><code># Export table data\nexport = table.export_csv()\n\n# Save to file\nwith open('projects_export.csv', 'wb') as file:\n    file.write(export.content)\n</code></pre>"},{"location":"bases/table-integration/#best-practices","title":"Best Practices","text":"<ol> <li>Table Design</li> <li>Plan your table structure before creation</li> <li>Use appropriate field types for data</li> <li>Consider relationships between tables</li> <li> <p>Document table purposes and relationships</p> </li> <li> <p>Field Management</p> </li> <li>Use clear, descriptive field names</li> <li>Set appropriate field constraints</li> <li>Consider field dependencies</li> <li> <p>Document field usage and requirements</p> </li> <li> <p>Data Integration</p> </li> <li>Validate data before import</li> <li>Use appropriate chunk sizes for large imports</li> <li>Maintain data consistency across tables</li> <li> <p>Regular data validation and cleanup</p> </li> <li> <p>View Organization</p> </li> <li>Create views for common use cases</li> <li>Use consistent naming conventions</li> <li>Document view purposes</li> <li>Regular view maintenance</li> </ol>"},{"location":"bases/table-integration/#error-handling","title":"Error Handling","text":"<pre><code>from teable.exceptions import TeableError, ValidationError\n\ntry:\n    # Create table with fields\n    table = base.create_table(\n        name=\"Projects\",\n        fields=fields\n    )\nexcept ValidationError as e:\n    print(f\"Invalid table configuration: {e}\")\nexcept TeableError as e:\n    print(f\"Error creating table: {e}\")\n</code></pre>"},{"location":"bases/table-integration/#performance-considerations","title":"Performance Considerations","text":"<ol> <li> <p>Batch Operations <pre><code># Good - Batch create records\nrecords = [{\"Project Name\": f\"Project {i}\"} for i in range(100)]\ntable.batch_create_records(records)\n\n# Avoid - Individual record creation\nfor i in range(100):\n    table.create_record({\"Project Name\": f\"Project {i}\"})\n</code></pre></p> </li> <li> <p>Field Optimization <pre><code># Good - Create all fields at once\ntable = base.create_table(\n    name=\"Projects\",\n    fields=all_fields\n)\n\n# Avoid - Creating fields one by one\ntable = base.create_table(name=\"Projects\")\nfor field in fields:\n    table.create_field(field)\n</code></pre></p> </li> </ol>"},{"location":"bases/table-integration/#next-steps","title":"Next Steps","text":"<p>After integrating tables with your base, you can:</p> <ul> <li>Create and manage records</li> <li>Set up views</li> <li>Configure field types</li> </ul>"},{"location":"fields/configuration/","title":"Field Configuration","text":"<p>This guide covers how to configure fields in Teable tables, including field types, options, and advanced settings.</p>"},{"location":"fields/configuration/#field-types","title":"Field Types","text":""},{"location":"fields/configuration/#basic-field-types","title":"Basic Field Types","text":"<pre><code>from teable import TeableClient, TeableConfig\n\n# Initialize the client\nclient = TeableClient(TeableConfig(\n    api_url=\"https://your-teable-instance.com/api\",\n    api_key=\"your-api-key\"\n))\n\n# Get your table\ntable = client.get_table(\"table_id\")\n\n# Text Fields\ntext_field = {\n    \"name\": \"Description\",\n    \"type\": \"text\",\n    \"options\": {\n        \"multiline\": True,\n        \"defaultValue\": \"\"\n    }\n}\n\n# Number Fields\nnumber_field = {\n    \"name\": \"Amount\",\n    \"type\": \"number\",\n    \"options\": {\n        \"precision\": 2,\n        \"format\": \"currency\",\n        \"symbol\": \"$\"\n    }\n}\n\n# Date Fields\ndate_field = {\n    \"name\": \"Due Date\",\n    \"type\": \"date\",\n    \"options\": {\n        \"format\": \"YYYY-MM-DD\",\n        \"includeTime\": True,\n        \"timeFormat\": \"24hour\"\n    }\n}\n</code></pre>"},{"location":"fields/configuration/#selection-fields","title":"Selection Fields","text":"<pre><code># Single Select\nsingle_select = {\n    \"name\": \"Status\",\n    \"type\": \"single_select\",\n    \"options\": {\n        \"choices\": [\n            {\"name\": \"Active\", \"color\": \"green\"},\n            {\"name\": \"Pending\", \"color\": \"yellow\"},\n            {\"name\": \"Completed\", \"color\": \"blue\"}\n        ]\n    }\n}\n\n# Multiple Select\nmulti_select = {\n    \"name\": \"Tags\",\n    \"type\": \"multiple_select\",\n    \"options\": {\n        \"choices\": [\n            {\"name\": \"Urgent\", \"color\": \"red\"},\n            {\"name\": \"Important\", \"color\": \"orange\"},\n            {\"name\": \"Review\", \"color\": \"purple\"}\n        ]\n    }\n}\n</code></pre>"},{"location":"fields/configuration/#special-field-types","title":"Special Field Types","text":"<pre><code># Attachment Field\nattachment_field = {\n    \"name\": \"Files\",\n    \"type\": \"attachment\",\n    \"options\": {\n        \"maxSize\": 10485760,  # 10MB\n        \"allowedTypes\": [\"image/*\", \"application/pdf\"]\n    }\n}\n\n# Link Field\nlink_field = {\n    \"name\": \"Project Manager\",\n    \"type\": \"link\",\n    \"options\": {\n        \"relationship\": \"many_to_one\",\n        \"foreignTableId\": \"employees_table_id\",\n        \"symmetricFieldId\": \"managed_projects\"\n    }\n}\n\n# Formula Field\nformula_field = {\n    \"name\": \"Total\",\n    \"type\": \"formula\",\n    \"options\": {\n        \"expression\": \"{Quantity} * {Price}\",\n        \"valueType\": \"number\"\n    }\n}\n</code></pre>"},{"location":"fields/configuration/#field-creation","title":"Field Creation","text":""},{"location":"fields/configuration/#creating-fields","title":"Creating Fields","text":"<pre><code># Create a single field\nfield = table.create_field(text_field)\n\n# Create multiple fields\nfields = [\n    text_field,\n    number_field,\n    date_field,\n    single_select\n]\n\nfor field_config in fields:\n    field = table.create_field(field_config)\n    print(f\"Created field: {field.name}\")\n</code></pre>"},{"location":"fields/configuration/#field-options","title":"Field Options","text":"<pre><code># Text Field Options\ntext_options = {\n    \"multiline\": True,        # Allow multiple lines\n    \"defaultValue\": \"\",       # Default value\n    \"maxLength\": 1000,        # Maximum length\n    \"unique\": False,          # Unique values only\n    \"required\": True         # Required field\n}\n\n# Number Field Options\nnumber_options = {\n    \"precision\": 2,           # Decimal places\n    \"format\": \"decimal\",      # number format\n    \"minimum\": 0,            # Minimum value\n    \"maximum\": 1000,         # Maximum value\n    \"allowNegative\": False   # Allow negative values\n}\n\n# Date Field Options\ndate_options = {\n    \"includeTime\": True,     # Include time component\n    \"timeFormat\": \"12hour\",  # 12/24 hour format\n    \"defaultValue\": \"now\",   # Default to current time\n    \"timezone\": \"UTC\"       # Timezone handling\n}\n</code></pre>"},{"location":"fields/configuration/#field-management","title":"Field Management","text":""},{"location":"fields/configuration/#updating-fields","title":"Updating Fields","text":"<pre><code># Update field configuration\nfield.update({\n    \"name\": \"New Name\",\n    \"description\": \"Updated description\",\n    \"options\": {\n        \"required\": True,\n        \"unique\": True\n    }\n})\n</code></pre>"},{"location":"fields/configuration/#field-properties","title":"Field Properties","text":"<pre><code># Access field properties\nprint(f\"Field ID: {field.field_id}\")\nprint(f\"Name: {field.name}\")\nprint(f\"Type: {field.field_type}\")\nprint(f\"Description: {field.description}\")\nprint(f\"Required: {field.is_required}\")\nprint(f\"Primary: {field.is_primary}\")\n</code></pre>"},{"location":"fields/configuration/#advanced-configuration","title":"Advanced Configuration","text":""},{"location":"fields/configuration/#computed-fields","title":"Computed Fields","text":"<pre><code># Lookup Field\nlookup_field = {\n    \"name\": \"Manager Email\",\n    \"type\": \"lookup\",\n    \"options\": {\n        \"relationship\": \"many_to_one\",\n        \"foreignTableId\": \"employees_table_id\",\n        \"lookupFieldId\": \"email_field_id\"\n    }\n}\n\n# Rollup Field\nrollup_field = {\n    \"name\": \"Total Sales\",\n    \"type\": \"rollup\",\n    \"options\": {\n        \"relationship\": \"one_to_many\",\n        \"foreignTableId\": \"sales_table_id\",\n        \"rollupFunction\": \"sum\",\n        \"field\": \"amount_field_id\"\n    }\n}\n</code></pre>"},{"location":"fields/configuration/#field-dependencies","title":"Field Dependencies","text":"<pre><code># Create dependent fields\nstatus_field = {\n    \"name\": \"Status\",\n    \"type\": \"single_select\",\n    \"options\": {\n        \"choices\": [\n            {\"name\": \"Active\"},\n            {\"name\": \"Inactive\"}\n        ]\n    }\n}\n\ndependent_field = {\n    \"name\": \"Next Action\",\n    \"type\": \"single_select\",\n    \"options\": {\n        \"choices\": [\n            {\"name\": \"Follow up\"},\n            {\"name\": \"Archive\"}\n        ],\n        \"dependsOn\": {\n            \"field\": \"Status\",\n            \"condition\": {\n                \"equals\": \"Active\"\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"fields/configuration/#best-practices","title":"Best Practices","text":"<ol> <li>Field Design</li> <li>Use appropriate field types</li> <li>Set meaningful defaults</li> <li>Consider data validation</li> <li> <p>Document field purposes</p> </li> <li> <p>Performance</p> </li> <li>Optimize computed fields</li> <li>Use appropriate indexes</li> <li>Consider query performance</li> <li> <p>Monitor field usage</p> </li> <li> <p>Data Integrity</p> </li> <li>Validate field dependencies</li> <li>Maintain referential integrity</li> <li>Handle default values</li> <li> <p>Consider data migration</p> </li> <li> <p>Maintenance</p> </li> <li>Regular field audits</li> <li>Update field documentation</li> <li>Monitor field usage</li> <li>Clean up unused fields</li> </ol>"},{"location":"fields/configuration/#next-steps","title":"Next Steps","text":"<ul> <li>Field Validation</li> <li>Table Management</li> <li>Record Operations</li> <li>Views Configuration</li> </ul>"},{"location":"fields/validation/","title":"Field Validation","text":"<p>This guide covers field validation in Teable tables, including validation rules, custom validation, and error handling.</p>"},{"location":"fields/validation/#basic-validation","title":"Basic Validation","text":""},{"location":"fields/validation/#required-fields","title":"Required Fields","text":"<pre><code>from teable import TeableClient, TeableConfig\n\n# Initialize the client\nclient = TeableClient(TeableConfig(\n    api_url=\"https://your-teable-instance.com/api\",\n    api_key=\"your-api-key\"\n))\n\n# Create a required field\nrequired_field = {\n    \"name\": \"Email\",\n    \"type\": \"email\",\n    \"options\": {\n        \"required\": True,\n        \"unique\": True\n    }\n}\n\n# Create field\ntable = client.get_table(\"table_id\")\nfield = table.create_field(required_field)\n</code></pre>"},{"location":"fields/validation/#field-type-validation","title":"Field Type Validation","text":"<pre><code># Email validation\nemail_field = {\n    \"name\": \"Contact Email\",\n    \"type\": \"email\",\n    \"options\": {\n        \"allowMultiple\": False  # Single email only\n    }\n}\n\n# URL validation\nurl_field = {\n    \"name\": \"Website\",\n    \"type\": \"url\",\n    \"options\": {\n        \"allowedProtocols\": [\"http\", \"https\"]\n    }\n}\n\n# Number validation\nnumber_field = {\n    \"name\": \"Score\",\n    \"type\": \"number\",\n    \"options\": {\n        \"minimum\": 0,\n        \"maximum\": 100,\n        \"precision\": 0,  # Integer only\n        \"allowNegative\": False\n    }\n}\n</code></pre>"},{"location":"fields/validation/#advanced-validation","title":"Advanced Validation","text":""},{"location":"fields/validation/#custom-validation-rules","title":"Custom Validation Rules","text":"<pre><code># Regular expression validation\nregex_field = {\n    \"name\": \"Product Code\",\n    \"type\": \"text\",\n    \"options\": {\n        \"pattern\": \"^[A-Z]{2}\\\\d{4}$\",  # Format: AA1234\n        \"patternError\": \"Must be 2 letters followed by 4 digits\"\n    }\n}\n\n# Range validation\nrange_field = {\n    \"name\": \"Age\",\n    \"type\": \"number\",\n    \"options\": {\n        \"minimum\": 18,\n        \"maximum\": 100,\n        \"minimumError\": \"Must be at least 18\",\n        \"maximumError\": \"Must be no more than 100\"\n    }\n}\n\n# Length validation\nlength_field = {\n    \"name\": \"Description\",\n    \"type\": \"text\",\n    \"options\": {\n        \"minLength\": 10,\n        \"maxLength\": 1000,\n        \"lengthError\": \"Must be between 10 and 1000 characters\"\n    }\n}\n</code></pre>"},{"location":"fields/validation/#conditional-validation","title":"Conditional Validation","text":"<pre><code># Validation based on other fields\nconditional_field = {\n    \"name\": \"End Date\",\n    \"type\": \"date\",\n    \"options\": {\n        \"validation\": {\n            \"condition\": \"{End Date} &gt; {Start Date}\",\n            \"message\": \"End date must be after start date\"\n        }\n    }\n}\n\n# Required based on condition\nconditional_required = {\n    \"name\": \"Reason\",\n    \"type\": \"text\",\n    \"options\": {\n        \"requiredWhen\": {\n            \"field\": \"Status\",\n            \"equals\": \"Rejected\"\n        }\n    }\n}\n</code></pre>"},{"location":"fields/validation/#validation-methods","title":"Validation Methods","text":""},{"location":"fields/validation/#field-value-validation","title":"Field Value Validation","text":"<pre><code># Validate a single value\ntry:\n    field.validate_value(\"test@example.com\")\n    print(\"Value is valid\")\nexcept ValidationError as e:\n    print(f\"Validation error: {e}\")\n\n# Validate multiple values\ndef validate_values(field, values):\n    \"\"\"Validate multiple values for a field.\"\"\"\n    results = {\n        'valid': [],\n        'invalid': []\n    }\n\n    for value in values:\n        try:\n            field.validate_value(value)\n            results['valid'].append(value)\n        except ValidationError as e:\n            results['invalid'].append({\n                'value': value,\n                'error': str(e)\n            })\n\n    return results\n</code></pre>"},{"location":"fields/validation/#record-validation","title":"Record Validation","text":"<pre><code># Validate record fields\ntry:\n    table.validate_record_fields({\n        \"Name\": \"John Doe\",\n        \"Email\": \"john@example.com\",\n        \"Age\": 25\n    })\n    print(\"Record is valid\")\nexcept ValidationError as e:\n    print(f\"Validation error: {e}\")\n\n# Batch validation\ndef validate_records(table, records):\n    \"\"\"Validate multiple records.\"\"\"\n    results = {\n        'valid': [],\n        'invalid': []\n    }\n\n    for record in records:\n        try:\n            table.validate_record_fields(record)\n            results['valid'].append(record)\n        except ValidationError as e:\n            results['invalid'].append({\n                'record': record,\n                'error': str(e)\n            })\n\n    return results\n</code></pre>"},{"location":"fields/validation/#error-handling","title":"Error Handling","text":""},{"location":"fields/validation/#validation-error-types","title":"Validation Error Types","text":"<pre><code>from teable.exceptions import (\n    ValidationError,\n    RequiredFieldError,\n    UniqueFieldError,\n    TypeMismatchError\n)\n\ntry:\n    # Attempt validation\n    field.validate_value(value)\nexcept RequiredFieldError as e:\n    print(f\"Required field missing: {e}\")\nexcept UniqueFieldError as e:\n    print(f\"Value must be unique: {e}\")\nexcept TypeMismatchError as e:\n    print(f\"Invalid type: {e}\")\nexcept ValidationError as e:\n    print(f\"General validation error: {e}\")\n</code></pre>"},{"location":"fields/validation/#custom-error-messages","title":"Custom Error Messages","text":"<pre><code># Field with custom error messages\ncustom_errors_field = {\n    \"name\": \"Phone\",\n    \"type\": \"text\",\n    \"options\": {\n        \"pattern\": \"^\\\\+?\\\\d{10,15}$\",\n        \"errors\": {\n            \"required\": \"Phone number is required\",\n            \"pattern\": \"Invalid phone number format\",\n            \"unique\": \"This phone number is already registered\"\n        }\n    }\n}\n</code></pre>"},{"location":"fields/validation/#best-practices","title":"Best Practices","text":"<ol> <li>Validation Design</li> <li>Use appropriate validation rules</li> <li>Provide clear error messages</li> <li>Consider user experience</li> <li> <p>Document validation requirements</p> </li> <li> <p>Performance</p> </li> <li>Validate early</li> <li>Use batch validation</li> <li>Cache validation results</li> <li> <p>Monitor validation performance</p> </li> <li> <p>Error Handling</p> </li> <li>Implement comprehensive error handling</li> <li>Provide meaningful error messages</li> <li>Log validation failures</li> <li> <p>Consider recovery strategies</p> </li> <li> <p>Maintenance</p> </li> <li>Regular validation rule review</li> <li>Update validation documentation</li> <li>Monitor validation patterns</li> <li>Clean up unused rules</li> </ol>"},{"location":"fields/validation/#next-steps","title":"Next Steps","text":"<ul> <li>Field Configuration</li> <li>Table Management</li> <li>Record Operations</li> <li>Error Handling</li> </ul>"},{"location":"getting-started/installation/","title":"Installation Guide","text":"<p>This guide will walk you through the process of installing and configuring the Teable-Client library in your Python environment.</p>"},{"location":"getting-started/installation/#requirements","title":"Requirements","text":"<ul> <li>Python 3.7 or higher</li> <li>pip (Python package installer)</li> <li>A Teable instance and API key</li> </ul>"},{"location":"getting-started/installation/#installation-methods","title":"Installation Methods","text":""},{"location":"getting-started/installation/#using-pip-recommended","title":"Using pip (Recommended)","text":"<p>The simplest way to install Teable-Client is using pip:</p> <pre><code>pip install teable-client\n</code></pre>"},{"location":"getting-started/installation/#installing-from-source","title":"Installing from Source","text":"<p>If you want to install from source, you can clone the repository and install using pip:</p> <pre><code>git clone https://github.com/yourusername/teable-client.git\ncd teable-client\npip install -e .\n</code></pre>"},{"location":"getting-started/installation/#configuration","title":"Configuration","text":"<p>After installation, you'll need to configure the client with your Teable instance details.</p>"},{"location":"getting-started/installation/#basic-configuration","title":"Basic Configuration","text":"<pre><code>from teable import TeableClient, TeableConfig\n\n# Initialize with basic configuration\nconfig = TeableConfig(\n    api_url=\"https://your-teable-instance.com/api\",\n    api_key=\"your-api-key\"\n)\nclient = TeableClient(config)\n</code></pre>"},{"location":"getting-started/installation/#advanced-configuration","title":"Advanced Configuration","text":"<p>You can customize the client behavior with additional configuration options:</p> <pre><code>config = TeableConfig(\n    api_url=\"https://your-teable-instance.com/api\",\n    api_key=\"your-api-key\",\n    timeout=30,  # Request timeout in seconds\n    max_retries=3,  # Number of retry attempts for failed requests\n    cache_enabled=True  # Enable response caching\n)\n</code></pre>"},{"location":"getting-started/installation/#verifying-installation","title":"Verifying Installation","text":"<p>To verify that the installation was successful, you can run a simple test:</p> <pre><code>from teable import TeableClient, TeableConfig\n\n# Initialize the client\nconfig = TeableConfig(\n    api_url=\"https://your-teable-instance.com/api\",\n    api_key=\"your-api-key\"\n)\nclient = TeableClient(config)\n\n# Test the connection\ntry:\n    # Attempt to get user profile\n    profile = client.get_user_profile()\n    print(f\"Connected successfully as: {profile.name}\")\nexcept Exception as e:\n    print(f\"Connection failed: {str(e)}\")\n</code></pre>"},{"location":"getting-started/installation/#environment-variables","title":"Environment Variables","text":"<p>For better security, you can use environment variables to store sensitive configuration:</p> <pre><code>import os\nfrom teable import TeableClient, TeableConfig\n\nconfig = TeableConfig(\n    api_url=os.getenv(\"TEABLE_API_URL\"),\n    api_key=os.getenv(\"TEABLE_API_KEY\")\n)\n</code></pre> <p>Set these environment variables in your shell:</p> <pre><code>export TEABLE_API_URL=\"https://your-teable-instance.com/api\"\nexport TEABLE_API_KEY=\"your-api-key\"\n</code></pre>"},{"location":"getting-started/installation/#troubleshooting","title":"Troubleshooting","text":""},{"location":"getting-started/installation/#common-installation-issues","title":"Common Installation Issues","text":"<ol> <li> <p>SSL Certificate Verification Failed <pre><code># Add certificate verification\nconfig = TeableConfig(\n    api_url=\"https://your-teable-instance.com/api\",\n    api_key=\"your-api-key\",\n    verify_ssl=True,\n    ssl_ca_cert=\"/path/to/certificate\"\n)\n</code></pre></p> </li> <li> <p>Proxy Configuration <pre><code># Configure proxy settings\nconfig = TeableConfig(\n    api_url=\"https://your-teable-instance.com/api\",\n    api_key=\"your-api-key\",\n    proxy={\n        \"http\": \"http://proxy.example.com:8080\",\n        \"https\": \"https://proxy.example.com:8080\"\n    }\n)\n</code></pre></p> </li> </ol>"},{"location":"getting-started/installation/#version-conflicts","title":"Version Conflicts","text":"<p>If you encounter package version conflicts, you can create a virtual environment:</p> <pre><code># Create a virtual environment\npython -m venv teable-env\n\n# Activate the environment\n# On Windows:\nteable-env\\Scripts\\activate\n# On Unix or MacOS:\nsource teable-env/bin/activate\n\n# Install teable-client in the virtual environment\npip install teable-client\n</code></pre>"},{"location":"getting-started/installation/#next-steps","title":"Next Steps","text":"<p>Now that you have installed and configured Teable-Client, proceed to the Quick Start Guide to learn how to perform basic operations with the library.</p>"},{"location":"getting-started/quickstart/","title":"Quick Start Guide","text":"<p>This guide will help you get started with the Teable-Client library by walking through common operations and basic usage patterns.</p>"},{"location":"getting-started/quickstart/#basic-setup","title":"Basic Setup","text":"<p>First, import the necessary classes and initialize the client:</p> <pre><code>from teable import TeableClient, TeableConfig\n\n# Initialize the client\nconfig = TeableConfig(\n    api_url=\"https://your-teable-instance.com/api\",\n    api_key=\"your-api-key\"\n)\nclient = TeableClient(config)\n</code></pre>"},{"location":"getting-started/quickstart/#working-with-tables","title":"Working with Tables","text":""},{"location":"getting-started/quickstart/#accessing-a-table","title":"Accessing a Table","text":"<pre><code># Get a table by ID\ntable = client.get_table(\"table_id\")\n\n# List all tables in a base\nbase_tables = client.list_tables(\"base_id\")\n</code></pre>"},{"location":"getting-started/quickstart/#creating-records","title":"Creating Records","text":"<pre><code># Create a single record\nrecord = table.create_record({\n    \"name\": \"John Doe\",\n    \"email\": \"john@example.com\",\n    \"age\": 30\n})\nprint(f\"Created record ID: {record.id}\")\n\n# Batch create multiple records\nrecords_data = [\n    {\"name\": \"Alice\", \"age\": 28},\n    {\"name\": \"Bob\", \"age\": 32}\n]\nbatch_result = table.batch_create_records(records_data)\nprint(f\"Created {batch_result.success_count} records\")\n</code></pre>"},{"location":"getting-started/quickstart/#querying-records","title":"Querying Records","text":"<pre><code># Simple query\nrecords = table.get_records()\n\n# Advanced query with filters and sorting\nquery = table.query()\\\n    .filter(\"age\", \"&gt;\", 25)\\\n    .filter(\"department\", \"=\", \"Engineering\")\\\n    .sort(\"name\")\\\n    .paginate(take=10)\n\nrecords = table.get_records(query)\n\n# Process query results\nfor record in records:\n    print(f\"Name: {record.name}, Age: {record.age}\")\n</code></pre>"},{"location":"getting-started/quickstart/#working-with-fields","title":"Working with Fields","text":""},{"location":"getting-started/quickstart/#getting-field-information","title":"Getting Field Information","text":"<pre><code># List all fields in a table\nfields = table.fields\n\n# Access field properties\nfor field in fields:\n    print(f\"{field.name} ({field.field_type})\")\n    if field.is_required:\n        print(\"  Required field\")\n    if field.is_primary:\n        print(\"  Primary field\")\n</code></pre>"},{"location":"getting-started/quickstart/#field-validation","title":"Field Validation","text":"<pre><code>from teable import ValidationError\n\n# Validate field values\nfield = table.get_field(\"field_id\")\ntry:\n    field.validate_value(\"test@example.com\")\n    print(\"Value is valid\")\nexcept ValidationError as e:\n    print(f\"Invalid value: {e}\")\n</code></pre>"},{"location":"getting-started/quickstart/#working-with-views","title":"Working with Views","text":""},{"location":"getting-started/quickstart/#creating-and-managing-views","title":"Creating and Managing Views","text":"<pre><code># Create a new view\nview = table.create_view({\n    \"name\": \"Engineering Team\",\n    \"type\": \"grid\",\n    \"filter\": {\n        \"operator\": \"and\",\n        \"conditions\": [\n            {\n                \"field\": \"department\",\n                \"operator\": \"=\",\n                \"value\": \"Engineering\"\n            }\n        ]\n    }\n})\n\n# Get records from a specific view\nview_records = table.get_records(view_id=view.id)\n</code></pre>"},{"location":"getting-started/quickstart/#data-aggregation","title":"Data Aggregation","text":""},{"location":"getting-started/quickstart/#basic-aggregation","title":"Basic Aggregation","text":"<pre><code># Get aggregated data\nresult = client.aggregation.get_aggregation(\n    table_id=\"table_id\",\n    group_by=[\"category\"],\n    metrics=[\n        {\"field\": \"amount\", \"function\": \"sum\"},\n        {\"field\": \"quantity\", \"function\": \"avg\"}\n    ]\n)\n\n# Process aggregation results\nfor group in result.groups:\n    print(f\"Category: {group.category}\")\n    print(f\"Total Amount: {group.metrics.amount_sum}\")\n    print(f\"Average Quantity: {group.metrics.quantity_avg}\")\n</code></pre>"},{"location":"getting-started/quickstart/#calendar-view","title":"Calendar View","text":"<pre><code># Get calendar data\ncalendar = client.aggregation.get_calendar_daily_collection(\n    table_id=\"table_id\",\n    date_field=\"due_date\"\n)\n\n# Process calendar data\nfor date, events in calendar.items():\n    print(f\"Date: {date}\")\n    for event in events:\n        print(f\"  - {event.title}\")\n</code></pre>"},{"location":"getting-started/quickstart/#error-handling","title":"Error Handling","text":"<pre><code>from teable.exceptions import TeableError, ValidationError, AuthenticationError\n\ntry:\n    # Attempt an operation\n    record = table.create_record({\"invalid\": \"data\"})\nexcept ValidationError as e:\n    print(f\"Validation error: {e}\")\nexcept AuthenticationError as e:\n    print(f\"Authentication failed: {e}\")\nexcept TeableError as e:\n    print(f\"General error: {e}\")\n</code></pre>"},{"location":"getting-started/quickstart/#best-practices","title":"Best Practices","text":"<ol> <li> <p>Use Batch Operations: When working with multiple records, use batch operations instead of individual calls:    <pre><code># Good - batch operation\nrecords = [{\"name\": f\"User {i}\"} for i in range(100)]\nresult = table.batch_create_records(records)\n\n# Avoid - individual calls\nfor i in range(100):\n    table.create_record({\"name\": f\"User {i}\"})\n</code></pre></p> </li> <li> <p>Handle Rate Limits: The client automatically handles rate limiting, but you should still structure your code to work efficiently:    <pre><code># Process large datasets in chunks\nchunk_size = 1000\nfor i in range(0, len(records), chunk_size):\n    chunk = records[i:i + chunk_size]\n    table.batch_create_records(chunk)\n</code></pre></p> </li> <li> <p>Use Query Builder: Leverage the query builder for complex queries instead of filtering in memory:    <pre><code># Good - server-side filtering\nquery = table.query()\\\n    .filter(\"age\", \"&gt;\", 25)\\\n    .sort(\"name\")\\\n    .paginate(take=100)\n\n# Avoid - client-side filtering\nall_records = table.get_records()\nfiltered = [r for r in all_records if r.age &gt; 25]\n</code></pre></p> </li> </ol>"},{"location":"getting-started/quickstart/#next-steps","title":"Next Steps","text":"<p>Now that you're familiar with the basics, explore the following topics for more advanced usage:</p> <ul> <li>Space Management</li> <li>Base Operations</li> <li>Table Operations</li> <li>Record Management</li> <li>Advanced Topics</li> </ul>"},{"location":"integration/sync/","title":"Data Synchronization","text":"<p>This guide covers data synchronization capabilities in Teable, including real-time sync, batch synchronization, and integration patterns.</p>"},{"location":"integration/sync/#real-time-synchronization","title":"Real-time Synchronization","text":""},{"location":"integration/sync/#watching-for-changes","title":"Watching for Changes","text":"<pre><code>from teable import TeableClient, TeableConfig\n\n# Initialize the client\nclient = TeableClient(TeableConfig(\n    api_url=\"https://your-teable-instance.com/api\",\n    api_key=\"your-api-key\"\n))\n\n# Get your table\ntable = client.get_table(\"table_id\")\n\n# Set up change listener\ndef handle_change(change_event):\n    \"\"\"Handle table changes.\"\"\"\n    event_type = change_event['type']  # 'create', 'update', or 'delete'\n    record_id = change_event['recordId']\n    changes = change_event.get('changes', {})\n\n    print(f\"Event type: {event_type}\")\n    print(f\"Record ID: {record_id}\")\n    print(f\"Changes: {changes}\")\n\n# Start watching for changes\ntable.watch(callback=handle_change)\n</code></pre>"},{"location":"integration/sync/#real-time-updates","title":"Real-time Updates","text":"<pre><code># Sync handler with real-time updates\ndef sync_handler(change_event):\n    \"\"\"Handle sync events.\"\"\"\n    if change_event['type'] == 'create':\n        # Handle new record\n        sync_new_record(change_event['record'])\n    elif change_event['type'] == 'update':\n        # Handle updated record\n        sync_updated_record(\n            change_event['recordId'],\n            change_event['changes']\n        )\n    elif change_event['type'] == 'delete':\n        # Handle deleted record\n        sync_deleted_record(change_event['recordId'])\n\ndef sync_new_record(record):\n    \"\"\"Sync new record to external system.\"\"\"\n    # Implement sync logic\n    pass\n\ndef sync_updated_record(record_id, changes):\n    \"\"\"Sync record updates to external system.\"\"\"\n    # Implement sync logic\n    pass\n\ndef sync_deleted_record(record_id):\n    \"\"\"Handle deleted record in external system.\"\"\"\n    # Implement sync logic\n    pass\n</code></pre>"},{"location":"integration/sync/#batch-synchronization","title":"Batch Synchronization","text":""},{"location":"integration/sync/#full-sync","title":"Full Sync","text":"<pre><code>def full_sync(source_table, target_table):\n    \"\"\"Perform full sync between tables.\"\"\"\n    # Get all records from source\n    source_records = source_table.get_records()\n\n    # Get existing records from target\n    target_records = {\n        record.record_id: record\n        for record in target_table.get_records()\n    }\n\n    # Prepare batches\n    to_create = []\n    to_update = []\n    to_delete = set(target_records.keys())\n\n    # Compare records\n    for record in source_records:\n        record_id = record.record_id\n        if record_id in target_records:\n            # Update existing record\n            if record.fields != target_records[record_id].fields:\n                to_update.append({\n                    'recordId': record_id,\n                    'fields': record.fields\n                })\n            to_delete.remove(record_id)\n        else:\n            # Create new record\n            to_create.append(record.fields)\n\n    # Execute changes\n    if to_create:\n        target_table.batch_create_records(to_create)\n    if to_update:\n        target_table.batch_update_records(to_update)\n    if to_delete:\n        target_table.batch_delete_records(list(to_delete))\n</code></pre>"},{"location":"integration/sync/#incremental-sync","title":"Incremental Sync","text":"<pre><code>def incremental_sync(source_table, target_table, last_sync_time):\n    \"\"\"Perform incremental sync between tables.\"\"\"\n    # Get records modified since last sync\n    modified_records = source_table.get_records(\n        filter={\n            \"field\": \"last_modified_time\",\n            \"operator\": \"&gt;\",\n            \"value\": last_sync_time\n        }\n    )\n\n    # Prepare batches\n    to_create = []\n    to_update = []\n\n    # Get existing record IDs\n    existing_ids = {\n        record.record_id\n        for record in target_table.get_records(\n            projection=[\"record_id\"]\n        )\n    }\n\n    # Sort records\n    for record in modified_records:\n        if record.record_id in existing_ids:\n            to_update.append({\n                'recordId': record.record_id,\n                'fields': record.fields\n            })\n        else:\n            to_create.append(record.fields)\n\n    # Execute changes\n    if to_create:\n        target_table.batch_create_records(to_create)\n    if to_update:\n        target_table.batch_update_records(to_update)\n\n    return modified_records[-1].last_modified_time if modified_records else last_sync_time\n</code></pre>"},{"location":"integration/sync/#integration-patterns","title":"Integration Patterns","text":""},{"location":"integration/sync/#external-system-integration","title":"External System Integration","text":"<pre><code>class ExternalSystemSync:\n    \"\"\"Sync manager for external system integration.\"\"\"\n\n    def __init__(self, table, external_client):\n        self.table = table\n        self.external_client = external_client\n        self.sync_status = {}\n\n    def start_sync(self):\n        \"\"\"Start synchronization process.\"\"\"\n        # Set up change listener\n        self.table.watch(callback=self.handle_change)\n\n    def handle_change(self, change_event):\n        \"\"\"Handle table changes.\"\"\"\n        try:\n            if change_event['type'] == 'create':\n                self.sync_to_external(change_event['record'])\n            elif change_event['type'] == 'update':\n                self.update_external(\n                    change_event['recordId'],\n                    change_event['changes']\n                )\n            elif change_event['type'] == 'delete':\n                self.delete_from_external(change_event['recordId'])\n\n            self.sync_status[change_event['recordId']] = {\n                'status': 'success',\n                'timestamp': datetime.now()\n            }\n\n        except Exception as e:\n            self.sync_status[change_event['recordId']] = {\n                'status': 'error',\n                'error': str(e),\n                'timestamp': datetime.now()\n            }\n\n    def sync_to_external(self, record):\n        \"\"\"Sync record to external system.\"\"\"\n        # Implement external system sync\n        pass\n\n    def update_external(self, record_id, changes):\n        \"\"\"Update record in external system.\"\"\"\n        # Implement external system update\n        pass\n\n    def delete_from_external(self, record_id):\n        \"\"\"Delete record from external system.\"\"\"\n        # Implement external system deletion\n        pass\n</code></pre>"},{"location":"integration/sync/#best-practices","title":"Best Practices","text":"<ol> <li>Sync Design</li> <li>Use appropriate sync patterns</li> <li>Handle conflicts gracefully</li> <li>Implement error recovery</li> <li> <p>Monitor sync status</p> </li> <li> <p>Performance</p> </li> <li>Use batch operations</li> <li>Implement incremental sync</li> <li>Optimize data transfer</li> <li> <p>Monitor sync performance</p> </li> <li> <p>Error Handling</p> </li> <li>Implement retry logic</li> <li>Log sync failures</li> <li>Provide status updates</li> <li> <p>Handle edge cases</p> </li> <li> <p>Maintenance</p> </li> <li>Regular sync audits</li> <li>Monitor sync logs</li> <li>Clean up sync data</li> <li>Update sync configurations</li> </ol>"},{"location":"integration/sync/#next-steps","title":"Next Steps","text":"<ul> <li>Workflow Automation</li> <li>Error Handling</li> <li>Best Practices</li> <li>API Reference</li> </ul>"},{"location":"records/bulk-operations/","title":"Bulk Record Operations","text":"<p>This guide covers how to perform bulk operations on records in Teable tables, including batch creation, updates, and deletions.</p>"},{"location":"records/bulk-operations/#batch-record-creation","title":"Batch Record Creation","text":""},{"location":"records/bulk-operations/#creating-multiple-records","title":"Creating Multiple Records","text":"<pre><code>from teable import TeableClient, TeableConfig\n\n# Initialize the client\nclient = TeableClient(TeableConfig(\n    api_url=\"https://your-teable-instance.com/api\",\n    api_key=\"your-api-key\"\n))\n\n# Get your table\ntable = client.get_table(\"table_id\")\n\n# Prepare multiple records\nrecords = [\n    {\n        \"Name\": \"John Doe\",\n        \"Email\": \"john@example.com\",\n        \"Department\": \"Engineering\"\n    },\n    {\n        \"Name\": \"Jane Smith\",\n        \"Email\": \"jane@example.com\",\n        \"Department\": \"Marketing\"\n    }\n]\n\n# Batch create records\nresult = table.batch_create_records(\n    records=records,\n    field_key_type=\"name\",  # Use field names instead of IDs\n    typecast=True          # Automatically convert data types\n)\n\nprint(f\"Successfully created {result.success_count} records\")\nprint(f\"Failed to create {result.failure_count} records\")\n</code></pre>"},{"location":"records/bulk-operations/#handling-batch-results","title":"Handling Batch Results","text":"<pre><code># Process batch creation results\nfor record in result.successful:\n    print(f\"Created record: {record.record_id}\")\n    print(f\"Fields: {record.fields}\")\n\nfor error in result.failed:\n    print(f\"Failed record: {error['record']}\")\n    print(f\"Error: {error['error']}\")\n</code></pre>"},{"location":"records/bulk-operations/#batch-record-updates","title":"Batch Record Updates","text":""},{"location":"records/bulk-operations/#updating-multiple-records","title":"Updating Multiple Records","text":"<pre><code># Prepare updates\nupdates = [\n    {\n        \"recordId\": \"rec123\",\n        \"fields\": {\n            \"Status\": \"Active\",\n            \"Department\": \"Engineering\"\n        }\n    },\n    {\n        \"recordId\": \"rec456\",\n        \"fields\": {\n            \"Status\": \"Inactive\",\n            \"Department\": \"Marketing\"\n        }\n    }\n]\n\n# Perform batch update\nresult = table.batch_update_records(\n    updates=updates,\n    field_key_type=\"name\",\n    typecast=True\n)\n\nprint(f\"Updated {len(result.successful)} records\")\n</code></pre>"},{"location":"records/bulk-operations/#ordering-updates","title":"Ordering Updates","text":"<pre><code># Update records with specific order\nresult = table.batch_update_records(\n    updates=updates,\n    order={\n        \"viewId\": \"view123\",\n        \"anchorId\": \"rec789\",\n        \"position\": \"after\"\n    }\n)\n</code></pre>"},{"location":"records/bulk-operations/#batch-record-deletion","title":"Batch Record Deletion","text":""},{"location":"records/bulk-operations/#deleting-multiple-records","title":"Deleting Multiple Records","text":"<pre><code># Delete multiple records\nrecord_ids = [\"rec123\", \"rec456\", \"rec789\"]\nsuccess = table.batch_delete_records(record_ids)\n\nif success:\n    print(f\"Successfully deleted {len(record_ids)} records\")\n</code></pre>"},{"location":"records/bulk-operations/#performance-optimization","title":"Performance Optimization","text":""},{"location":"records/bulk-operations/#chunked-operations","title":"Chunked Operations","text":"<pre><code>def process_in_chunks(records, chunk_size=1000):\n    \"\"\"Process records in chunks to manage memory and API limits.\"\"\"\n    for i in range(0, len(records), chunk_size):\n        chunk = records[i:i + chunk_size]\n        yield chunk\n\n# Example usage with large dataset\nlarge_dataset = [\n    {\"Name\": f\"User {i}\", \"Email\": f\"user{i}@example.com\"}\n    for i in range(10000)\n]\n\ntotal_success = 0\ntotal_failure = 0\n\nfor chunk in process_in_chunks(large_dataset):\n    result = table.batch_create_records(chunk)\n    total_success += result.success_count\n    total_failure += result.failure_count\n    print(f\"Processed chunk: {result.success_count} successful, {result.failure_count} failed\")\n\nprint(f\"Total: {total_success} successful, {total_failure} failed\")\n</code></pre>"},{"location":"records/bulk-operations/#error-recovery","title":"Error Recovery","text":"<pre><code>def batch_operation_with_retry(table, records, max_retries=3):\n    \"\"\"Perform batch operation with retry for failed records.\"\"\"\n    all_results = {\n        'successful': [],\n        'failed': []\n    }\n\n    remaining = records\n    retry_count = 0\n\n    while remaining and retry_count &lt; max_retries:\n        result = table.batch_create_records(remaining)\n\n        # Add successful records to results\n        all_results['successful'].extend(result.successful)\n\n        # Prepare failed records for retry\n        if result.failed:\n            remaining = [\n                failed['record']\n                for failed in result.failed\n            ]\n            retry_count += 1\n            print(f\"Retry {retry_count}: {len(remaining)} records\")\n        else:\n            remaining = []\n\n    # Add any remaining failed records\n    if remaining:\n        all_results['failed'].extend(remaining)\n\n    return all_results\n</code></pre>"},{"location":"records/bulk-operations/#data-validation","title":"Data Validation","text":""},{"location":"records/bulk-operations/#pre-validation","title":"Pre-validation","text":"<pre><code>def validate_records(table, records):\n    \"\"\"Validate records before batch operation.\"\"\"\n    valid_records = []\n    invalid_records = []\n\n    for record in records:\n        try:\n            table.validate_record_fields(record)\n            valid_records.append(record)\n        except ValidationError as e:\n            invalid_records.append({\n                'record': record,\n                'error': str(e)\n            })\n\n    return valid_records, invalid_records\n\n# Usage\nvalid, invalid = validate_records(table, records)\nif valid:\n    result = table.batch_create_records(valid)\nif invalid:\n    print(\"Invalid records:\")\n    for item in invalid:\n        print(f\"Record: {item['record']}\")\n        print(f\"Error: {item['error']}\")\n</code></pre>"},{"location":"records/bulk-operations/#best-practices","title":"Best Practices","text":"<ol> <li>Batch Size</li> <li>Use appropriate chunk sizes (500-1000 records)</li> <li>Monitor memory usage</li> <li>Consider API rate limits</li> <li> <p>Balance performance and reliability</p> </li> <li> <p>Error Handling</p> </li> <li>Implement retry mechanisms</li> <li>Log failed operations</li> <li>Provide meaningful error messages</li> <li> <p>Consider partial success scenarios</p> </li> <li> <p>Performance</p> </li> <li>Use chunked operations</li> <li>Implement parallel processing when appropriate</li> <li>Monitor operation timing</li> <li> <p>Optimize data preparation</p> </li> <li> <p>Data Integrity</p> </li> <li>Validate data before operations</li> <li>Maintain referential integrity</li> <li>Handle duplicates appropriately</li> <li>Consider transaction boundaries</li> </ol>"},{"location":"records/bulk-operations/#next-steps","title":"Next Steps","text":"<ul> <li>Query Records</li> <li>Update Records</li> <li>Delete Records</li> <li>Table Operations</li> </ul>"},{"location":"records/create/","title":"Creating Records","text":"<p>This guide covers how to create and manage individual records in Teable tables using the Teable-Client library. Learn about record creation, field value management, and record properties.</p>"},{"location":"records/create/#basic-record-creation","title":"Basic Record Creation","text":""},{"location":"records/create/#creating-a-simple-record","title":"Creating a Simple Record","text":"<pre><code>from teable import TeableClient, TeableConfig\n\n# Initialize the client\nclient = TeableClient(TeableConfig(\n    api_url=\"https://your-teable-instance.com/api\",\n    api_key=\"your-api-key\"\n))\n\n# Get your table\ntable = client.get_table(\"table_id\")\n\n# Create a record\nrecord = table.create_record({\n    \"Name\": \"John Doe\",\n    \"Email\": \"john@example.com\",\n    \"Department\": \"Engineering\",\n    \"Start Date\": \"2023-01-15\"\n})\n\nprint(f\"Created record ID: {record.record_id}\")\n</code></pre>"},{"location":"records/create/#record-properties","title":"Record Properties","text":"<p>Access various record properties:</p> <pre><code># Access record information\nprint(f\"Record ID: {record.record_id}\")\nprint(f\"Primary Field Value: {record.name}\")\nprint(f\"Auto Number: {record.auto_number}\")\nprint(f\"Created Time: {record.created_time}\")\nprint(f\"Last Modified Time: {record.last_modified_time}\")\nprint(f\"Created By: {record.created_by}\")\nprint(f\"Last Modified By: {record.last_modified_by}\")\n</code></pre>"},{"location":"records/create/#working-with-field-values","title":"Working with Field Values","text":""},{"location":"records/create/#getting-field-values","title":"Getting Field Values","text":"<pre><code># Get field value by name\nname = record.get_field_value(\"Name\")\nemail = record.get_field_value(\"Email\")\n\n# Get field value using Field object\nfield = table.get_field(\"field_id\")\nvalue = record.get_field_value(field)\n\n# Access raw field values\nfields = record.fields\nprint(f\"All field values: {fields}\")\n</code></pre>"},{"location":"records/create/#setting-field-values","title":"Setting Field Values","text":"<pre><code># Set field value by name\nrecord.set_field_value(\"Status\", \"Active\")\n\n# Set field value with type casting\nrecord.set_field_value(\n    \"Start Date\",\n    \"2023-01-15\",\n    typecast=True  # Automatically convert string to date\n)\n\n# Set field value using Field object\nfield = table.get_field(\"field_id\")\nrecord.set_field_value(field, \"New Value\")\n</code></pre>"},{"location":"records/create/#record-creation-with-validation","title":"Record Creation with Validation","text":"<pre><code>from teable.exceptions import ValidationError\n\ntry:\n    # Create record with validation\n    record = table.create_record({\n        \"Name\": \"Jane Smith\",\n        \"Email\": \"jane@example.com\",\n        \"Department\": \"Marketing\",\n        \"Salary\": 75000,\n        \"Is Active\": True\n    })\nexcept ValidationError as e:\n    print(f\"Validation error: {e}\")\n</code></pre>"},{"location":"records/create/#advanced-record-creation","title":"Advanced Record Creation","text":""},{"location":"records/create/#creating-records-with-special-fields","title":"Creating Records with Special Fields","text":"<pre><code># Create record with different field types\nrecord = table.create_record({\n    # Text fields\n    \"Name\": \"Alice Johnson\",\n    \"Description\": \"Senior Developer\",\n\n    # Numeric fields\n    \"Salary\": 85000,\n    \"Years Experience\": 5,\n\n    # Date fields\n    \"Start Date\": \"2023-01-15\",\n    \"Last Review\": \"2023-06-30T14:30:00Z\",\n\n    # Boolean fields\n    \"Is Manager\": True,\n    \"Remote Worker\": False,\n\n    # Select fields\n    \"Department\": \"Engineering\",\n    \"Skills\": [\"Python\", \"JavaScript\", \"Docker\"],\n\n    # Link fields (references to other records)\n    \"Manager\": [\"rec123\"],\n    \"Projects\": [\"rec456\", \"rec789\"]\n})\n</code></pre>"},{"location":"records/create/#creating-records-with-attachments","title":"Creating Records with Attachments","text":"<pre><code># Create record with file attachments\nrecord = table.create_record({\n    \"Name\": \"Project Documentation\",\n    \"Files\": [\n        {\n            \"filename\": \"document.pdf\",\n            \"url\": \"https://example.com/files/document.pdf\",\n            \"size\": 1024,\n            \"type\": \"application/pdf\"\n        }\n    ]\n})\n</code></pre>"},{"location":"records/create/#converting-records","title":"Converting Records","text":""},{"location":"records/create/#record-to-dictionary","title":"Record to Dictionary","text":"<pre><code># Convert record to dictionary format\nrecord_dict = record.to_dict()\n\nprint(\"Record as dictionary:\")\nprint(f\"ID: {record_dict['id']}\")\nprint(f\"Fields: {record_dict['fields']}\")\n</code></pre>"},{"location":"records/create/#error-handling","title":"Error Handling","text":"<pre><code>from teable.exceptions import TeableError, ValidationError\n\ndef safe_create_record(table, data):\n    \"\"\"Safely create a record with error handling.\"\"\"\n    try:\n        # Validate field values first\n        table.validate_record_fields(data)\n\n        # Create the record\n        record = table.create_record(data)\n        return record\n\n    except ValidationError as e:\n        print(f\"Field validation error: {e}\")\n        return None\n    except TeableError as e:\n        print(f\"Error creating record: {e}\")\n        return None\n</code></pre>"},{"location":"records/create/#best-practices","title":"Best Practices","text":"<ol> <li>Data Validation</li> <li>Validate data before creation</li> <li>Use appropriate data types</li> <li>Handle validation errors gracefully</li> <li> <p>Document validation requirements</p> </li> <li> <p>Field Management</p> </li> <li>Use consistent field naming</li> <li>Handle required fields appropriately</li> <li>Consider field dependencies</li> <li> <p>Validate linked records</p> </li> <li> <p>Error Handling</p> </li> <li>Implement comprehensive error handling</li> <li>Provide meaningful error messages</li> <li>Log validation failures</li> <li> <p>Consider recovery strategies</p> </li> <li> <p>Performance</p> </li> <li>Use batch operations for multiple records</li> <li>Minimize API calls</li> <li>Handle large attachments appropriately</li> <li>Consider caching strategies</li> </ol>"},{"location":"records/create/#helper-functions","title":"Helper Functions","text":"<pre><code>def create_record_with_defaults(table, data, defaults=None):\n    \"\"\"Create a record with default values.\"\"\"\n    # Merge defaults with provided data\n    record_data = {**(defaults or {}), **data}\n\n    try:\n        record = table.create_record(record_data)\n        return record\n    except ValidationError as e:\n        print(f\"Validation error: {e}\")\n        return None\n\n# Example usage\ndefaults = {\n    \"Status\": \"Active\",\n    \"Created Date\": datetime.now().isoformat(),\n    \"Department\": \"Unassigned\"\n}\n\nrecord = create_record_with_defaults(\n    table,\n    {\"Name\": \"New Employee\"},\n    defaults=defaults\n)\n</code></pre>"},{"location":"records/create/#next-steps","title":"Next Steps","text":"<p>After mastering record creation, you can:</p> <ul> <li>Read and query records</li> <li>Update existing records</li> <li>Delete records</li> <li>Work with bulk operations</li> </ul>"},{"location":"records/delete/","title":"Deleting Records","text":"<p>This guide covers how to delete records from Teable tables using the Teable-Client library. Learn about single record deletion, batch deletions, and handling the deletion process safely.</p>"},{"location":"records/delete/#basic-record-deletion","title":"Basic Record Deletion","text":""},{"location":"records/delete/#deleting-a-single-record","title":"Deleting a Single Record","text":"<pre><code>from teable import TeableClient, TeableConfig\n\n# Initialize the client\nclient = TeableClient(TeableConfig(\n    api_url=\"https://your-teable-instance.com/api\",\n    api_key=\"your-api-key\"\n))\n\n# Get your table\ntable = client.get_table(\"table_id\")\n\n# Delete a record\ntry:\n    success = table.delete_record(\"rec123\")\n    if success:\n        print(\"Record successfully deleted\")\nexcept TeableError as e:\n    print(f\"Error deleting record: {e}\")\n</code></pre>"},{"location":"records/delete/#safe-record-deletion","title":"Safe Record Deletion","text":"<pre><code>from teable.exceptions import TeableError, ResourceNotFoundError\n\ndef safe_delete_record(table, record_id):\n    \"\"\"Safely delete a record with error handling.\"\"\"\n    try:\n        # Verify record exists\n        record = table.get_record(record_id)\n\n        # Delete record\n        success = table.delete_record(record_id)\n        return success\n\n    except ResourceNotFoundError:\n        print(f\"Record {record_id} not found\")\n        return False\n    except TeableError as e:\n        print(f\"Error deleting record: {e}\")\n        return False\n</code></pre>"},{"location":"records/delete/#batch-deletions","title":"Batch Deletions","text":""},{"location":"records/delete/#deleting-multiple-records","title":"Deleting Multiple Records","text":"<pre><code># Delete multiple records\nrecord_ids = [\"rec123\", \"rec456\", \"rec789\"]\n\ntry:\n    success = table.batch_delete_records(record_ids)\n    if success:\n        print(f\"Successfully deleted {len(record_ids)} records\")\nexcept TeableError as e:\n    print(f\"Error during batch deletion: {e}\")\n</code></pre>"},{"location":"records/delete/#batch-deletion-with-validation","title":"Batch Deletion with Validation","text":"<pre><code>def validate_and_delete_records(table, record_ids):\n    \"\"\"Validate records before deletion.\"\"\"\n    # Verify all records exist\n    existing_records = []\n    missing_records = []\n\n    for record_id in record_ids:\n        try:\n            table.get_record(record_id)\n            existing_records.append(record_id)\n        except ResourceNotFoundError:\n            missing_records.append(record_id)\n\n    if missing_records:\n        print(f\"Warning: Records not found: {missing_records}\")\n\n    if existing_records:\n        success = table.batch_delete_records(existing_records)\n        return success, len(existing_records)\n\n    return False, 0\n</code></pre>"},{"location":"records/delete/#advanced-deletion","title":"Advanced Deletion","text":""},{"location":"records/delete/#conditional-deletion","title":"Conditional Deletion","text":"<pre><code>def delete_records_by_condition(table, condition):\n    \"\"\"Delete records that match a condition.\"\"\"\n    # Get records matching condition\n    records = table.get_records(filter=condition)\n\n    if not records:\n        print(\"No records match the condition\")\n        return 0\n\n    # Delete matching records\n    record_ids = [record.record_id for record in records]\n    success = table.batch_delete_records(record_ids)\n\n    if success:\n        return len(record_ids)\n    return 0\n\n# Example usage\ndeleted_count = delete_records_by_condition(\n    table,\n    {\n        \"field\": \"Status\",\n        \"operator\": \"=\",\n        \"value\": \"Inactive\"\n    }\n)\nprint(f\"Deleted {deleted_count} inactive records\")\n</code></pre>"},{"location":"records/delete/#chunked-deletion","title":"Chunked Deletion","text":"<pre><code>def delete_records_in_chunks(table, record_ids, chunk_size=1000):\n    \"\"\"Delete large number of records in chunks.\"\"\"\n    total_deleted = 0\n\n    # Process records in chunks\n    for i in range(0, len(record_ids), chunk_size):\n        chunk = record_ids[i:i + chunk_size]\n        try:\n            success = table.batch_delete_records(chunk)\n            if success:\n                total_deleted += len(chunk)\n                print(f\"Deleted chunk {i//chunk_size + 1}: {len(chunk)} records\")\n        except TeableError as e:\n            print(f\"Error deleting chunk: {e}\")\n\n    return total_deleted\n</code></pre>"},{"location":"records/delete/#error-handling","title":"Error Handling","text":""},{"location":"records/delete/#comprehensive-error-handling","title":"Comprehensive Error Handling","text":"<pre><code>from teable.exceptions import TeableError, ResourceNotFoundError, ValidationError\n\ndef handle_record_deletion(table, record_id):\n    \"\"\"Handle record deletion with comprehensive error handling.\"\"\"\n    try:\n        # Attempt to delete record\n        success = table.delete_record(record_id)\n\n        if success:\n            print(f\"Successfully deleted record {record_id}\")\n            return True\n        else:\n            print(f\"Failed to delete record {record_id}\")\n            return False\n\n    except ResourceNotFoundError:\n        print(f\"Record {record_id} not found\")\n        return False\n    except ValidationError as e:\n        print(f\"Validation error: {e}\")\n        return False\n    except TeableError as e:\n        print(f\"Teable error: {e}\")\n        return False\n    except Exception as e:\n        print(f\"Unexpected error: {e}\")\n        return False\n</code></pre>"},{"location":"records/delete/#batch-error-recovery","title":"Batch Error Recovery","text":"<pre><code>def batch_delete_with_recovery(table, record_ids, max_retries=3):\n    \"\"\"Attempt batch deletion with retry for failed records.\"\"\"\n    remaining_ids = record_ids\n    retry_count = 0\n    total_deleted = 0\n\n    while remaining_ids and retry_count &lt; max_retries:\n        try:\n            success = table.batch_delete_records(remaining_ids)\n            if success:\n                total_deleted += len(remaining_ids)\n                remaining_ids = []\n            else:\n                retry_count += 1\n\n        except TeableError as e:\n            print(f\"Error on attempt {retry_count + 1}: {e}\")\n            retry_count += 1\n\n    if remaining_ids:\n        print(f\"Failed to delete {len(remaining_ids)} records after {max_retries} attempts\")\n\n    return total_deleted\n</code></pre>"},{"location":"records/delete/#best-practices","title":"Best Practices","text":"<ol> <li>Data Validation</li> <li>Verify records exist before deletion</li> <li>Handle missing records gracefully</li> <li>Consider data relationships</li> <li> <p>Document deletion requirements</p> </li> <li> <p>Performance</p> </li> <li>Use batch deletions for multiple records</li> <li>Process large deletions in chunks</li> <li>Monitor deletion performance</li> <li> <p>Consider rate limits</p> </li> <li> <p>Error Handling</p> </li> <li>Implement comprehensive error handling</li> <li>Log deletion failures</li> <li>Provide meaningful error messages</li> <li> <p>Consider recovery strategies</p> </li> <li> <p>Data Integrity</p> </li> <li>Consider cascading deletions</li> <li>Validate data relationships</li> <li>Maintain referential integrity</li> <li>Back up important data</li> </ol>"},{"location":"records/delete/#next-steps","title":"Next Steps","text":"<p>After mastering record deletion, you can:</p> <ul> <li>Query records</li> <li>Update records</li> <li>Work with bulk operations</li> <li>Set up views</li> </ul>"},{"location":"records/read/","title":"Reading and Querying Records","text":"<p>This guide covers how to read and query records in Teable tables using the Teable-Client library. Learn about retrieving individual records, querying multiple records, and using various filtering and sorting options.</p>"},{"location":"records/read/#reading-individual-records","title":"Reading Individual Records","text":""},{"location":"records/read/#getting-a-single-record","title":"Getting a Single Record","text":"<pre><code>from teable import TeableClient, TeableConfig\n\n# Initialize the client\nclient = TeableClient(TeableConfig(\n    api_url=\"https://your-teable-instance.com/api\",\n    api_key=\"your-api-key\"\n))\n\n# Get your table\ntable = client.get_table(\"table_id\")\n\n# Get a record by ID\ntry:\n    record = table.get_record(\n        record_id=\"rec123\",\n        cell_format=\"json\"  # or \"text\"\n    )\n    print(f\"Record ID: {record.record_id}\")\n    print(f\"Fields: {record.fields}\")\nexcept ResourceNotFoundError:\n    print(\"Record not found\")\n</code></pre>"},{"location":"records/read/#specifying-fields-to-return","title":"Specifying Fields to Return","text":"<pre><code># Get specific fields only\nrecord = table.get_record(\n    record_id=\"rec123\",\n    projection=[\"Name\", \"Email\", \"Department\"]\n)\n\n# Access the fields\nprint(f\"Name: {record.fields.get('Name')}\")\nprint(f\"Email: {record.fields.get('Email')}\")\n</code></pre>"},{"location":"records/read/#querying-multiple-records","title":"Querying Multiple Records","text":""},{"location":"records/read/#basic-query","title":"Basic Query","text":"<pre><code># Get all records\nrecords = table.get_records()\n\n# Process records\nfor record in records:\n    print(f\"Record ID: {record.record_id}\")\n    print(f\"Name: {record.fields.get('Name')}\")\n    print(\"---\")\n</code></pre>"},{"location":"records/read/#filtering-records","title":"Filtering Records","text":"<pre><code># Filter by field value\nrecords = table.get_records(\n    filter={\n        \"field\": \"Department\",\n        \"operator\": \"=\",\n        \"value\": \"Engineering\"\n    }\n)\n\n# Multiple conditions\nrecords = table.get_records(\n    filter={\n        \"operator\": \"and\",\n        \"conditions\": [\n            {\n                \"field\": \"Department\",\n                \"operator\": \"=\",\n                \"value\": \"Engineering\"\n            },\n            {\n                \"field\": \"Salary\",\n                \"operator\": \"&gt;\",\n                \"value\": 75000\n            }\n        ]\n    }\n)\n</code></pre>"},{"location":"records/read/#sorting-records","title":"Sorting Records","text":"<pre><code># Sort by a single field\nrecords = table.get_records(\n    order_by=\"Name\"  # Ascending order\n)\n\n# Sort by multiple fields\nrecords = table.get_records(\n    order_by=[\n        {\"field\": \"Department\", \"direction\": \"asc\"},\n        {\"field\": \"Salary\", \"direction\": \"desc\"}\n    ]\n)\n</code></pre>"},{"location":"records/read/#pagination","title":"Pagination","text":"<pre><code># Get records with pagination\nrecords = table.get_records(\n    take=50,    # Number of records to return\n    skip=100    # Number of records to skip\n)\n</code></pre>"},{"location":"records/read/#advanced-querying","title":"Advanced Querying","text":""},{"location":"records/read/#using-query-builder","title":"Using Query Builder","text":"<pre><code># Create a query using the query builder\nquery = table.query()\\\n    .filter(\"Department\", \"=\", \"Engineering\")\\\n    .filter(\"Salary\", \"&gt;\", 75000)\\\n    .sort(\"Name\")\\\n    .paginate(take=10)\n\n# Execute the query\nrecords = table.get_records(query=query)\n</code></pre>"},{"location":"records/read/#search-functionality","title":"Search Functionality","text":"<pre><code># Search across fields\nrecords = table.get_records(\n    search=[\"John\", \"Name\", True]  # [value, field, exact match]\n)\n\n# Full-text search\nrecords = table.get_records(\n    filter_by_tql=\"John\"  # Teable Query Language\n)\n</code></pre>"},{"location":"records/read/#filtering-link-fields","title":"Filtering Link Fields","text":"<pre><code># Filter by linked record candidates\nrecords = table.get_records(\n    filter_link_cell_candidate=\"rec123\"\n)\n\n# Filter by selected linked records\nrecords = table.get_records(\n    filter_link_cell_selected=[\"rec123\", \"rec456\"]\n)\n</code></pre>"},{"location":"records/read/#view-based-queries","title":"View-Based Queries","text":"<pre><code># Get records from a specific view\nrecords = table.get_records(\n    view_id=\"viw123\"\n)\n\n# Get records from a view, ignoring view's query\nrecords = table.get_records(\n    view_id=\"viw123\",\n    ignore_view_query=True\n)\n</code></pre>"},{"location":"records/read/#field-formatting","title":"Field Formatting","text":""},{"location":"records/read/#cell-format-options","title":"Cell Format Options","text":"<pre><code># Get records with JSON formatting\nrecords = table.get_records(\n    cell_format=\"json\"\n)\n\n# Get records with text formatting\nrecords = table.get_records(\n    cell_format=\"text\"\n)\n</code></pre>"},{"location":"records/read/#field-key-types","title":"Field Key Types","text":"<pre><code># Use field names as keys\nrecords = table.get_records(\n    field_key_type=\"name\"\n)\n\n# Use field IDs as keys\nrecords = table.get_records(\n    field_key_type=\"id\"\n)\n</code></pre>"},{"location":"records/read/#error-handling","title":"Error Handling","text":"<pre><code>from teable.exceptions import TeableError, ResourceNotFoundError\n\ndef safe_get_records(table, **query_params):\n    \"\"\"Safely get records with error handling.\"\"\"\n    try:\n        records = table.get_records(**query_params)\n        return records\n    except ResourceNotFoundError:\n        print(\"Table or view not found\")\n        return []\n    except TeableError as e:\n        print(f\"Error retrieving records: {e}\")\n        return []\n</code></pre>"},{"location":"records/read/#performance-optimization","title":"Performance Optimization","text":""},{"location":"records/read/#projection-optimization","title":"Projection Optimization","text":"<pre><code>def get_minimal_records(table, required_fields):\n    \"\"\"Get records with only required fields.\"\"\"\n    return table.get_records(\n        projection=required_fields,\n        cell_format=\"json\"\n    )\n\n# Example usage\nminimal_records = get_minimal_records(\n    table,\n    [\"Name\", \"Email\"]\n)\n</code></pre>"},{"location":"records/read/#batch-processing","title":"Batch Processing","text":"<pre><code>def process_records_in_batches(table, batch_size=1000):\n    \"\"\"Process records in batches to manage memory.\"\"\"\n    processed = 0\n    while True:\n        batch = table.get_records(\n            skip=processed,\n            take=batch_size\n        )\n\n        if not batch:\n            break\n\n        for record in batch:\n            # Process record\n            process_record(record)\n\n        processed += len(batch)\n        print(f\"Processed {processed} records\")\n</code></pre>"},{"location":"records/read/#best-practices","title":"Best Practices","text":"<ol> <li>Query Optimization</li> <li>Use projections to limit returned fields</li> <li>Implement pagination for large datasets</li> <li>Use appropriate filters to reduce data transfer</li> <li> <p>Consider caching frequently accessed data</p> </li> <li> <p>Error Handling</p> </li> <li>Implement comprehensive error handling</li> <li>Handle resource not found cases</li> <li>Provide meaningful error messages</li> <li> <p>Consider retry strategies</p> </li> <li> <p>Performance</p> </li> <li>Use batch processing for large datasets</li> <li>Optimize query filters</li> <li>Consider view-based queries</li> <li> <p>Monitor query performance</p> </li> <li> <p>Data Format</p> </li> <li>Choose appropriate cell formats</li> <li>Use consistent field key types</li> <li>Handle null values appropriately</li> <li>Document format requirements</li> </ol>"},{"location":"records/read/#next-steps","title":"Next Steps","text":"<p>After mastering record querying, you can:</p> <ul> <li>Update existing records</li> <li>Delete records</li> <li>Work with views</li> <li>Implement data synchronization</li> </ul>"},{"location":"records/update/","title":"Updating Records","text":"<p>This guide covers how to update existing records in Teable tables using the Teable-Client library. Learn about updating individual records, batch updates, and handling field modifications.</p>"},{"location":"records/update/#basic-record-updates","title":"Basic Record Updates","text":""},{"location":"records/update/#updating-a-single-record","title":"Updating a Single Record","text":"<pre><code>from teable import TeableClient, TeableConfig\n\n# Initialize the client\nclient = TeableClient(TeableConfig(\n    api_url=\"https://your-teable-instance.com/api\",\n    api_key=\"your-api-key\"\n))\n\n# Get your table\ntable = client.get_table(\"table_id\")\n\n# Update a record\nupdated_record = table.update_record(\n    record_id=\"rec123\",\n    fields={\n        \"Name\": \"John Smith\",\n        \"Department\": \"Marketing\",\n        \"Status\": \"Active\"\n    }\n)\n\nprint(f\"Updated record ID: {updated_record.record_id}\")\n</code></pre>"},{"location":"records/update/#type-casting","title":"Type Casting","text":"<pre><code># Update with automatic type conversion\nupdated_record = table.update_record(\n    record_id=\"rec123\",\n    fields={\n        \"Start Date\": \"2023-01-15\",  # String to date\n        \"Salary\": \"75000\",           # String to number\n        \"Is Active\": \"true\"          # String to boolean\n    },\n    typecast=True\n)\n</code></pre>"},{"location":"records/update/#field-specific-updates","title":"Field-Specific Updates","text":""},{"location":"records/update/#updating-individual-fields","title":"Updating Individual Fields","text":"<pre><code># Get a record\nrecord = table.get_record(\"rec123\")\n\n# Update specific fields\nrecord.set_field_value(\"Status\", \"Inactive\")\nrecord.set_field_value(\"Last Modified\", \"2023-06-30\")\n\n# Save changes\nupdated_record = table.update_record(\n    record_id=record.record_id,\n    fields=record.fields\n)\n</code></pre>"},{"location":"records/update/#updating-special-field-types","title":"Updating Special Field Types","text":"<pre><code># Update different field types\nupdated_record = table.update_record(\n    record_id=\"rec123\",\n    fields={\n        # Text fields\n        \"Name\": \"Alice Johnson\",\n        \"Description\": \"Senior Developer\",\n\n        # Numeric fields\n        \"Salary\": 85000,\n        \"Years Experience\": 5,\n\n        # Date fields\n        \"Last Review\": \"2023-06-30T14:30:00Z\",\n\n        # Boolean fields\n        \"Is Manager\": True,\n\n        # Select fields\n        \"Department\": \"Engineering\",\n        \"Skills\": [\"Python\", \"JavaScript\", \"Docker\"],\n\n        # Link fields\n        \"Manager\": [\"rec456\"],\n        \"Projects\": [\"rec789\", \"rec012\"]\n    }\n)\n</code></pre>"},{"location":"records/update/#batch-updates","title":"Batch Updates","text":""},{"location":"records/update/#updating-multiple-records","title":"Updating Multiple Records","text":"<pre><code># Prepare updates\nupdates = [\n    {\n        \"recordId\": \"rec123\",\n        \"fields\": {\n            \"Status\": \"Active\",\n            \"Department\": \"Engineering\"\n        }\n    },\n    {\n        \"recordId\": \"rec456\",\n        \"fields\": {\n            \"Status\": \"Inactive\",\n            \"Department\": \"Marketing\"\n        }\n    }\n]\n\n# Perform batch update\nupdated_records = table.batch_update_records(\n    updates=updates,\n    field_key_type=\"name\",\n    typecast=True\n)\n\nprint(f\"Updated {len(updated_records)} records\")\n</code></pre>"},{"location":"records/update/#ordering-updates","title":"Ordering Updates","text":"<pre><code># Update records with specific order\nupdated_records = table.batch_update_records(\n    updates=updates,\n    order={\n        \"viewId\": \"view123\",\n        \"anchorId\": \"rec789\",\n        \"position\": \"after\"\n    }\n)\n</code></pre>"},{"location":"records/update/#validation-and-error-handling","title":"Validation and Error Handling","text":""},{"location":"records/update/#pre-validation","title":"Pre-validation","text":"<pre><code>from teable.exceptions import ValidationError\n\ntry:\n    # Validate fields before update\n    table.validate_record_fields({\n        \"Name\": \"Test User\",\n        \"Email\": \"test@example.com\",\n        \"Department\": \"Engineering\"\n    })\n\n    # Perform update if validation passes\n    updated_record = table.update_record(\n        record_id=\"rec123\",\n        fields=fields\n    )\nexcept ValidationError as e:\n    print(f\"Validation error: {e}\")\n</code></pre>"},{"location":"records/update/#safe-updates","title":"Safe Updates","text":"<pre><code>from teable.exceptions import TeableError, ResourceNotFoundError\n\ndef safe_update_record(table, record_id, fields):\n    \"\"\"Safely update a record with error handling.\"\"\"\n    try:\n        # Validate fields first\n        table.validate_record_fields(fields)\n\n        # Perform update\n        record = table.update_record(\n            record_id=record_id,\n            fields=fields\n        )\n        return record\n\n    except ValidationError as e:\n        print(f\"Field validation error: {e}\")\n        return None\n    except ResourceNotFoundError:\n        print(f\"Record {record_id} not found\")\n        return None\n    except TeableError as e:\n        print(f\"Error updating record: {e}\")\n        return None\n</code></pre>"},{"location":"records/update/#advanced-updates","title":"Advanced Updates","text":""},{"location":"records/update/#conditional-updates","title":"Conditional Updates","text":"<pre><code>def update_if_changed(table, record_id, new_fields):\n    \"\"\"Update record only if fields have changed.\"\"\"\n    # Get current record\n    current = table.get_record(record_id)\n\n    # Check for changes\n    changes = {}\n    for field, value in new_fields.items():\n        if current.fields.get(field) != value:\n            changes[field] = value\n\n    # Update if there are changes\n    if changes:\n        return table.update_record(\n            record_id=record_id,\n            fields=changes\n        )\n    return current\n</code></pre>"},{"location":"records/update/#batch-update-with-retry","title":"Batch Update with Retry","text":"<pre><code>def batch_update_with_retry(table, updates, max_retries=3):\n    \"\"\"Perform batch update with retry logic.\"\"\"\n    failed_updates = updates\n    retry_count = 0\n\n    while failed_updates and retry_count &lt; max_retries:\n        try:\n            result = table.batch_update_records(failed_updates)\n\n            # Check for partial failures\n            failed_updates = [\n                updates[error.index]\n                for error in result.errors\n            ]\n\n            if failed_updates:\n                retry_count += 1\n                print(f\"Retry {retry_count}: {len(failed_updates)} updates failed\")\n\n        except TeableError as e:\n            print(f\"Batch update error: {e}\")\n            retry_count += 1\n\n    return len(updates) - len(failed_updates)\n</code></pre>"},{"location":"records/update/#best-practices","title":"Best Practices","text":"<ol> <li>Data Validation</li> <li>Validate data before updates</li> <li>Use appropriate data types</li> <li>Handle validation errors gracefully</li> <li> <p>Document validation requirements</p> </li> <li> <p>Performance</p> </li> <li>Use batch updates for multiple records</li> <li>Implement retry logic for failures</li> <li>Monitor update performance</li> <li> <p>Consider rate limits</p> </li> <li> <p>Error Handling</p> </li> <li>Implement comprehensive error handling</li> <li>Log update failures</li> <li>Provide meaningful error messages</li> <li> <p>Consider recovery strategies</p> </li> <li> <p>Data Integrity</p> </li> <li>Validate data relationships</li> <li>Handle linked records appropriately</li> <li>Consider cascading updates</li> <li>Maintain data consistency</li> </ol>"},{"location":"records/update/#next-steps","title":"Next Steps","text":"<p>After mastering record updates, you can:</p> <ul> <li>Delete records</li> <li>Query records</li> <li>Work with bulk operations</li> <li>Set up views</li> </ul>"},{"location":"spaces/configuration/","title":"Space Configuration","text":"<p>This guide covers the configuration options and settings available for spaces in Teable, including space roles, organization management, and space updates.</p>"},{"location":"spaces/configuration/#space-roles","title":"Space Roles","text":"<p>Teable defines several roles for space access control:</p> <pre><code>from teable import SpaceRole\n\n# Available roles\nSpaceRole.OWNER       # Full control over the space\nSpaceRole.CREATOR     # Can create and manage content\nSpaceRole.EDITOR      # Can edit existing content\nSpaceRole.COMMENTER   # Can comment on content\nSpaceRole.VIEWER      # Can only view content\n</code></pre>"},{"location":"spaces/configuration/#basic-space-configuration","title":"Basic Space Configuration","text":""},{"location":"spaces/configuration/#updating-space-information","title":"Updating Space Information","text":"<p>You can update a space's basic information:</p> <pre><code>from teable import TeableClient, TeableConfig\n\n# Initialize the client\nclient = TeableClient(TeableConfig(\n    api_url=\"https://your-teable-instance.com/api\",\n    api_key=\"your-api-key\"\n))\n\n# Get a space\nspace = client.get_space(\"space123\")\n\n# Update space name\nupdated_space = space.update(name=\"New Space Name\")\nprint(f\"Space updated: {updated_space.name}\")\n</code></pre>"},{"location":"spaces/configuration/#organization-management","title":"Organization Management","text":"<p>Spaces can be associated with organizations:</p> <pre><code># Access organization information\nspace = client.get_space(\"space123\")\nif space.organization:\n    print(f\"Organization ID: {space.organization.org_id}\")\n    print(f\"Organization Name: {space.organization.name}\")\n</code></pre>"},{"location":"spaces/configuration/#access-control","title":"Access Control","text":""},{"location":"spaces/configuration/#role-based-access-control","title":"Role-Based Access Control","text":"<pre><code># Check user's role in a space\nspace = client.get_space(\"space123\")\nprint(f\"Current user's role: {space.role}\")\n\n# Determine if user has sufficient permissions\nif space.role in [SpaceRole.OWNER, SpaceRole.CREATOR]:\n    print(\"User can create and manage content\")\nelif space.role == SpaceRole.EDITOR:\n    print(\"User can edit content\")\nelif space.role == SpaceRole.COMMENTER:\n    print(\"User can comment on content\")\nelse:\n    print(\"User can only view content\")\n</code></pre>"},{"location":"spaces/configuration/#managing-collaborators","title":"Managing Collaborators","text":"<pre><code>from teable.models.collaborator import PrincipalType\n\n# Get collaborators with filtering options\ncollaborators, total_count = space.get_collaborators(\n    include_system=True,    # Include system collaborators\n    include_base=True,      # Include base information\n    skip=0,                 # Pagination offset\n    take=100,              # Number of results to return\n    search=\"john\",         # Search term\n    collaborator_type=PrincipalType.USER  # Filter by type\n)\n\n# Update collaborator role\nspace.update_collaborator(\n    principal_id=\"user123\",\n    principal_type=PrincipalType.USER,\n    role=SpaceRole.EDITOR\n)\n\n# Remove collaborator\nspace.delete_collaborator(\n    principal_id=\"user123\",\n    principal_type=PrincipalType.USER\n)\n\n# Add new collaborators\ncollaborators = [\n    {\n        \"principalId\": \"user123\",\n        \"principalType\": \"user\"\n    },\n    {\n        \"principalId\": \"dept456\",\n        \"principalType\": \"department\"\n    }\n]\nspace.add_collaborators(collaborators, role=SpaceRole.EDITOR)\n</code></pre>"},{"location":"spaces/configuration/#invitation-management","title":"Invitation Management","text":""},{"location":"spaces/configuration/#creating-and-managing-invitations","title":"Creating and Managing Invitations","text":"<pre><code># Create invitation link\ninvitation = space.create_invitation_link(role=SpaceRole.EDITOR)\nprint(f\"Invitation URL: {invitation.invite_url}\")\nprint(f\"Invitation Code: {invitation.invitation_code}\")\n\n# List all invitation links\ninvitations = space.get_invitation_links()\nfor inv in invitations:\n    print(f\"ID: {inv.invitation_id}\")\n    print(f\"Role: {inv.role}\")\n    print(f\"Created by: {inv.created_by}\")\n    print(f\"Created time: {inv.created_time}\")\n    print(\"---\")\n\n# Send email invitations\nemails = [\"user1@example.com\", \"user2@example.com\"]\nresult = space.invite_by_email(emails, role=SpaceRole.EDITOR)\nfor email, info in result.items():\n    print(f\"Invited {email}: {info['invitationId']}\")\n</code></pre>"},{"location":"spaces/configuration/#space-management","title":"Space Management","text":""},{"location":"spaces/configuration/#creating-bases","title":"Creating Bases","text":"<pre><code># Create a new base in the space\nbase = space.create_base(\n    name=\"Project Database\",\n    icon=\"\ud83d\udcca\"  # Optional emoji or icon identifier\n)\nprint(f\"Created base: {base.name} ({base.base_id})\")\n\n# List all bases in the space\nbases = space.get_bases()\nfor base in bases:\n    print(f\"Base: {base.name}\")\n    print(f\"ID: {base.base_id}\")\n    print(\"---\")\n</code></pre>"},{"location":"spaces/configuration/#best-practices","title":"Best Practices","text":"<ol> <li>Role Assignment</li> <li>Follow the principle of least privilege</li> <li>Regularly audit user roles</li> <li> <p>Use appropriate roles for automation and system accounts</p> </li> <li> <p>Organization Management</p> </li> <li>Keep organization information up to date</li> <li>Use consistent naming conventions</li> <li> <p>Document organization-space relationships</p> </li> <li> <p>Access Control</p> </li> <li>Regularly review collaborator access</li> <li>Clean up unused invitation links</li> <li>Use time-limited invitations when possible</li> <li> <p>Document access control policies</p> </li> <li> <p>Space Structure</p> </li> <li>Organize bases logically within spaces</li> <li>Use clear, descriptive names</li> <li>Maintain consistent structure across spaces</li> </ol>"},{"location":"spaces/configuration/#error-handling","title":"Error Handling","text":"<pre><code>from teable.exceptions import TeableError, ValidationError\n\ntry:\n    # Update space configuration\n    space.update(name=\"New Name\")\nexcept ValidationError as e:\n    print(f\"Invalid configuration: {e}\")\nexcept TeableError as e:\n    print(f\"Error updating space: {e}\")\n</code></pre>"},{"location":"spaces/configuration/#next-steps","title":"Next Steps","text":"<p>After configuring your space, you can:</p> <ul> <li>Create and manage bases</li> <li>Set up tables</li> <li>Manage records</li> </ul>"},{"location":"spaces/creation/","title":"Creating and Managing Spaces","text":"<p>Spaces in Teable are organizational units that contain bases (databases). This guide covers how to create and manage spaces using the Teable-Client library.</p>"},{"location":"spaces/creation/#creating-a-space","title":"Creating a Space","text":"<p>Creating a new space is straightforward:</p> <pre><code>from teable import TeableClient, TeableConfig\n\n# Initialize the client\nclient = TeableClient(TeableConfig(\n    api_url=\"https://your-teable-instance.com/api\",\n    api_key=\"your-api-key\"\n))\n\n# Create a new space\nspace = client.create_space(\"My Project Space\")\nprint(f\"Created space with ID: {space.space_id}\")\n</code></pre>"},{"location":"spaces/creation/#managing-space-collaborators","title":"Managing Space Collaborators","text":""},{"location":"spaces/creation/#adding-collaborators","title":"Adding Collaborators","text":"<p>You can add collaborators to a space with specific roles:</p> <pre><code>from teable import SpaceRole\n\n# Add user collaborators\ncollaborators = [\n    {\n        \"principalId\": \"user123\",\n        \"principalType\": \"user\"\n    },\n    {\n        \"principalId\": \"user456\",\n        \"principalType\": \"user\"\n    }\n]\n\nclient.add_space_collaborators(\n    space_id=\"space123\",\n    collaborators=collaborators,\n    role=SpaceRole.EDITOR\n)\n</code></pre>"},{"location":"spaces/creation/#listing-collaborators","title":"Listing Collaborators","text":"<p>You can list all collaborators in a space with various filtering options:</p> <pre><code># List all collaborators\ncollaborators = client.list_collaborators(\n    space_id=\"space123\",\n    include_system=True,  # Include system collaborators\n    include_base=True,    # Include base information\n    take=100,            # Limit results\n    search=\"john\"        # Search by name/email\n)\n\nfor collaborator in collaborators['collaborators']:\n    if collaborator['type'] == 'user':\n        print(f\"User: {collaborator['userName']} ({collaborator['email']})\")\n        print(f\"Role: {collaborator['role']}\")\n</code></pre>"},{"location":"spaces/creation/#updating-collaborator-roles","title":"Updating Collaborator Roles","text":"<p>You can update a collaborator's role:</p> <pre><code># Update collaborator role\nclient.update_collaborator(\n    space_id=\"space123\",\n    principal_id=\"user123\",\n    principal_type=\"user\",\n    role=SpaceRole.CREATOR\n)\n</code></pre>"},{"location":"spaces/creation/#removing-collaborators","title":"Removing Collaborators","text":"<p>To remove a collaborator from a space:</p> <pre><code># Remove collaborator\nclient.delete_collaborator(\n    space_id=\"space123\",\n    principal_id=\"user123\",\n    principal_type=\"user\"\n)\n</code></pre>"},{"location":"spaces/creation/#managing-space-invitations","title":"Managing Space Invitations","text":""},{"location":"spaces/creation/#creating-invitation-links","title":"Creating Invitation Links","text":"<p>You can create invitation links to share with potential collaborators:</p> <pre><code># Create an invitation link\ninvitation = client.create_invitation(\n    space_id=\"space123\",\n    role=SpaceRole.EDITOR\n)\n\nprint(f\"Invitation URL: {invitation['inviteUrl']}\")\nprint(f\"Invitation Code: {invitation['invitationCode']}\")\n</code></pre>"},{"location":"spaces/creation/#sending-email-invitations","title":"Sending Email Invitations","text":"<p>You can directly send invitation emails to multiple users:</p> <pre><code># Send invitation emails\nemails = [\"user1@example.com\", \"user2@example.com\"]\ninvitations = client.send_invitation_emails(\n    space_id=\"space123\",\n    emails=emails,\n    role=SpaceRole.EDITOR\n)\n\nfor email, invitation in invitations.items():\n    print(f\"Sent invitation to {email}: {invitation['invitationId']}\")\n</code></pre>"},{"location":"spaces/creation/#managing-invitation-links","title":"Managing Invitation Links","text":"<p>List, update, and delete invitation links:</p> <pre><code># List all invitation links\ninvitations = client.list_invitations(\"space123\")\nfor invitation in invitations:\n    print(f\"Invitation ID: {invitation['invitationId']}\")\n    print(f\"Role: {invitation['role']}\")\n    print(f\"URL: {invitation['inviteUrl']}\")\n\n# Update invitation role\nupdated = client.update_invitation(\n    space_id=\"space123\",\n    invitation_id=\"inv123\",\n    role=SpaceRole.VIEWER\n)\n\n# Delete an invitation\nclient.delete_invitation(\n    space_id=\"space123\",\n    invitation_id=\"inv123\"\n)\n</code></pre>"},{"location":"spaces/creation/#best-practices","title":"Best Practices","text":"<ol> <li>Role Management</li> <li>Assign appropriate roles based on user responsibilities</li> <li>Regularly review and audit collaborator permissions</li> <li> <p>Use the most restrictive role that still allows users to do their work</p> </li> <li> <p>Invitation Management</p> </li> <li>Set appropriate expiration times for invitation links</li> <li>Regularly clean up unused invitation links</li> <li>Use email invitations for direct user invites</li> <li> <p>Use invitation links for broader sharing needs</p> </li> <li> <p>Security Considerations</p> </li> <li>Regularly audit space access and permissions</li> <li>Remove collaborators who no longer need access</li> <li>Use time-limited invitation links when possible</li> <li>Monitor space activity for unusual patterns</li> </ol>"},{"location":"spaces/creation/#error-handling","title":"Error Handling","text":"<p>Handle potential errors when managing spaces:</p> <pre><code>from teable.exceptions import TeableError, ValidationError, AuthenticationError\n\ntry:\n    space = client.create_space(\"New Space\")\nexcept ValidationError as e:\n    print(f\"Invalid space name: {e}\")\nexcept AuthenticationError as e:\n    print(f\"Authentication failed: {e}\")\nexcept TeableError as e:\n    print(f\"Error creating space: {e}\")\n</code></pre>"},{"location":"spaces/creation/#next-steps","title":"Next Steps","text":"<p>After creating and configuring your space, you can:</p> <ul> <li>Create bases within the space</li> <li>Manage space configuration</li> <li>Set up tables within bases</li> </ul>"},{"location":"spaces/management/","title":"Managing Spaces","text":"<p>This guide covers the various operations available for managing spaces in Teable, including listing spaces, retrieving space information, and managing space content.</p>"},{"location":"spaces/management/#listing-spaces","title":"Listing Spaces","text":"<p>You can retrieve all accessible spaces:</p> <pre><code>from teable import TeableClient, TeableConfig\n\n# Initialize the client\nclient = TeableClient(TeableConfig(\n    api_url=\"https://your-teable-instance.com/api\",\n    api_key=\"your-api-key\"\n))\n\n# Get all accessible spaces\nspaces = client.get_spaces()\n\n# Display space information\nfor space in spaces:\n    print(f\"Space ID: {space.space_id}\")\n    print(f\"Name: {space.name}\")\n    print(\"---\")\n</code></pre>"},{"location":"spaces/management/#retrieving-a-specific-space","title":"Retrieving a Specific Space","text":"<p>Get detailed information about a specific space:</p> <pre><code># Get a space by ID\nspace = client.get_space(\"space123\")\n\n# Access space properties\nprint(f\"Space Name: {space.name}\")\nprint(f\"Space ID: {space.space_id}\")\n</code></pre>"},{"location":"spaces/management/#managing-space-content","title":"Managing Space Content","text":""},{"location":"spaces/management/#listing-bases-in-a-space","title":"Listing Bases in a Space","text":"<p>You can retrieve all bases within a space:</p> <pre><code># Get all bases in a space\nbases = client.get_space_bases(\"space123\")\n\nfor base in bases:\n    print(f\"Base Name: {base.name}\")\n    print(f\"Base ID: {base.base_id}\")\n    print(\"---\")\n</code></pre>"},{"location":"spaces/management/#managing-space-trash","title":"Managing Space Trash","text":"<p>Teable provides trash management capabilities for spaces:</p> <pre><code>from teable.models.trash import ResourceType\n\n# List items in space trash\ntrash_items = client.get_trash_items(ResourceType.SPACE)\n\n# List trash items for a specific space\nspace_trash = client.get_trash_items_for_resource(\n    resource_id=\"space123\",\n    resource_type=ResourceType.SPACE\n)\n\n# Restore an item from trash\nclient.restore_trash_item(\"trash_item_id\")\n\n# Permanently delete trash items\nclient.reset_trash_items_for_resource(\n    resource_id=\"space123\",\n    resource_type=ResourceType.SPACE\n)\n</code></pre>"},{"location":"spaces/management/#permanent-deletion","title":"Permanent Deletion","text":"<p>If needed, you can permanently delete a space:</p> <pre><code>try:\n    # Permanently delete a space\n    client.permanently_delete_space(\"space123\")\n    print(\"Space permanently deleted\")\nexcept TeableError as e:\n    print(f\"Error deleting space: {e}\")\n</code></pre> <p>Warning</p> <p>Permanent deletion cannot be undone. Make sure to back up any important data before proceeding with permanent deletion.</p>"},{"location":"spaces/management/#space-permissions","title":"Space Permissions","text":""},{"location":"spaces/management/#checking-base-permissions","title":"Checking Base Permissions","text":"<p>You can check permissions for bases within a space:</p> <pre><code># Get permissions for a base\npermissions = client.get_base_permission(\"base123\")\n\n# Check specific permissions\nfor permission, allowed in permissions.items():\n    print(f\"{permission}: {'Allowed' if allowed else 'Not Allowed'}\")\n</code></pre>"},{"location":"spaces/management/#advanced-operations","title":"Advanced Operations","text":""},{"location":"spaces/management/#database-connections","title":"Database Connections","text":"<p>Teable allows you to manage database connections for bases within a space:</p> <pre><code># Create a database connection\nconnection = client.create_db_connection(\"base123\")\nprint(f\"Connection URL: {connection['url']}\")\n\n# Get connection information\nconnection_info = client.get_db_connection(\"base123\")\nprint(f\"Current connections: {connection_info['connection']['current']}\")\nprint(f\"Max connections: {connection_info['connection']['max']}\")\n\n# Delete a connection when no longer needed\nclient.delete_db_connection(\"base123\")\n</code></pre>"},{"location":"spaces/management/#base-ordering","title":"Base Ordering","text":"<p>You can manage the order of bases within a space:</p> <pre><code># Update base order\nclient.update_base_order(\n    base_id=\"base123\",\n    anchor_id=\"base456\",\n    position=\"after\"  # or \"before\"\n)\n</code></pre>"},{"location":"spaces/management/#querying-bases","title":"Querying Bases","text":"<p>Execute SQL queries on bases within a space:</p> <pre><code># Execute a query\nresults = client.query_base(\n    base_id=\"base123\",\n    query=\"SELECT * FROM table_name WHERE column = 'value'\",\n    cell_format=\"json\"  # or \"text\"\n)\n\nfor row in results:\n    print(row)\n</code></pre>"},{"location":"spaces/management/#best-practices","title":"Best Practices","text":"<ol> <li>Resource Management</li> <li>Regularly clean up unused spaces and bases</li> <li>Use trash management before permanent deletion</li> <li> <p>Monitor database connections and close unused ones</p> </li> <li> <p>Performance Optimization</p> </li> <li>Use pagination when listing large numbers of items</li> <li>Close database connections when not in use</li> <li> <p>Use appropriate cell formats when querying data</p> </li> <li> <p>Organization</p> </li> <li>Maintain a clear naming convention for spaces</li> <li>Group related bases within the same space</li> <li>Use descriptive names for better searchability</li> </ol>"},{"location":"spaces/management/#error-handling","title":"Error Handling","text":"<p>Implement proper error handling for space management operations:</p> <pre><code>from teable.exceptions import TeableError, ResourceNotFoundError\n\ntry:\n    space = client.get_space(\"space123\")\nexcept ResourceNotFoundError:\n    print(\"Space not found\")\nexcept TeableError as e:\n    print(f\"Error accessing space: {e}\")\n</code></pre>"},{"location":"spaces/management/#next-steps","title":"Next Steps","text":"<p>After mastering space management, you might want to explore:</p> <ul> <li>Space Configuration</li> <li>Base Creation</li> <li>Table Management</li> </ul>"},{"location":"tables/bulk-operations/","title":"Bulk Operations","text":"<p>This guide covers how to perform bulk operations in Teable tables, including batch record operations, imports, and exports. Learn how to efficiently manage large datasets and perform operations on multiple records simultaneously.</p>"},{"location":"tables/bulk-operations/#batch-record-operations","title":"Batch Record Operations","text":""},{"location":"tables/bulk-operations/#batch-creation","title":"Batch Creation","text":"<pre><code>from teable import TeableClient, TeableConfig\n\n# Initialize the client\nclient = TeableClient(TeableConfig(\n    api_url=\"https://your-teable-instance.com/api\",\n    api_key=\"your-api-key\"\n))\n\n# Get your table\ntable = client.get_table(\"table_id\")\n\n# Prepare multiple records\nrecords = [\n    {\n        \"Name\": f\"User {i}\",\n        \"Email\": f\"user{i}@example.com\",\n        \"Department\": \"Engineering\"\n    }\n    for i in range(1, 101)  # Create 100 records\n]\n\n# Batch create records\nresult = table.batch_create_records(\n    records=records,\n    field_key_type=\"name\",  # Use field names instead of IDs\n    typecast=True          # Automatically convert data types\n)\n\nprint(f\"Successfully created {result.success_count} records\")\nprint(f\"Failed to create {result.failure_count} records\")\n</code></pre>"},{"location":"tables/bulk-operations/#batch-updates","title":"Batch Updates","text":"<pre><code># Prepare updates for multiple records\nupdates = [\n    {\n        \"recordId\": \"rec123\",\n        \"fields\": {\n            \"Status\": \"Active\",\n            \"Last Updated\": \"2023-01-15\"\n        }\n    },\n    {\n        \"recordId\": \"rec456\",\n        \"fields\": {\n            \"Status\": \"Inactive\",\n            \"Last Updated\": \"2023-01-15\"\n        }\n    }\n]\n\n# Batch update records\nupdated_records = table.batch_update_records(\n    updates=updates,\n    field_key_type=\"name\",\n    typecast=True\n)\n\nprint(f\"Updated {len(updated_records)} records\")\n</code></pre>"},{"location":"tables/bulk-operations/#batch-deletion","title":"Batch Deletion","text":"<pre><code># Delete multiple records\nrecord_ids = [\"rec123\", \"rec456\", \"rec789\"]\nsuccess = table.batch_delete_records(record_ids)\n\nif success:\n    print(f\"Successfully deleted {len(record_ids)} records\")\n</code></pre>"},{"location":"tables/bulk-operations/#handling-large-datasets","title":"Handling Large Datasets","text":""},{"location":"tables/bulk-operations/#chunked-operations","title":"Chunked Operations","text":"<pre><code>def process_in_chunks(records, chunk_size=1000):\n    \"\"\"Process records in chunks to manage memory and API limits.\"\"\"\n    for i in range(0, len(records), chunk_size):\n        chunk = records[i:i + chunk_size]\n        yield chunk\n\n# Example usage with large dataset\nlarge_dataset = [\n    {\"Name\": f\"User {i}\", \"Email\": f\"user{i}@example.com\"}\n    for i in range(10000)\n]\n\ntotal_success = 0\ntotal_failure = 0\n\nfor chunk in process_in_chunks(large_dataset):\n    result = table.batch_create_records(chunk)\n    total_success += result.success_count\n    total_failure += result.failure_count\n    print(f\"Processed chunk: {result.success_count} successful, {result.failure_count} failed\")\n\nprint(f\"Total: {total_success} successful, {total_failure} failed\")\n</code></pre>"},{"location":"tables/bulk-operations/#error-handling-in-batch-operations","title":"Error Handling in Batch Operations","text":"<pre><code>from teable.exceptions import TeableError, ValidationError\n\ndef safe_batch_operation(table, records):\n    \"\"\"Safely perform batch operations with error handling.\"\"\"\n    results = {\n        'successful': [],\n        'failed': []\n    }\n\n    try:\n        # Attempt batch creation\n        result = table.batch_create_records(records)\n\n        # Process results\n        results['successful'] = result.successful_records\n\n        # Handle partial failures\n        for error in result.errors:\n            results['failed'].append({\n                'record': records[error.index],\n                'error': error.message\n            })\n\n    except TeableError as e:\n        print(f\"Batch operation failed: {e}\")\n        results['failed'].extend([\n            {'record': record, 'error': str(e)}\n            for record in records\n        ])\n\n    return results\n</code></pre>"},{"location":"tables/bulk-operations/#data-import-and-export","title":"Data Import and Export","text":""},{"location":"tables/bulk-operations/#csv-import","title":"CSV Import","text":"<pre><code>def import_csv_data(table, csv_file_path, chunk_size=1000):\n    \"\"\"Import data from a CSV file.\"\"\"\n    import csv\n\n    records = []\n    with open(csv_file_path, 'r') as file:\n        reader = csv.DictReader(file)\n\n        for row in reader:\n            # Clean and prepare the data\n            record = {\n                k: v.strip() if isinstance(v, str) else v\n                for k, v in row.items()\n                if v\n            }\n            records.append(record)\n\n            # Process in chunks\n            if len(records) &gt;= chunk_size:\n                result = table.batch_create_records(records)\n                print(f\"Imported {result.success_count} records\")\n                records = []\n\n    # Process remaining records\n    if records:\n        result = table.batch_create_records(records)\n        print(f\"Imported {result.success_count} records\")\n</code></pre>"},{"location":"tables/bulk-operations/#data-export","title":"Data Export","text":"<pre><code>def export_table_data(table, output_file):\n    \"\"\"Export table data to a file.\"\"\"\n    # Get all records\n    records = table.get_records()\n\n    # Write to file\n    with open(output_file, 'w') as file:\n        if records:\n            # Get field names from first record\n            fields = records[0].fields.keys()\n\n            # Write header\n            file.write(','.join(fields) + '\\n')\n\n            # Write records\n            for record in records:\n                values = [str(record.fields.get(field, '')) for field in fields]\n                file.write(','.join(values) + '\\n')\n</code></pre>"},{"location":"tables/bulk-operations/#performance-optimization","title":"Performance Optimization","text":""},{"location":"tables/bulk-operations/#efficient-batch-processing","title":"Efficient Batch Processing","text":"<pre><code>def optimize_batch_operation(records, validate=True):\n    \"\"\"Optimize records for batch processing.\"\"\"\n    optimized = []\n\n    for record in records:\n        # Remove null values\n        cleaned = {k: v for k, v in record.items() if v is not None}\n\n        # Convert data types if needed\n        if 'date' in cleaned:\n            cleaned['date'] = cleaned['date'].isoformat()\n\n        optimized.append(cleaned)\n\n    return optimized\n\n# Example usage\nraw_records = [\n    {\"name\": \"User 1\", \"age\": 25, \"notes\": None},\n    {\"name\": \"User 2\", \"age\": 30, \"notes\": \"\"}\n]\n\noptimized_records = optimize_batch_operation(raw_records)\nresult = table.batch_create_records(optimized_records)\n</code></pre>"},{"location":"tables/bulk-operations/#best-practices","title":"Best Practices","text":"<ol> <li>Batch Processing</li> <li>Use appropriate chunk sizes</li> <li>Handle partial failures gracefully</li> <li>Monitor memory usage</li> <li> <p>Implement retry logic</p> </li> <li> <p>Data Preparation</p> </li> <li>Clean data before processing</li> <li>Validate data structure</li> <li>Handle missing values</li> <li> <p>Convert data types appropriately</p> </li> <li> <p>Error Handling</p> </li> <li>Implement comprehensive error handling</li> <li>Log failures for review</li> <li>Provide meaningful error messages</li> <li> <p>Consider recovery strategies</p> </li> <li> <p>Performance</p> </li> <li>Optimize batch sizes</li> <li>Use efficient data structures</li> <li>Monitor API rate limits</li> <li>Implement progress tracking</li> </ol>"},{"location":"tables/bulk-operations/#error-recovery","title":"Error Recovery","text":"<pre><code>def recover_failed_operations(failed_records, retry_count=3):\n    \"\"\"Attempt to recover failed batch operations.\"\"\"\n    for attempt in range(retry_count):\n        if not failed_records:\n            break\n\n        print(f\"Retry attempt {attempt + 1}\")\n        retry_records = failed_records\n        failed_records = []\n\n        try:\n            result = table.batch_create_records(retry_records)\n            failed_records.extend([\n                retry_records[error.index]\n                for error in result.errors\n            ])\n        except TeableError as e:\n            print(f\"Retry failed: {e}\")\n            failed_records.extend(retry_records)\n\n    return failed_records\n</code></pre>"},{"location":"tables/bulk-operations/#next-steps","title":"Next Steps","text":"<p>After mastering bulk operations, you can:</p> <ul> <li>Set up automated workflows</li> <li>Configure data validation</li> <li>Work with views</li> <li>Implement data synchronization</li> </ul>"},{"location":"tables/connection/","title":"Table Connections and Relationships","text":"<p>This guide covers how to establish and manage connections between tables in Teable using the Teable-Client library. Table connections allow you to create relationships between different tables and link related data.</p>"},{"location":"tables/connection/#understanding-table-relationships","title":"Understanding Table Relationships","text":"<p>Teable supports different types of relationships between tables:</p> <ul> <li>One-to-One: Each record in the first table corresponds to exactly one record in the second table</li> <li>One-to-Many: Each record in the first table can be linked to multiple records in the second table</li> <li>Many-to-One: Multiple records in the first table can be linked to a single record in the second table</li> <li>Many-to-Many: Records in both tables can have multiple connections to each other</li> </ul>"},{"location":"tables/connection/#creating-linked-fields","title":"Creating Linked Fields","text":""},{"location":"tables/connection/#basic-link-field","title":"Basic Link Field","text":"<pre><code>from teable import TeableClient, TeableConfig\n\n# Initialize the client\nclient = TeableClient(TeableConfig(\n    api_url=\"https://your-teable-instance.com/api\",\n    api_key=\"your-api-key\"\n))\n\n# Get your tables\nemployees_table = client.get_table(\"employees_table_id\")\nprojects_table = client.get_table(\"projects_table_id\")\n\n# Create a link field in the projects table to link to employees\nlink_field = {\n    \"name\": \"Project Manager\",\n    \"type\": \"link\",\n    \"options\": {\n        \"relationship\": \"many_to_one\",  # Each project has one manager\n        \"foreignTableId\": employees_table.table_id,\n        \"symmetricFieldId\": None  # Optional: ID of the reciprocal field\n    }\n}\n\n# Add the link field to the projects table\nprojects_table.create_field(link_field)\n</code></pre>"},{"location":"tables/connection/#bidirectional-links","title":"Bidirectional Links","text":"<p>Create linked fields that automatically maintain relationships in both directions:</p> <pre><code># Create a bidirectional link between employees and projects\nmanager_field = {\n    \"name\": \"Project Manager\",\n    \"type\": \"link\",\n    \"options\": {\n        \"relationship\": \"many_to_one\",\n        \"foreignTableId\": employees_table.table_id\n    }\n}\n\n# Create the field and get its ID\nmanager_link = projects_table.create_field(manager_field)\n\n# Create the reciprocal field in the employees table\nmanaged_projects_field = {\n    \"name\": \"Managed Projects\",\n    \"type\": \"link\",\n    \"options\": {\n        \"relationship\": \"one_to_many\",\n        \"foreignTableId\": projects_table.table_id,\n        \"symmetricFieldId\": manager_link.field_id\n    }\n}\n\nemployees_table.create_field(managed_projects_field)\n</code></pre>"},{"location":"tables/connection/#working-with-linked-records","title":"Working with Linked Records","text":""},{"location":"tables/connection/#creating-records-with-links","title":"Creating Records with Links","text":"<pre><code># Create a project and link it to an existing employee\nproject = projects_table.create_record({\n    \"Project Name\": \"New Website\",\n    \"Project Manager\": [\"employee123\"]  # Link to employee by ID\n})\n\n# Create multiple links\nproject = projects_table.create_record({\n    \"Project Name\": \"Big Initiative\",\n    \"Team Members\": [\"employee123\", \"employee456\"]  # Many-to-many relationship\n})\n</code></pre>"},{"location":"tables/connection/#querying-linked-records","title":"Querying Linked Records","text":"<pre><code># Get all projects managed by a specific employee\nprojects = projects_table.get_records(\n    filter={\n        \"field\": \"Project Manager\",\n        \"operator\": \"=\",\n        \"value\": \"employee123\"\n    }\n)\n\n# Get projects with specific team members\nprojects = projects_table.get_records(\n    filter={\n        \"field\": \"Team Members\",\n        \"operator\": \"contains\",\n        \"value\": \"employee123\"\n    }\n)\n</code></pre>"},{"location":"tables/connection/#updating-linked-records","title":"Updating Linked Records","text":"<pre><code># Update project manager\nprojects_table.update_record(\n    record_id=\"project123\",\n    fields={\n        \"Project Manager\": [\"new_manager_id\"]\n    }\n)\n\n# Add team members\ncurrent_team = project.fields[\"Team Members\"]\nprojects_table.update_record(\n    record_id=\"project123\",\n    fields={\n        \"Team Members\": current_team + [\"new_member_id\"]\n    }\n)\n</code></pre>"},{"location":"tables/connection/#advanced-link-features","title":"Advanced Link Features","text":""},{"location":"tables/connection/#lookup-fields","title":"Lookup Fields","text":"<p>Create fields that display data from linked records:</p> <pre><code># Create a lookup field to show manager's email\nlookup_field = {\n    \"name\": \"Manager Email\",\n    \"type\": \"lookup\",\n    \"options\": {\n        \"relationship\": \"many_to_one\",\n        \"foreignTableId\": employees_table.table_id,\n        \"lookupFieldId\": \"email_field_id\"  # ID of the email field in employees table\n    }\n}\n\nprojects_table.create_field(lookup_field)\n</code></pre>"},{"location":"tables/connection/#rollup-fields","title":"Rollup Fields","text":"<p>Create fields that aggregate data from linked records:</p> <pre><code># Create a rollup field to count team members\nrollup_field = {\n    \"name\": \"Team Size\",\n    \"type\": \"rollup\",\n    \"options\": {\n        \"relationship\": \"one_to_many\",\n        \"foreignTableId\": employees_table.table_id,\n        \"rollupFunction\": \"count\"\n    }\n}\n\nprojects_table.create_field(rollup_field)\n</code></pre>"},{"location":"tables/connection/#best-practices","title":"Best Practices","text":"<ol> <li>Relationship Planning</li> <li>Plan your table relationships before implementation</li> <li>Choose appropriate relationship types</li> <li>Consider data integrity implications</li> <li> <p>Document relationship purposes</p> </li> <li> <p>Field Naming</p> </li> <li>Use clear, descriptive names for linked fields</li> <li>Maintain consistent naming conventions</li> <li>Consider bidirectional relationship names</li> <li> <p>Document field relationships</p> </li> <li> <p>Performance</p> </li> <li>Use appropriate relationship types</li> <li>Consider query performance implications</li> <li>Index frequently queried linked fields</li> <li> <p>Limit unnecessary bidirectional links</p> </li> <li> <p>Data Integrity</p> </li> <li>Validate linked records exist</li> <li>Handle deleted records appropriately</li> <li>Maintain referential integrity</li> <li>Regular relationship audits</li> </ol>"},{"location":"tables/connection/#error-handling","title":"Error Handling","text":"<pre><code>from teable.exceptions import TeableError, ValidationError\n\ntry:\n    # Create a linked field\n    link_field = {\n        \"name\": \"Project Manager\",\n        \"type\": \"link\",\n        \"options\": {\n            \"relationship\": \"many_to_one\",\n            \"foreignTableId\": employees_table.table_id\n        }\n    }\n    projects_table.create_field(link_field)\nexcept ValidationError as e:\n    print(f\"Invalid field configuration: {e}\")\nexcept TeableError as e:\n    print(f\"Error creating link: {e}\")\n\n# Validate linked records\ntry:\n    projects_table.validate_record_fields({\n        \"Project Name\": \"New Project\",\n        \"Project Manager\": [\"invalid_id\"]\n    })\nexcept ValidationError as e:\n    print(f\"Invalid link reference: {e}\")\n</code></pre>"},{"location":"tables/connection/#next-steps","title":"Next Steps","text":"<p>After setting up table connections, you can:</p> <ul> <li>Create and manage records</li> <li>Set up views</li> <li>Configure data validation</li> <li>Work with bulk operations</li> </ul>"},{"location":"tables/creation/","title":"Creating and Configuring Tables","text":"<p>This guide covers how to create and configure tables in Teable using the Teable-Client library. Tables are the core data structures that store and organize your information.</p>"},{"location":"tables/creation/#basic-table-creation","title":"Basic Table Creation","text":""},{"location":"tables/creation/#creating-a-simple-table","title":"Creating a Simple Table","text":"<pre><code>from teable import TeableClient, TeableConfig\n\n# Initialize the client\nclient = TeableClient(TeableConfig(\n    api_url=\"https://your-teable-instance.com/api\",\n    api_key=\"your-api-key\"\n))\n\n# Get a base\nbase = client.get_base(\"base123\")\n\n# Create a basic table\ntable = base.create_table(\n    name=\"Employees\",\n    description=\"Employee directory and information\"\n)\n\nprint(f\"Created table: {table.name} (ID: {table.table_id})\")\n</code></pre>"},{"location":"tables/creation/#creating-a-table-with-fields","title":"Creating a Table with Fields","text":"<pre><code># Define fields for the table\nfields = [\n    {\n        \"name\": \"Full Name\",\n        \"type\": \"text\",\n        \"required\": True,\n        \"description\": \"Employee's full name\"\n    },\n    {\n        \"name\": \"Email\",\n        \"type\": \"email\",\n        \"required\": True,\n        \"unique\": True\n    },\n    {\n        \"name\": \"Department\",\n        \"type\": \"single_select\",\n        \"options\": {\n            \"choices\": [\n                {\"name\": \"Engineering\"},\n                {\"name\": \"Marketing\"},\n                {\"name\": \"Sales\"},\n                {\"name\": \"HR\"}\n            ]\n        }\n    },\n    {\n        \"name\": \"Start Date\",\n        \"type\": \"date\",\n        \"description\": \"Employee's start date\"\n    },\n    {\n        \"name\": \"Salary\",\n        \"type\": \"number\",\n        \"description\": \"Annual salary\",\n        \"options\": {\n            \"format\": \"currency\",\n            \"precision\": 2\n        }\n    }\n]\n\n# Create table with fields\ntable = base.create_table(\n    name=\"Employees\",\n    description=\"Employee directory and information\",\n    fields=fields\n)\n</code></pre>"},{"location":"tables/creation/#field-management","title":"Field Management","text":""},{"location":"tables/creation/#getting-table-fields","title":"Getting Table Fields","text":"<pre><code># Access all fields in a table\nfields = table.fields\n\nfor field in fields:\n    print(f\"Field: {field.name}\")\n    print(f\"Type: {field.field_type}\")\n    print(f\"Required: {field.is_required}\")\n    print(f\"Description: {field.description or 'No description'}\")\n    print(\"---\")\n</code></pre>"},{"location":"tables/creation/#getting-a-specific-field","title":"Getting a Specific Field","text":"<pre><code>try:\n    # Get field by ID\n    field = table.get_field(\"field123\")\n    print(f\"Field name: {field.name}\")\n    print(f\"Field type: {field.field_type}\")\nexcept ResourceNotFoundError:\n    print(\"Field not found\")\n</code></pre>"},{"location":"tables/creation/#field-validation","title":"Field Validation","text":"<p>Tables automatically validate data against field configurations:</p> <pre><code>try:\n    # Create a record with field validation\n    record = table.create_record({\n        \"Full Name\": \"John Doe\",\n        \"Email\": \"john@example.com\",\n        \"Department\": \"Engineering\",\n        \"Start Date\": \"2023-01-15\",\n        \"Salary\": 75000\n    })\n    print(f\"Created record: {record.id}\")\nexcept ValidationError as e:\n    print(f\"Validation error: {e}\")\n</code></pre>"},{"location":"tables/creation/#table-properties","title":"Table Properties","text":""},{"location":"tables/creation/#accessing-table-information","title":"Accessing Table Information","text":"<pre><code># Get table properties\nprint(f\"Table ID: {table.table_id}\")\nprint(f\"Name: {table.name}\")\nprint(f\"Description: {table.description}\")\n</code></pre>"},{"location":"tables/creation/#clearing-cache","title":"Clearing Cache","text":"<p>Tables cache field and view information for performance. You can clear this cache when needed:</p> <pre><code># Clear cached data\ntable.clear_cache()\n\n# Access fresh data\nfields = table.fields  # Will fetch fresh field data\nviews = table.views    # Will fetch fresh view data\n</code></pre>"},{"location":"tables/creation/#common-field-types","title":"Common Field Types","text":"<p>Here are examples of different field types you can use when creating tables:</p> <pre><code>fields = [\n    # Text Fields\n    {\n        \"name\": \"Simple Text\",\n        \"type\": \"text\"\n    },\n    {\n        \"name\": \"Long Text\",\n        \"type\": \"text\",\n        \"options\": {\n            \"multiline\": True\n        }\n    },\n\n    # Numeric Fields\n    {\n        \"name\": \"Number\",\n        \"type\": \"number\",\n        \"options\": {\n            \"precision\": 2\n        }\n    },\n    {\n        \"name\": \"Currency\",\n        \"type\": \"number\",\n        \"options\": {\n            \"format\": \"currency\",\n            \"precision\": 2,\n            \"symbol\": \"$\"\n        }\n    },\n\n    # Selection Fields\n    {\n        \"name\": \"Single Select\",\n        \"type\": \"single_select\",\n        \"options\": {\n            \"choices\": [\n                {\"name\": \"Option 1\"},\n                {\"name\": \"Option 2\"}\n            ]\n        }\n    },\n    {\n        \"name\": \"Multi Select\",\n        \"type\": \"multiple_select\",\n        \"options\": {\n            \"choices\": [\n                {\"name\": \"Tag 1\"},\n                {\"name\": \"Tag 2\"}\n            ]\n        }\n    },\n\n    # Date and Time Fields\n    {\n        \"name\": \"Date\",\n        \"type\": \"date\"\n    },\n    {\n        \"name\": \"Date Time\",\n        \"type\": \"date\",\n        \"options\": {\n            \"include_time\": True\n        }\n    },\n\n    # Special Fields\n    {\n        \"name\": \"Email\",\n        \"type\": \"email\"\n    },\n    {\n        \"name\": \"URL\",\n        \"type\": \"url\"\n    },\n    {\n        \"name\": \"Attachment\",\n        \"type\": \"attachment\"\n    },\n    {\n        \"name\": \"Checkbox\",\n        \"type\": \"checkbox\"\n    }\n]\n</code></pre>"},{"location":"tables/creation/#best-practices","title":"Best Practices","text":"<ol> <li>Field Planning</li> <li>Plan your field structure before creating tables</li> <li>Use appropriate field types for data</li> <li>Set required fields appropriately</li> <li> <p>Add field descriptions for clarity</p> </li> <li> <p>Data Validation</p> </li> <li>Use field constraints to ensure data quality</li> <li>Implement unique constraints where needed</li> <li>Set appropriate field formats</li> <li> <p>Document validation requirements</p> </li> <li> <p>Performance</p> </li> <li>Create tables with all fields initially when possible</li> <li>Use batch operations for multiple records</li> <li>Clear cache only when necessary</li> <li> <p>Consider field indexing for large tables</p> </li> <li> <p>Documentation</p> </li> <li>Add clear table descriptions</li> <li>Document field purposes</li> <li>Maintain field naming conventions</li> <li>Keep field options documented</li> </ol>"},{"location":"tables/creation/#error-handling","title":"Error Handling","text":"<pre><code>from teable.exceptions import TeableError, ValidationError, ResourceNotFoundError\n\ntry:\n    # Create table with fields\n    table = base.create_table(\n        name=\"Employees\",\n        fields=fields\n    )\nexcept ValidationError as e:\n    print(f\"Invalid field configuration: {e}\")\nexcept TeableError as e:\n    print(f\"Error creating table: {e}\")\n\n# Field validation\ntry:\n    table.validate_record_fields({\n        \"Full Name\": \"John Doe\",\n        \"Email\": \"invalid-email\"\n    })\nexcept ValidationError as e:\n    print(f\"Field validation error: {e}\")\n</code></pre>"},{"location":"tables/creation/#next-steps","title":"Next Steps","text":"<p>After creating your table, you can:</p> <ul> <li>Configure table connections</li> <li>Manage records</li> <li>Set up views</li> <li>Configure bulk operations</li> </ul>"},{"location":"tables/data-insertion/","title":"Data Insertion and Record Creation","text":"<p>This guide covers how to insert data and create records in Teable tables using the Teable-Client library. Learn about single record creation, batch operations, and data validation.</p>"},{"location":"tables/data-insertion/#single-record-creation","title":"Single Record Creation","text":""},{"location":"tables/data-insertion/#basic-record-creation","title":"Basic Record Creation","text":"<pre><code>from teable import TeableClient, TeableConfig\n\n# Initialize the client\nclient = TeableClient(TeableConfig(\n    api_url=\"https://your-teable-instance.com/api\",\n    api_key=\"your-api-key\"\n))\n\n# Get your table\ntable = client.get_table(\"table_id\")\n\n# Create a single record\nrecord = table.create_record({\n    \"Name\": \"John Doe\",\n    \"Email\": \"john@example.com\",\n    \"Department\": \"Engineering\",\n    \"Start Date\": \"2023-01-15\"\n})\n\nprint(f\"Created record ID: {record.id}\")\n</code></pre>"},{"location":"tables/data-insertion/#record-creation-with-validation","title":"Record Creation with Validation","text":"<pre><code>from teable.exceptions import ValidationError\n\ntry:\n    # Create record with validation\n    record = table.create_record({\n        \"Name\": \"Jane Smith\",\n        \"Email\": \"jane@example.com\",\n        \"Salary\": 75000,\n        \"Active\": True\n    })\nexcept ValidationError as e:\n    print(f\"Validation error: {e}\")\n</code></pre>"},{"location":"tables/data-insertion/#batch-record-creation","title":"Batch Record Creation","text":""},{"location":"tables/data-insertion/#creating-multiple-records","title":"Creating Multiple Records","text":"<pre><code># Prepare multiple records\nrecords = [\n    {\n        \"Name\": \"Alice Johnson\",\n        \"Email\": \"alice@example.com\",\n        \"Department\": \"Marketing\"\n    },\n    {\n        \"Name\": \"Bob Wilson\",\n        \"Email\": \"bob@example.com\",\n        \"Department\": \"Sales\"\n    },\n    {\n        \"Name\": \"Carol Brown\",\n        \"Email\": \"carol@example.com\",\n        \"Department\": \"Engineering\"\n    }\n]\n\n# Batch create records\nresult = table.batch_create_records(\n    records=records,\n    field_key_type=\"name\",  # Use field names instead of IDs\n    typecast=True  # Automatically convert data types\n)\n\nprint(f\"Successfully created {result.success_count} records\")\n</code></pre>"},{"location":"tables/data-insertion/#batch-creation-with-order","title":"Batch Creation with Order","text":"<pre><code># Create records with specific order\nresult = table.batch_create_records(\n    records=records,\n    order={\n        \"viewId\": \"view123\",\n        \"anchorId\": \"record123\",\n        \"position\": \"after\"\n    }\n)\n</code></pre>"},{"location":"tables/data-insertion/#advanced-data-insertion","title":"Advanced Data Insertion","text":""},{"location":"tables/data-insertion/#type-casting","title":"Type Casting","text":"<pre><code># Create record with automatic type casting\nrecord = table.create_record(\n    fields={\n        \"Name\": \"David Lee\",\n        \"Hire Date\": \"2023-01-15\",  # String date will be converted\n        \"Salary\": \"75000\",          # String number will be converted\n        \"Active\": \"true\"            # String boolean will be converted\n    },\n    typecast=True\n)\n</code></pre>"},{"location":"tables/data-insertion/#field-key-types","title":"Field Key Types","text":"<pre><code># Using field IDs instead of names\nrecord = table.create_record(\n    fields={\n        \"fld123\": \"David Lee\",      # Field ID for Name\n        \"fld456\": \"david@example.com\"  # Field ID for Email\n    },\n    field_key_type=\"id\"\n)\n</code></pre>"},{"location":"tables/data-insertion/#validation-and-error-handling","title":"Validation and Error Handling","text":""},{"location":"tables/data-insertion/#pre-validation","title":"Pre-validation","text":"<pre><code>try:\n    # Validate fields before creation\n    table.validate_record_fields({\n        \"Name\": \"Test User\",\n        \"Email\": \"invalid-email\",\n        \"Department\": \"Invalid Dept\"\n    })\nexcept ValidationError as e:\n    print(f\"Validation failed: {e}\")\n</code></pre>"},{"location":"tables/data-insertion/#batch-error-handling","title":"Batch Error Handling","text":"<pre><code>from teable.exceptions import TeableError\n\ntry:\n    # Attempt batch creation\n    records = [\n        {\"Name\": \"User 1\", \"Email\": \"valid@example.com\"},\n        {\"Name\": \"User 2\", \"Email\": \"invalid-email\"},\n        {\"Name\": \"User 3\", \"Email\": \"another@example.com\"}\n    ]\n\n    result = table.batch_create_records(records)\n\n    # Check for partial success\n    print(f\"Successful: {result.success_count}\")\n    print(f\"Failed: {result.failure_count}\")\n\n    # Handle failed records\n    for error in result.errors:\n        print(f\"Error in record {error.index}: {error.message}\")\n\nexcept TeableError as e:\n    print(f\"Batch operation failed: {e}\")\n</code></pre>"},{"location":"tables/data-insertion/#performance-optimization","title":"Performance Optimization","text":""},{"location":"tables/data-insertion/#chunked-batch-operations","title":"Chunked Batch Operations","text":"<pre><code>def create_records_in_chunks(table, records, chunk_size=1000):\n    \"\"\"Create records in chunks to handle large datasets.\"\"\"\n    for i in range(0, len(records), chunk_size):\n        chunk = records[i:i + chunk_size]\n        result = table.batch_create_records(chunk)\n        print(f\"Processed chunk {i//chunk_size + 1}: {result.success_count} successful\")\n</code></pre>"},{"location":"tables/data-insertion/#efficient-data-preparation","title":"Efficient Data Preparation","text":"<pre><code># Prepare data efficiently for batch insertion\nfrom typing import List, Dict, Any\n\ndef prepare_records(data: List[Dict[str, Any]]) -&gt; List[Dict[str, Any]]:\n    \"\"\"Prepare records for batch insertion with validation.\"\"\"\n    prepared_records = []\n\n    for item in data:\n        # Basic data cleaning\n        record = {\n            k: v.strip() if isinstance(v, str) else v\n            for k, v in item.items()\n            if v is not None\n        }\n\n        # Add any default values\n        record.setdefault(\"Status\", \"Active\")\n\n        prepared_records.append(record)\n\n    return prepared_records\n\n# Use the prepared data\nraw_data = [{\"Name\": \"User 1 \"}, {\"Name\": \"User 2 \"}]  # Note trailing spaces\nrecords = prepare_records(raw_data)\nresult = table.batch_create_records(records)\n</code></pre>"},{"location":"tables/data-insertion/#best-practices","title":"Best Practices","text":"<ol> <li>Data Validation</li> <li>Validate data before insertion</li> <li>Handle validation errors gracefully</li> <li>Use appropriate data types</li> <li> <p>Clean and normalize data</p> </li> <li> <p>Batch Operations</p> </li> <li>Use batch operations for multiple records</li> <li>Process large datasets in chunks</li> <li>Handle partial failures appropriately</li> <li> <p>Monitor performance</p> </li> <li> <p>Error Handling</p> </li> <li>Implement comprehensive error handling</li> <li>Log validation failures</li> <li>Provide meaningful error messages</li> <li> <p>Handle retries for transient failures</p> </li> <li> <p>Performance</p> </li> <li>Use appropriate chunk sizes</li> <li>Minimize API calls</li> <li>Prepare data efficiently</li> <li>Monitor memory usage</li> </ol>"},{"location":"tables/data-insertion/#error-handling-examples","title":"Error Handling Examples","text":"<pre><code>from teable.exceptions import TeableError, ValidationError, ResourceNotFoundError\n\ndef safe_create_record(table, data):\n    \"\"\"Safely create a record with error handling.\"\"\"\n    try:\n        # Validate first\n        table.validate_record_fields(data)\n\n        # Create record\n        record = table.create_record(data)\n        return record\n\n    except ValidationError as e:\n        print(f\"Data validation failed: {e}\")\n        return None\n    except ResourceNotFoundError as e:\n        print(f\"Table or field not found: {e}\")\n        return None\n    except TeableError as e:\n        print(f\"Operation failed: {e}\")\n        return None\n</code></pre>"},{"location":"tables/data-insertion/#next-steps","title":"Next Steps","text":"<p>After mastering data insertion, you can:</p> <ul> <li>Query and filter records</li> <li>Update existing records</li> <li>Delete records</li> <li>Work with views</li> </ul>"},{"location":"tables/management/","title":"Table Management","text":"<p>This guide covers how to manage tables in Teable, including listing, updating, and organizing tables.</p>"},{"location":"tables/management/#basic-table-management","title":"Basic Table Management","text":""},{"location":"tables/management/#getting-tables","title":"Getting Tables","text":"<pre><code>from teable import TeableClient, TeableConfig\n\n# Initialize the client\nclient = TeableClient(TeableConfig(\n    api_url=\"https://your-teable-instance.com/api\",\n    api_key=\"your-api-key\"\n))\n\n# Get a specific table\ntable = client.get_table(\"table_id\")\n\n# Get all tables in a base\nbase = client.get_base(\"base_id\")\ntables = base.get_tables()\n\n# Process tables\nfor table in tables:\n    print(f\"Table: {table.name}\")\n    print(f\"ID: {table.table_id}\")\n    print(f\"Description: {table.description}\")\n    print(\"---\")\n</code></pre>"},{"location":"tables/management/#updating-tables","title":"Updating Tables","text":"<pre><code># Update table properties\ntable.update(\n    name=\"New Table Name\",\n    description=\"Updated description\"\n)\n\n# Update table configuration\ntable.update_config({\n    \"displayMode\": \"grid\",\n    \"showSystemFields\": False,\n    \"defaultSortField\": \"created_time\",\n    \"defaultSortDirection\": \"desc\"\n})\n</code></pre>"},{"location":"tables/management/#table-organization","title":"Table Organization","text":""},{"location":"tables/management/#managing-fields","title":"Managing Fields","text":"<pre><code># Get all fields\nfields = table.fields\n\n# Get specific field\nfield = table.get_field(\"field_id\")\n\n# Create new field\nnew_field = table.create_field({\n    \"name\": \"Status\",\n    \"type\": \"single_select\",\n    \"options\": {\n        \"choices\": [\n            {\"name\": \"Active\"},\n            {\"name\": \"Inactive\"}\n        ]\n    }\n})\n\n# Update field\nfield.update({\n    \"name\": \"New Name\",\n    \"description\": \"Updated description\"\n})\n\n# Delete field\nfield.delete()\n</code></pre>"},{"location":"tables/management/#managing-views","title":"Managing Views","text":"<pre><code># Get all views\nviews = table.views\n\n# Get specific view\nview = table.get_view(\"view_id\")\n\n# Create new view\nnew_view = table.create_view({\n    \"name\": \"Custom View\",\n    \"type\": \"grid\",\n    \"filter\": {\n        \"operator\": \"and\",\n        \"conditions\": [\n            {\n                \"field\": \"Status\",\n                \"operator\": \"=\",\n                \"value\": \"Active\"\n            }\n        ]\n    }\n})\n\n# Update view\nview.update({\n    \"name\": \"Updated View\",\n    \"sort\": [\n        {\n            \"field\": \"created_time\",\n            \"direction\": \"desc\"\n        }\n    ]\n})\n\n# Delete view\nview.delete()\n</code></pre>"},{"location":"tables/management/#data-management","title":"Data Management","text":""},{"location":"tables/management/#record-operations","title":"Record Operations","text":"<pre><code># Get record count\ncount = table.get_record_count()\n\n# Get records with filtering\nrecords = table.get_records(\n    filter={\n        \"field\": \"Status\",\n        \"operator\": \"=\",\n        \"value\": \"Active\"\n    }\n)\n\n# Export data\ntable.export_csv(\"output.csv\")\n\n# Import data\nwith open(\"input.csv\", \"rb\") as file:\n    table.import_csv(file)\n</code></pre>"},{"location":"tables/management/#batch-operations","title":"Batch Operations","text":"<pre><code># Batch create records\nrecords = [\n    {\"Name\": f\"Record {i}\"} for i in range(100)\n]\nresult = table.batch_create_records(records)\n\n# Batch update records\nupdates = [\n    {\n        \"recordId\": f\"rec{i}\",\n        \"fields\": {\"Status\": \"Updated\"}\n    }\n    for i in range(100)\n]\nresult = table.batch_update_records(updates)\n\n# Batch delete records\nrecord_ids = [f\"rec{i}\" for i in range(100)]\nresult = table.batch_delete_records(record_ids)\n</code></pre>"},{"location":"tables/management/#table-relationships","title":"Table Relationships","text":""},{"location":"tables/management/#managing-links","title":"Managing Links","text":"<pre><code># Create linked field\nlinked_field = table.create_field({\n    \"name\": \"Related Items\",\n    \"type\": \"link\",\n    \"options\": {\n        \"relationship\": \"many_to_many\",\n        \"foreignTableId\": \"other_table_id\"\n    }\n})\n\n# Update relationship\nlinked_field.update({\n    \"options\": {\n        \"relationship\": \"one_to_many\"\n    }\n})\n</code></pre>"},{"location":"tables/management/#querying-related-records","title":"Querying Related Records","text":"<pre><code># Get records with related data\nrecords = table.get_records(\n    filter={\n        \"field\": \"Related Items\",\n        \"operator\": \"has\",\n        \"value\": [\"rec123\"]\n    }\n)\n\n# Query through relationship\nrelated_records = table.query(\n    \"SELECT t1.*, t2.name FROM current_table t1 \" +\n    \"JOIN other_table t2 ON t1.related_items = t2.id\"\n)\n</code></pre>"},{"location":"tables/management/#best-practices","title":"Best Practices","text":"<ol> <li>Table Design</li> <li>Plan table structure carefully</li> <li>Use appropriate field types</li> <li>Consider relationships</li> <li> <p>Document table purpose</p> </li> <li> <p>Performance</p> </li> <li>Use batch operations</li> <li>Implement pagination</li> <li>Optimize queries</li> <li> <p>Monitor table size</p> </li> <li> <p>Data Integrity</p> </li> <li>Validate data before import</li> <li>Maintain relationships</li> <li>Regular data cleanup</li> <li> <p>Backup important data</p> </li> <li> <p>Organization</p> </li> <li>Use clear naming conventions</li> <li>Group related tables</li> <li>Maintain documentation</li> <li>Regular maintenance</li> </ol>"},{"location":"tables/management/#next-steps","title":"Next Steps","text":"<ul> <li>Table Connections</li> <li>Data Insertion</li> <li>Bulk Operations</li> <li>Views Creation</li> </ul>"},{"location":"views/creation/","title":"Creating and Managing Views","text":"<p>This guide covers how to create and manage views in Teable tables. Views provide different ways to visualize and interact with your table data.</p>"},{"location":"views/creation/#creating-views","title":"Creating Views","text":""},{"location":"views/creation/#basic-view-creation","title":"Basic View Creation","text":"<pre><code>from teable import TeableClient, TeableConfig\n\n# Initialize the client\nclient = TeableClient(TeableConfig(\n    api_url=\"https://your-teable-instance.com/api\",\n    api_key=\"your-api-key\"\n))\n\n# Get your table\ntable = client.get_table(\"table_id\")\n\n# Create a basic grid view\nview = table.create_view({\n    \"name\": \"My Grid View\",\n    \"type\": \"grid\"\n})\n\nprint(f\"Created view: {view.view_id}\")\n</code></pre>"},{"location":"views/creation/#view-types","title":"View Types","text":"<pre><code># Grid View\ngrid_view = table.create_view({\n    \"name\": \"Grid View\",\n    \"type\": \"grid\"\n})\n\n# Calendar View\ncalendar_view = table.create_view({\n    \"name\": \"Calendar View\",\n    \"type\": \"calendar\",\n    \"options\": {\n        \"dateField\": \"due_date\"  # Field to use for calendar\n    }\n})\n\n# Kanban View\nkanban_view = table.create_view({\n    \"name\": \"Project Status\",\n    \"type\": \"kanban\",\n    \"options\": {\n        \"groupField\": \"status\"  # Field to group by\n    }\n})\n\n# Gallery View\ngallery_view = table.create_view({\n    \"name\": \"Image Gallery\",\n    \"type\": \"gallery\",\n    \"options\": {\n        \"coverField\": \"image\"  # Field to use as cover\n    }\n})\n</code></pre>"},{"location":"views/creation/#view-configuration","title":"View Configuration","text":""},{"location":"views/creation/#filtering-records","title":"Filtering Records","text":"<pre><code># Create view with filters\nview = table.create_view({\n    \"name\": \"Active Projects\",\n    \"type\": \"grid\",\n    \"filter\": {\n        \"operator\": \"and\",\n        \"conditions\": [\n            {\n                \"field\": \"Status\",\n                \"operator\": \"=\",\n                \"value\": \"Active\"\n            },\n            {\n                \"field\": \"Due Date\",\n                \"operator\": \"&gt;\",\n                \"value\": \"2023-01-01\"\n            }\n        ]\n    }\n})\n</code></pre>"},{"location":"views/creation/#sorting-records","title":"Sorting Records","text":"<pre><code># Create view with sorting\nview = table.create_view({\n    \"name\": \"Projects by Priority\",\n    \"type\": \"grid\",\n    \"sort\": [\n        {\n            \"field\": \"Priority\",\n            \"direction\": \"desc\"\n        },\n        {\n            \"field\": \"Due Date\",\n            \"direction\": \"asc\"\n        }\n    ]\n})\n</code></pre>"},{"location":"views/creation/#field-visibility","title":"Field Visibility","text":"<pre><code># Create view with specific visible fields\nview = table.create_view({\n    \"name\": \"Simple View\",\n    \"type\": \"grid\",\n    \"fields\": {\n        \"visible\": [\"Name\", \"Status\", \"Due Date\"],\n        \"hidden\": [\"Internal Notes\", \"Created By\"]\n    }\n})\n</code></pre>"},{"location":"views/creation/#managing-views","title":"Managing Views","text":""},{"location":"views/creation/#getting-views","title":"Getting Views","text":"<pre><code># Get all views in a table\nviews = table.views\n\n# Get a specific view\nview = table.get_view(\"view_id\")\n\n# Access view properties\nprint(f\"View Name: {view.name}\")\nprint(f\"View Type: {view.type}\")\nprint(f\"View Filter: {view.filter}\")\n</code></pre>"},{"location":"views/creation/#updating-views","title":"Updating Views","text":"<pre><code># Update view configuration\nview.update({\n    \"name\": \"Updated View Name\",\n    \"filter\": {\n        \"operator\": \"and\",\n        \"conditions\": [\n            {\n                \"field\": \"Status\",\n                \"operator\": \"in\",\n                \"value\": [\"Active\", \"In Progress\"]\n            }\n        ]\n    }\n})\n</code></pre>"},{"location":"views/creation/#deleting-views","title":"Deleting Views","text":"<pre><code># Delete a view\nsuccess = view.delete()\nif success:\n    print(\"View deleted successfully\")\n</code></pre>"},{"location":"views/creation/#working-with-view-data","title":"Working with View Data","text":""},{"location":"views/creation/#getting-records-from-a-view","title":"Getting Records from a View","text":"<pre><code># Get records using view's configuration\nrecords = table.get_records(view_id=view.view_id)\n\n# Get records ignoring view's query\nrecords = table.get_records(\n    view_id=view.view_id,\n    ignore_view_query=True\n)\n</code></pre>"},{"location":"views/creation/#pagination-in-views","title":"Pagination in Views","text":"<pre><code># Get paginated records from a view\nrecords = table.get_records(\n    view_id=view.view_id,\n    take=50,    # Number of records to return\n    skip=100    # Number of records to skip\n)\n</code></pre>"},{"location":"views/creation/#view-options","title":"View Options","text":""},{"location":"views/creation/#grid-view-options","title":"Grid View Options","text":"<pre><code>grid_view = table.create_view({\n    \"name\": \"Custom Grid\",\n    \"type\": \"grid\",\n    \"options\": {\n        \"frozenColumns\": 2,      # Number of frozen columns\n        \"rowHeight\": \"medium\",   # Row height: \"short\", \"medium\", \"tall\"\n        \"showSystemFields\": False  # Show/hide system fields\n    }\n})\n</code></pre>"},{"location":"views/creation/#calendar-view-options","title":"Calendar View Options","text":"<pre><code>calendar_view = table.create_view({\n    \"name\": \"Event Calendar\",\n    \"type\": \"calendar\",\n    \"options\": {\n        \"dateField\": \"event_date\",\n        \"titleField\": \"event_name\",\n        \"descriptionField\": \"details\",\n        \"colorField\": \"category\"\n    }\n})\n</code></pre>"},{"location":"views/creation/#kanban-view-options","title":"Kanban View Options","text":"<pre><code>kanban_view = table.create_view({\n    \"name\": \"Task Board\",\n    \"type\": \"kanban\",\n    \"options\": {\n        \"groupField\": \"status\",\n        \"stackField\": \"assignee\",\n        \"hideEmptyGroups\": True,\n        \"cardFields\": [\"title\", \"priority\", \"due_date\"]\n    }\n})\n</code></pre>"},{"location":"views/creation/#best-practices","title":"Best Practices","text":"<ol> <li>View Organization</li> <li>Use clear, descriptive names</li> <li>Group related views together</li> <li>Consider user permissions</li> <li> <p>Document view purposes</p> </li> <li> <p>Performance</p> </li> <li>Optimize filters for performance</li> <li>Use appropriate pagination</li> <li>Consider data volume</li> <li> <p>Cache view configurations</p> </li> <li> <p>User Experience</p> </li> <li>Choose appropriate view types</li> <li>Configure meaningful defaults</li> <li>Provide clear field visibility</li> <li> <p>Consider sorting and filtering</p> </li> <li> <p>Maintenance</p> </li> <li>Regular view audits</li> <li>Clean up unused views</li> <li>Update view configurations</li> <li>Monitor view usage</li> </ol>"},{"location":"views/creation/#next-steps","title":"Next Steps","text":"<ul> <li>Table Management</li> <li>Record Operations</li> <li>Field Configuration</li> <li>Advanced Topics</li> </ul>"}]}